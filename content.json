{"meta":{"title":"天火流光","subtitle":"天火流光的小屋","description":"一个人静静坐在电脑面前写代码的感觉，那是什么感觉?那是武林高手闭关修炼的感觉。","author":"天火流光","url":"https://www.thlg.ml","root":"/"},"pages":[{"title":"404","date":"2020-03-26T04:23:18.437Z","updated":"2020-03-26T04:23:18.437Z","comments":true,"path":"/404.html","permalink":"https://www.thlg.ml/404.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"关于","date":"2020-03-28T09:02:52.139Z","updated":"2020-03-28T09:02:52.139Z","comments":false,"path":"about/index.html","permalink":"https://www.thlg.ml/about/index.html","excerpt":"","text":"这个人很懒，什么都没有留下这个人很懒，但还是留下了点东西 时间一晃20多年就过去了，21岁的年纪，也许是人一生中最具挑战性的时候，六七岁的年纪，还能够无忧无虑的生活着，不用去烦恼那些是是非非，到了三四十岁，也许人生就开始变的平淡了（emmm,拒绝平淡，从我做起）。 不管如何，在现在这个年龄阶段，对任何一个人来说，都是非常重要的，在 生涯彩虹图 中，现在正处于 人的一生中的 建立阶段 正是我们要确立自己人生观，世界观，价值观的时候。所以现在应该积极地充实自己，为自己的未来打下结实的基础。 小时候不知是什么原因，对发明创造很感兴趣.因为当时知道的少，就觉得自己的方案可行，但随着时间的慢慢推延，现在想想的话，（原谅我笑了）。但是吧，现在直到踏入这一行以来，才发现，我与我小时的梦想也不远啊，搬代码也很快乐啊 :-） 现在有了这个 blog ,就可以记录一下自己的单点滴滴，为自己留下一点回忆，留下自己学习的经历记录自己走过的历程。加油吧！ 每一天~不要被生活所打倒，我还活着 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"相册","date":"2020-03-28T09:04:40.226Z","updated":"2020-03-28T09:04:40.226Z","comments":false,"path":"photos/index.html","permalink":"https://www.thlg.ml/photos/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"标签","date":"2020-03-26T04:23:35.518Z","updated":"2020-03-26T04:23:35.518Z","comments":false,"path":"tags/index.html","permalink":"https://www.thlg.ml/tags/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"分类","date":"2020-03-26T04:23:29.605Z","updated":"2020-03-26T04:23:29.605Z","comments":false,"path":"categories/index.html","permalink":"https://www.thlg.ml/categories/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"}],"posts":[{"title":"在浏览器中动态加载字体","slug":"在浏览器中动态加载字体","date":"2021-06-04T05:52:35.000Z","updated":"2021-06-05T07:57:49.809Z","comments":true,"path":"2021/06/04/在浏览器中动态加载字体/11611/","link":"","permalink":"https://www.thlg.ml/2021/06/04/%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E4%BD%93/11611/","excerpt":"正在开发一款用于个性化产品的应用，要实现这么一个功能，由用户上传字体文件并实现预览效果，那么要如何动态加载用户上传的文件…","text":"正在开发一款用于个性化产品的应用，要实现这么一个功能，由用户上传字体文件并实现预览效果，那么要如何动态加载用户上传的文件…第一种由 CSS 加载实现1234567891011// 已获取到用户上传的文件const url = (window.URL || window.webkitURL)['createObjectURL'](file)const style = document.createElement('style')style.type = 'text/css'style.innerText = `\\n@font-face { font-family: '${file.name.replace(/\\./g, '-')}'; src: url( '${url}' ); }`document.head.appendChild(style)第二种由 FontFace 实现12345678const url = (window.URL || window.webkitURL)['createObjectURL'](file)const font = new FontFace(file.name.replace(/\\./g, '-'), `url(${url})`);(async () =&gt; { await font.load() document.fonts.add(font) this.userUploadFileFont.name = file.name.replace(/\\./g, '-') this.userUploadFileFont.file = file})()由于该功能是一个试验性的功能，我们应该结合在一起使用 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"JS","slug":"JS","permalink":"https://www.thlg.ml/categories/JS/"}],"tags":[{"name":"font","slug":"font","permalink":"https://www.thlg.ml/tags/font/"}]},{"title":"vue多Tab栏切换点击左右滑动","slug":"vue多Tab栏切换点击左右滑动","date":"2021-05-06T02:24:41.000Z","updated":"2021-05-08T01:21:08.803Z","comments":true,"path":"2021/05/06/vue多Tab栏切换点击左右滑动/27491/","link":"","permalink":"https://www.thlg.ml/2021/05/06/vue%E5%A4%9ATab%E6%A0%8F%E5%88%87%E6%8D%A2%E7%82%B9%E5%87%BB%E5%B7%A6%E5%8F%B3%E6%BB%91%E5%8A%A8/27491/","excerpt":"最近看到一个项目上使用的Tan切换很有意思，可以左右点击控制tab按钮的滑动。后来发现是用的 layui admin 实现的。","text":"最近看到一个项目上使用的Tan切换很有意思，可以左右点击控制tab按钮的滑动。后来发现是用的 layui admin 实现的。先看效果图这里是 vue3 + element-plus123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185&lt;template&gt; &lt;nav class=\"nav-container\"&gt; &lt;span class=\"indicate-btn\" @click=\"handleSollPage('left')\"&gt; &lt;i class=\"el-icon-d-arrow-left\"&gt;&lt;/i&gt; &lt;/span&gt; &lt;el-tag key=\"首页\" :effect=\"'/home' === $route.path ? 'dark' : 'plain'\" @click=\"handleTo({ path: '/home' })\" &gt; &lt;i class=\"el-icon-s-home\" /&gt; 首页 &lt;/el-tag&gt; &lt;div class=\"sliding-window\"&gt; &lt;div class=\"sliding-container\" :style=\"{ transform: `translateX(${offsetX}px)` }\" &gt; &lt;el-tag v-for=\"(tag, i) in tabsList\" :key=\"`${tag.name}-${tag.path}`\" closable :effect=\"tag.path === $route.path ? 'dark' : 'plain'\" @close=\"handleClose(tag, i)\" @click=\"handleTo(tag)\" &gt; &lt;i :data-index=\"i\" :class=\"tag.icon\" /&gt; {{ tag.name }} &lt;/el-tag&gt; &lt;/div&gt; &lt;/div&gt; &lt;span class=\"indicate-btn\" @click=\"handleSollPage('right')\"&gt; &lt;i class=\"el-icon-d-arrow-right\"&gt;&lt;/i&gt; &lt;/span&gt; &lt;/nav&gt;&lt;/template&gt;&lt;script lang=\"ts\"&gt;import { useStore } from 'vuex'import { defineComponent, ref, toRefs, unref } from 'vue'import { RouteLocationRaw, useRouter } from 'vue-router'import { Menu } from '@/custom'import { key } from '@/store'export default defineComponent({ name: 'Crumbs', setup() { const store = useStore(key) const { currentMenu, tabsList } = toRefs(store.state.crumbs) const router = useRouter() const firstSubscript = ref(0) const offsetX = ref(0) const handSwitchTab = (route: Menu) =&gt; store.commit('crumbs/switchTab', route) const handRemoveTab = (route: Menu) =&gt; store.commit('crumbs/removeTab', route) const handleTo = (route: Menu) =&gt; { handSwitchTab(route) router.push(route.path as RouteLocationRaw) } const handleClose = (route: Menu, index: number) =&gt; { if (unref(currentMenu).path === route.path) { if (index === 0 &amp;&amp; tabsList &amp;&amp; unref(tabsList).length === 1) { router.push('/home') } else { if (index !== unref(tabsList).length - 1) { router.push(unref(tabsList)[index + 1].path as RouteLocationRaw) } else { router.push(unref(tabsList)[index - 1].path as RouteLocationRaw) } } } handRemoveTab(route) } /* 实现部分 */ const handleSollPage = (direction: string) =&gt; { const tagsNode: Element[] = Array.from( document.querySelectorAll('.sliding-container&gt;span.el-tag') ) const windowNode = document.querySelector('.sliding-container') /* margin + border 宽度 */ const marginBorder = 6 const getTagsNodeWidht = (start: number, end: number): number =&gt; { let l = 0 for ( let i = start; i &lt;= end &amp;&amp; start &lt; tagsNode.length &amp;&amp; end &lt; tagsNode.length; i++ ) { const el = tagsNode[i] l = l + el.clientWidth + marginBorder } return l } const totaLength = getTagsNodeWidht(0, tagsNode.length - 1) if ('left' === direction) { for (let i = firstSubscript.value; i &lt; tagsNode.length; i++) { if ( windowNode &amp;&amp; getTagsNodeWidht(firstSubscript.value, i) &gt; windowNode.clientWidth ) { const _offsetX = offsetX.value - getTagsNodeWidht(firstSubscript.value, i - 1) if (Math.abs(totaLength) &gt; Math.abs(_offsetX)) { firstSubscript.value = i offsetX.value = -1 * getTagsNodeWidht(0, i - 1) } return false } } } if ('right' === direction) { for (let i = -1 + firstSubscript.value; i &gt;= 0; i--) { if ( windowNode &amp;&amp; getTagsNodeWidht(i, firstSubscript.value - 1) &gt; windowNode.clientWidth ) { const _offsetX = offsetX.value + getTagsNodeWidht(i, firstSubscript.value - 1) if (Math.abs(totaLength) &gt; Math.abs(_offsetX) &amp;&amp; _offsetX &lt;= 0) { firstSubscript.value = i offsetX.value = -1 * getTagsNodeWidht(0, i) } return false } else if ( windowNode &amp;&amp; getTagsNodeWidht(0, firstSubscript.value - 1) &lt;= windowNode.clientWidth ) { firstSubscript.value = 0 offsetX.value = 0 return false } } } } return { currentMenu, tabsList, offsetX, handleTo, handleClose, handleSollPage, } },})&lt;/script&gt;&lt;style lang=\"scss\" scoped&gt;.nav-container { display: flex; padding: 0.03rem 0.05rem; border-bottom: 1px solid #999; .indicate-btn { display: inline-block; width: 0.5rem; min-width: 0.3rem; line-height: 30px; text-align: center; cursor: pointer; border-radius: 2px; border: 1px solid rgb(211, 211, 211); &amp;:hover { background-color: rgba(0, 0, 0, 0.1); } } .sliding-window { position: relative; flex-grow: 1; overflow: hidden; .sliding-container { position: relative; display: flex; transition: transform 0.3s; } }}:deep(.el-tag) { cursor: pointer; margin: 0 2px;}&lt;/style&gt;作为储备库 待用 ~ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Vue","slug":"Vue","permalink":"https://www.thlg.ml/categories/Vue/"}],"tags":[{"name":"vue3","slug":"vue3","permalink":"https://www.thlg.ml/tags/vue3/"},{"name":"element-plus","slug":"element-plus","permalink":"https://www.thlg.ml/tags/element-plus/"},{"name":"tab切换","slug":"tab切换","permalink":"https://www.thlg.ml/tags/tab%E5%88%87%E6%8D%A2/"}]},{"title":"vue3实现立方体","slug":"vue3实现立方体","date":"2021-04-29T08:13:26.000Z","updated":"2021-04-29T08:28:35.604Z","comments":true,"path":"2021/04/29/vue3实现立方体/30610/","link":"","permalink":"https://www.thlg.ml/2021/04/29/vue3%E5%AE%9E%E7%8E%B0%E7%AB%8B%E6%96%B9%E4%BD%93/30610/","excerpt":"CSS 的强大是你想象不到的，最近做一个 vue3 的项目，正好写个组件来温故一下。使用 CSS 实现一个正方体也使用一下 vue3 新增的 css 变量。","text":"CSS 的强大是你想象不到的，最近做一个 vue3 的项目，正好写个组件来温故一下。使用 CSS 实现一个正方体也使用一下 vue3 新增的 css 变量。代码如下123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134&lt;template&gt; &lt;ul :class=\"['cube', { 'turn-on': spread }, { rotate: rotate }]\"&gt; &lt;template v-for=\"i in [1, 2, 3, 4, 5, 6]\" :key=\"i\"&gt; &lt;li class=\"surface\"&gt; &lt;slot :name=\"`surface${i}`\"&gt; {{ i }}&lt;/slot&gt; &lt;/li&gt; &lt;/template&gt; &lt;li&gt; &lt;slot&gt;&lt;/slot&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/template&gt;&lt;script lang=\"ts\"&gt; import { defineComponent } from 'vue' export default defineComponent({ name: 'Cube', props: { // 棱长 theLen: { type: String, default: '200px', }, // 鼠标悬浮偏移距离 offset: { type: String, default: '50px', }, //鼠标悬浮是否可以打开 spread: { type: Boolean, default: false, }, // 旋转动画 rotate: { type: Boolean, default: false, }, // 角度 angle: { type: String, default: '45deg', }, }, })&lt;/script&gt;&lt;style lang=\"scss\" scoped&gt; .cube { position: relative; list-style-type: none; width: v-bind(theLen); height: v-bind(theLen); transform: rotate3d(1, 1, 1, v-bind(angle)); transform-style: preserve-3d; &amp;.rotate { animation: rotate 10s infinite linear both; } &amp; &gt; li { position: absolute; top: 0; left: 0; width: v-bind(theLen); height: v-bind(theLen); &amp;.surface { border: 1px solid #000; } } &amp; &gt; .surface:nth-of-type(1) { transform: translateZ(calc(v-bind(theLen) / 2)); } &amp; &gt; .surface:nth-of-type(2) { transform: rotateY(90deg) translateZ(calc(v-bind(theLen) / 2)); } &amp; &gt; .surface:nth-of-type(3) { transform: rotateY(360deg) translateZ(calc(-1 * v-bind(theLen) / 2)); } &amp; &gt; .surface:nth-of-type(4) { transform: rotateY(90deg) translateZ(calc(-1 * v-bind(theLen) / 2)); } &amp; &gt; .surface:nth-of-type(5) { height: v-bind(theLen); transform: rotateX(-90deg) translateZ(calc(-1 * v-bind(theLen) / 2)); } &amp; &gt; .surface:nth-of-type(6) { height: v-bind(theLen); transform: rotateX(90deg) translateZ(calc(-1 * v-bind(theLen) / 2)); } &amp; &gt; li:nth-of-type(7) { display: flex; justify-content: center; align-items: center; border: 1px solid transparent; } &amp;.turn-on:hover &gt; .surface:nth-of-type(1) { transform: translateZ(calc(v-bind(offset) + v-bind(theLen) / 2)); } &amp;.turn-on:hover &gt; .surface:nth-of-type(2) { transform: rotateY(90deg) translateZ( calc(v-bind(offset) + v-bind(theLen) / 2) ); } &amp;.turn-on:hover &gt; .surface:nth-of-type(3) { transform: rotateY(360deg) translateZ( calc(-1 * v-bind(theLen) / 2 - v-bind(offset)) ); } &amp;.turn-on:hover &gt; .surface:nth-of-type(4) { transform: rotateY(90deg) translateZ( calc(-1 * v-bind(offset) - v-bind(theLen) / 2) ); } &amp;.turn-on:hover &gt; .surface:nth-of-type(5) { height: v-bind(theLen); transform: rotateX(90deg) translateZ( calc(-1 * v-bind(offset) - v-bind(theLen) / 2) ); } &amp;.turn-on:hover &gt; .surface:nth-of-type(6) { height: v-bind(theLen); transform: rotateX(-90deg) translateZ( calc(-1 * v-bind(offset) - v-bind(theLen) / 2) ); } } @keyframes rotate { from { transform: rotate3d(1, 1, 1, 0deg); } to { transform: rotate3d(1, 1, 1, 360deg); } }&lt;/style&gt; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Vue","slug":"Vue","permalink":"https://www.thlg.ml/categories/Vue/"}],"tags":[{"name":"vue3","slug":"vue3","permalink":"https://www.thlg.ml/tags/vue3/"},{"name":"css","slug":"css","permalink":"https://www.thlg.ml/tags/css/"}]},{"title":"echarts自适应方案","slug":"echarts自适应方案","date":"2021-04-21T06:16:34.000Z","updated":"2021-04-21T06:57:20.445Z","comments":true,"path":"2021/04/21/echarts自适应方案/36342/","link":"","permalink":"https://www.thlg.ml/2021/04/21/echarts%E8%87%AA%E9%80%82%E5%BA%94%E6%96%B9%E6%A1%88/36342/","excerpt":"在项目中使用了 vue-echarts 虽然提供了 autoresize 用来自适应 但有时侯我们的窗体根本不会改变大小，当我们打开侧边栏时，我们的 DOM 已经发生了大小变化，这个时候无法响应式的做出变化。在现在的开发环境中往往需要自适应，但 Echarts 恰恰要我们设置一个宽高，这是非常不方便的","text":"在项目中使用了 vue-echarts 虽然提供了 autoresize 用来自适应 但有时侯我们的窗体根本不会改变大小，当我们打开侧边栏时，我们的 DOM 已经发生了大小变化，这个时候无法响应式的做出变化。在现在的开发环境中往往需要自适应，但 Echarts 恰恰要我们设置一个宽高，这是非常不方便的我们要实现的需求自适应大小保持宽高比无需精确设置大小实现我们使用内边距来实现 宽高比例保持不变.通过监听 object 元素中 window 的 resize 事件来触发 echarts 的 resize 事件.这里使用的是 vue-echarts 所以还要改变 x-vue-echarts 的样式 才能使 echarts 得到确切的大小尺寸.12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667&lt;style lang=\"scss\"&gt; x-vue-echarts { position: absolute; top: 0; left: 0; right: 0; bottom: 0; } .filling-object-el { position: absolute; top: 0; left: 0; width: 100%; height: 100%; z-index: -9999; } .container { position: relative; width: 50%; &amp;::after { content: ''; display: block; width: 100%; /* 这里调节宽高比 可以使用媒体查询控制 */ padding-bottom: 100%; @media screen { /* ... */ } } }&lt;/style&gt;&lt;div class=\"container\"&gt; &lt;object data=\"about:blank\" class=\"filling-object-el\" ref=\"filling\" type=\"text/html\" &gt;&lt;/object&gt; &lt;v-chart :ref=\"chart\" /&gt;&lt;/div&gt;&lt;script&gt; // .... export default defineComponent({ setup: () =&gt; { // .... const charts = reactive&lt;ECharts[]&gt;([]) const chart = (el: ECharts) =&gt; { if (el) { charts.push(el) } } const filling = ref&lt;HTMLObjectElement | null&gt;(null) onMounted(() =&gt; { filling.value?.contentWindow?.addEventListener('resize', () =&gt; { charts.forEach((el) =&gt; { el.resize() }) }) }) return { chart } } })&lt;/script&gt; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Echarts","slug":"Echarts","permalink":"https://www.thlg.ml/categories/Echarts/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://www.thlg.ml/tags/vue/"},{"name":"echarts","slug":"echarts","permalink":"https://www.thlg.ml/tags/echarts/"},{"name":"vue-echarts","slug":"vue-echarts","permalink":"https://www.thlg.ml/tags/vue-echarts/"}]},{"title":"GET和POST的区别","slug":"GET和POST的区别","date":"2021-04-07T06:13:50.000Z","updated":"2021-04-07T07:05:28.527Z","comments":true,"path":"2021/04/07/GET和POST的区别/30689/","link":"","permalink":"https://www.thlg.ml/2021/04/07/GET%E5%92%8CPOST%E7%9A%84%E5%8C%BA%E5%88%AB/30689/","excerpt":"相信小伙伴在面试中常常遇到面试官问道 GET 和 POST 两种请求方式有什么区别，","text":"相信小伙伴在面试中常常遇到面试官问道 GET 和 POST 两种请求方式有什么区别，相信大家马上就能想到GET 请求可被缓存GET 请求保留在浏览器历史记录中GET 请求可被收藏为书签GET 请求不应在处理敏感数据时使用GET 请求有长度限制GET 请求只应当用于取回数据（不修改）POST 请求不会被缓存POST 请求不会保留在浏览器历史记录中POST 不能被收藏为书签POST 请求对数据长度没要求轻轻松松答出了一个满意的答案 （以上答案参考w3school）GET请求是否有主体 否成功的响应是否有主体 是安全 是幂等 是可缓存 是HTML 表单是否支持 是POST请求是否有主体 是成功的响应是否有主体 是安全 否幂等 否可缓存 Only if freshness information is - includedHTML 表单是否支持 是关于有人说GET不安全会暴露参数数据而POST安全等通过查阅http文档中定义的安全方法得知 GET 方法被定义为安全方法Safe MethodsRequest methods are considered “safe” if their defined semantics areessentially read-only; i.e., the client does not request, and doesnot expect, any state change on the origin server as a result ofapplying a safe method to a target resource. Likewise, reasonableuse of a safe method is not expected to cause any harm, loss ofproperty, or unusual burden on the origin server.This definition of safe methods does not prevent an implementationfrom including behavior that is potentially harmful, that is notentirely read-only, or that causes side effects while invoking a safemethod. What is important, however, is that the client did notrequest that additional behavior and cannot be held accountable forit. For example, most servers append request information to accesslog files at the completion of every response, regardless of themethod, and that is considered safe even though the log storage mightbecome full and crash the server. Likewise, a safe request initiatedby selecting an advertisement on the Web will often have the sideeffect of charging an advertising account.Of the request methods defined by this specification, the GET, HEAD,OPTIONS, and TRACE methods are defined to be safe.这里的安全是对服务器数据来说的，你通过GET 方法获取数据，无法对数据做出破坏行为，而POST则不会。但有时我们所表达的GET不安全其实说的是GET 的幂等 以及可留下浏览记录例：银行网站A，它以GET请求来完成银行转账的操作，如：https://www.xxx.com/Transfer.php?toBankId=11&amp;money=1000危险网站B，它里面有一段HTML的代码如下：1&lt; img src=https://www.xxx.com/Transfer.php?toBankId=11&amp;money=1000/&gt;首先，你登录了银行网站A，然后访问危险网站B，噢，这时你会发现你的银行账户少了1000块……例：登录某网站 https://xxx.com/login?user=admin&amp;password=admin当别人浏览你的历史记录时就可以知道你的账号密码 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"HTTP","slug":"HTTP","permalink":"https://www.thlg.ml/categories/HTTP/"}],"tags":[{"name":"面试","slug":"面试","permalink":"https://www.thlg.ml/tags/%E9%9D%A2%E8%AF%95/"}]},{"title":"那些你记不住的CSS","slug":"那些你记不住的CSS","date":"2021-04-05T08:02:39.000Z","updated":"2021-04-05T08:20:30.926Z","comments":true,"path":"2021/04/05/那些你记不住的CSS/24142/","link":"","permalink":"https://www.thlg.ml/2021/04/05/%E9%82%A3%E4%BA%9B%E4%BD%A0%E8%AE%B0%E4%B8%8D%E4%BD%8F%E7%9A%84CSS/24142/","excerpt":"一些常用的 CSS 片段","text":"一些常用的 CSS 片段清除浮动12345678910.clearfix::after { content: ''; display: block; width: 0; height: 0; clear: both; font-size: 0; visibility: hidden; overflow: hidden;}隐藏滚动条12345678910.hidder-scrollbar { /* 兼容IE10+ */ -ms-overflow-style: none; /* 兼容火狐 */ scrollbar-width: none;}.hidder-scrollbar::-webkit-scrollbar { /* 兼容Chrome */ display: none;}文字超出省略号123456789.omit { /* 自定义行数 */ display: -webkit-box; -webkit-line-clamp: 1; word-break: break-all; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis;}123456.omit { /* 单行 */ white-space: nowrap; overflow: hidden; text-overflow: ellipsis;} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"CSS","slug":"CSS","permalink":"https://www.thlg.ml/categories/CSS/"}],"tags":[{"name":"常用CSS","slug":"常用CSS","permalink":"https://www.thlg.ml/tags/%E5%B8%B8%E7%94%A8CSS/"}]},{"title":"Chrome无法打开网页","slug":"Chrome无法打开网页","date":"2021-04-02T01:51:49.000Z","updated":"2021-04-02T02:01:17.446Z","comments":true,"path":"2021/04/02/Chrome无法打开网页/17786/","link":"","permalink":"https://www.thlg.ml/2021/04/02/Chrome%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E7%BD%91%E9%A1%B5/17786/","excerpt":"今天突然 Chrome 打不开任何网页，而其他浏览器依旧可以打开，这种体验非常不好 ……","text":"今天突然 Chrome 打不开任何网页，而其他浏览器依旧可以打开，这种体验非常不好 ……首先当前环境如下没有使用代理电脑可以联网解决方案简单粗暴 重置网络1netsh winsock reset之后重启开机后，已经可以打开网页了 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Net","slug":"Net","permalink":"https://www.thlg.ml/categories/Net/"}],"tags":[{"name":"chrome","slug":"chrome","permalink":"https://www.thlg.ml/tags/chrome/"}]},{"title":"nginx反向代理apache2+HPH","slug":"nginx代理apache2-HPH","date":"2021-03-26T01:45:37.000Z","updated":"2021-04-08T02:29:34.438Z","comments":true,"path":"2021/03/26/nginx代理apache2-HPH/64100/","link":"","permalink":"https://www.thlg.ml/2021/03/26/nginx%E4%BB%A3%E7%90%86apache2-HPH/64100/","excerpt":"&gt; 背景：在公司部署项目的时候遇到端口冲突，原本服务器上跑着一个 php 项目使用的是 apache2 。&gt; 既然我使用nginx进行node反向代理，我也可以反向代理 apache2","text":"&gt; 背景：在公司部署项目的时候遇到端口冲突，原本服务器上跑着一个 php 项目使用的是 apache2 。&gt; 既然我使用nginx进行node反向代理，我也可以反向代理 apache2解除 443 端口占用修改 apache2 配置文件 /etc/apache2/ports.conf将端口修改123456789...&lt;IfModule ssl_module&gt; Listen 444&lt;/IfModule&gt;&lt;IfModule mod_gnutls.c&gt; Listen 444&lt;/IfModule&gt;...修改虚拟机配置文件 在 /etc/apache2/sites-enabled 下123...&lt;VirtualHost _default_:444&gt;...修改完成后 重启 apache21/etc/init.d/apache2 restart检查项目是否可以跑通 （加上端口号）设置 nginx 反向代理在 /etc/nginx/sites-available 目录下创建一个配置文件复制默认文件的内容进行修改12345678910111213141516...server { ... listen 443 ssl default_server; ssl_certificate /etc/nginx/cert/xxx.pem; ssl_certificate_key /etc/nginx/cert/xxx.key; server_name xxx.com; location / { ... proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_pass https://xxx.xxx.xxx.xx:444; index index.php index.html index.htm index.nginx-debian.html; }}...设置软连接1ln -s /etc/nginx/sites-available/xxx.conf /etc/nginx/sites-enabled/重启 nginx1nginx -s reload访问项目 查看是否反向代理成功 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Nginx","slug":"Nginx","permalink":"https://www.thlg.ml/categories/Nginx/"}],"tags":[{"name":"nginx 反向代理","slug":"nginx-反向代理","permalink":"https://www.thlg.ml/tags/nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"}]},{"title":"node之module","slug":"node之module","date":"2021-03-24T02:12:17.000Z","updated":"2021-03-25T01:30:58.516Z","comments":true,"path":"2021/03/24/node之module/17103/","link":"","permalink":"https://www.thlg.ml/2021/03/24/node%E4%B9%8Bmodule/17103/","excerpt":"在前端,在浏览器中运行的 js 是没有模块的概念的,但如果把 js 放在服务器上运行,若只是简单的代码还好说,如果在大型项目中就会显得非常复杂加难以迭代维护,所以 node 引入了模块的概念。那模块是如何实现互不影响,各自分离的呢?","text":"在前端,在浏览器中运行的 js 是没有模块的概念的,但如果把 js 放在服务器上运行,若只是简单的代码还好说,如果在大型项目中就会显得非常复杂加难以迭代维护,所以 node 引入了模块的概念。那模块是如何实现互不影响,各自分离的呢?我们知道在 js 中想要实现代码之间的互不影响,可以使用函数来加以分隔,使函数内部的变量待在自己的作用域范围内.那 node 是不是这样实现的呢?问题来了,如何验证是在函数内部?在函数中有个特殊的变量 arguments新建 index.js1234567891011121314151617181920212223242526272829303132333435363738394041424344console.log(arguments)// {// '0': {},// '1': [Function: require] {// resolve: [Function: resolve] { paths: [Function: paths] },// main: Module {// id: '.',// path: 'c:\\\\Users\\\\Administrator\\\\Desktop\\\\node',// exports: {},// parent: null,// filename: 'c:\\\\Users\\\\Administrator\\\\Desktop\\\\node\\\\index.js',// loaded: false,// children: [],// paths: [Array]// },// extensions: [Object: null prototype] {// '.js': [Function],// '.json': [Function],// '.node': [Function]// },// cache: [Object: null prototype] {// 'c:\\\\Users\\\\Administrator\\\\Desktop\\\\node\\\\index.js': [Module]// }// },// '2': Module {// id: '.',// path: 'c:\\\\Users\\\\Administrator\\\\Desktop\\\\node',// exports: {},// parent: null,// filename: 'c:\\\\Users\\\\Administrator\\\\Desktop\\\\node\\\\index.js',// loaded: false,// children: [],// paths: [// 'c:\\\\Users\\\\Administrator\\\\Desktop\\\\node\\\\node_modules',// 'c:\\\\Users\\\\Administrator\\\\Desktop\\\\node_modules',// 'c:\\\\Users\\\\Administrator\\\\node_modules',// 'c:\\\\Users\\\\node_modules',// 'c:\\\\node_modules'// ]// },// '3': 'c:\\\\Users\\\\Administrator\\\\Desktop\\\\node\\\\index.js',// '4': 'c:\\\\Users\\\\Administrator\\\\Desktop\\\\node'// }现在可以知道确实是在函数内部,但这个函数是什么样子呢？使用 arguments 对象的 callee 属性12345console.log(arguments.callee)// function (exports, require, module, __filename, __dirname) {// console.log(arguments.callee.toString())// }可以看到常用的 exports, require, module, *filename, *dirname 是以参数形式传进来的那么 exports 和 module.exports 有什么区别呢?12console.log(exports === module.exports)// true即它们指向同一个对象所有我们在操作 exports 时 只能通过属性来赋值。而 module.exports 却可以赋值一个对象个人理解,如有失误,请指正 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Node","slug":"Node","permalink":"https://www.thlg.ml/categories/Node/"}],"tags":[{"name":"node","slug":"node","permalink":"https://www.thlg.ml/tags/node/"},{"name":"moule","slug":"moule","permalink":"https://www.thlg.ml/tags/moule/"}]},{"title":"Linux笔记","slug":"Linux笔记","date":"2021-03-22T03:01:16.000Z","updated":"2021-03-26T01:46:43.782Z","comments":true,"path":"2021/03/22/Linux笔记/24884/","link":"","permalink":"https://www.thlg.ml/2021/03/22/Linux%E7%AC%94%E8%AE%B0/24884/","excerpt":"linux 入门笔记 记录操作过程","text":"linux 入门笔记 记录操作过程安装 node下载安装包Node 官网下载地址1wegt https://nodejs.org/dist/v14.16.0/node-v14.16.0-linux-x64.tar.xz或者把安装包下载到本地 再上传到服务器解压安装包1tar -xvf node-v14.16.0-linux-x64.tar.xz重命名安装目录将解压文件移动到你想要安装的文件夹下1mv node-v14.16.0-linux-x64/ /usr/local/node配置环境变量此处为解压文件 node 的 bin 文件夹路径1echo \"export PATH=$PATH:/usr/local/node/bin\" &gt;&gt; /etc/profile使环境变量生效1source /etc/profile检查安装结果12node -vnpm -v未完 …… document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"linux","slug":"linux","permalink":"https://www.thlg.ml/categories/linux/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://www.thlg.ml/tags/%E7%AC%94%E8%AE%B0/"},{"name":"linux","slug":"linux","permalink":"https://www.thlg.ml/tags/linux/"}]},{"title":"pm2命令","slug":"pm2命令","date":"2021-03-20T05:59:07.000Z","updated":"2021-03-24T01:08:34.407Z","comments":true,"path":"2021/03/20/pm2命令/18509/","link":"","permalink":"https://www.thlg.ml/2021/03/20/pm2%E5%91%BD%E4%BB%A4/18509/","excerpt":"pm2 命令 速查","text":"pm2 命令 速查用法:pm2 [cmd] app选项:-V, --version 输出版本号 -v --version 打印PM2版本 -s --silent 隐藏所有消息 --ext &lt;extensions&gt; 仅监视此文件扩展 -n --name &lt;name&gt; 在进程列表中设置一个名称 -m --mini-list 显示无格式化的压缩列表 --interpreter &lt;interpreter&gt; 设置用于执行应用程序的特定解释器，默认为：node --interpreter-args &lt;arguments&gt; 设置传递给解释器的参数（--node-args的别名） --node-args &lt;node_args&gt; 要传递给节点的空间分隔的参数 -o --output &lt;path&gt; 为stdout指定日志文件 -e --error &lt;path&gt; 为stderr指定日志文件 -l --log [path] 指定记录文件，该文件会收集stdout和stderr --filter-env [envs] 过滤掉输出包含提供字符串的全局值(默认: )--log-type &lt;type&gt; 指定日志输出样式（默认情况下，JSON可选） --log-date-format &lt;date format&gt; 将自定义前缀时间戳添加到日志 --time 启用时间日志记录 --disable-logs 禁用所有日志存储 --env &lt;environment_name&gt; 指定必须注入生态系统文件的哪些环境变量 -a --update-env 使用重新启动/重新加载更新环境 (-A &lt;=&gt; Apply) -f --force 强迫行动 -i --instances &lt;number&gt; 启动[编号]实例（对于网络应用程序）（负载平衡） --parallel &lt;number&gt; 并行操作的数量（用于重启/重新加载） --shutdown-with-message 使用process.send（'shutdown'）而不是process.kill（pid，sigint）的应用程序 -p --pid &lt;pid&gt; 指定PID文件 -k --kill-timeout &lt;delay&gt; 在发送最终的Sigkill信号之前延迟到过程 --listen-timeout &lt;delay&gt; 聆听应用程序重新加载时的超时 --max-memory-restart &lt;memory&gt; 如果超出了存储量（以字节为单位），则重新启动应用程序 --restart-delay &lt;delay&gt; 在重新启动之间指定延迟（以毫秒为单位） --exp-backoff-restart-delay &lt;delay&gt; 在重新启动之间指定延迟（以毫秒为单位） -x --execute-command 使用Fork系统执行程序 --max-restarts [count] 只重新启动脚本计数时间 -u --user &lt;username&gt; 生成启动脚本时定义用户 --uid &lt;uid&gt; 使用&lt;uid&gt;权限运行目标脚本 --gid &lt;gid&gt; 使用&lt;gid&gt;权限运行目标脚本 --namespace &lt;ns&gt; 在指定的命名空间中启动应用程序 --cwd &lt;path&gt; 从路径&lt;cwd&gt;运行目标脚本 --hp &lt;home path&gt; 生成启动脚本时定义主路径 --wait-ip 覆盖Systemd脚本等待完全互联网连接启动PM2 --service-name &lt;name&gt; 生成启动脚本时定义服务名称 -c --cron &lt;cron_pattern&gt; 基于Cron模式重新启动运行过程 -c --cron-restart &lt;cron_pattern&gt; （别名）根据Cron模式重新启动运行进程 -w --write 在本地文件夹中写入配置 --no-daemon 如果它不存在，请在前台运行PM2守护程序 --source-map-support 强制源地图支持 --only &lt;application-name&gt; 使用JSON声明，允许仅在一个应用程序上行动 --disable-source-map-support 强制源地图支持 --wait-ready 询问PM2等待您的应用程序的准备好事件 --merge-logs 合并来自不同实例的日志，但保持错误和分开 --watch [paths] 监视更改的应用程序文件夹(默认值:) --ignore-watch &lt;folders|files&gt; 忽略（名称或正则表达式）的路径列表 --watch-delay &lt;delay&gt; 更改文件后指定重启延迟 (--watch-delay 4 (in sec) or 4000ms) --no-color 跳过颜色 --no-vizion 启动不带Vizion功能的应用程序（版本控制控制） --no-autorestart 在没有自动重启的情况下启动应用程序 --no-treekill 只杀死主要过程，而不是独立的孩子 --no-pmx 在没有PMX的情况下启动一个应用程序 --no-automation 在没有PMX的情况下启动一个应用程序 --trace 启用与KM的交易跟踪 --disable-trace 用KM禁用交易跟踪 --sort &lt;field_name:sort&gt; 根据字段的名称排序过程 --attach 启动/重启/停止/重新加载后附加日志记录 --v8 启用V8数据收集 --event-loop-inspector 在PMX中启用事件循环检查器转储 --deep-monitoring 启用所有监控工具(equivalent to --v8 --event-loop-inspector --trace) -h, --help 输出使用信息命令:start [options] [name|namespace|file|ecosystem|id...] 启动和守护到应用程序 trigger &lt;id|proc_name|namespace|all&gt; &lt;action_name&gt; [params] 触发过程动作 deploy &lt;file|environment&gt; 部署您的JSON. startOrRestart &lt;json&gt; 启动或重新启动JSON文件 startOrReload &lt;json&gt; 开始或优雅地重新加载JSON文件 pid [app_name] 返回[app_name]或全部的pid create 返回[app_name]或全部的pid startOrGracefulReload &lt;json&gt; 开始或优雅地重新加载JSON文件 stop [options] &lt;id|name|namespace|all|json|stdin...&gt; 停止一个过程 restart [options] &lt;id|name|namespace|all|json|stdin...&gt; 重新启动一个过程 scale &lt;app_name&gt; &lt;number&gt; 取决于Total_Numbe的群集模式中的过程上/下降r param profile:mem [time] 样本PM2堆内存 profile:cpu [time] 个人资料PM2 CPU. reload &lt;id|name|namespace|all&gt; 重新加载流程（请注意其用于应用http / https的应用程序） id &lt;name&gt; 按名称获取进程ID inspect &lt;name&gt; 检查一个过程 delete|del &lt;name|id|namespace|script|all|json|stdin...&gt; 停止并删除PM2进程列表的进程 sendSignal &lt;signal&gt; &lt;pm2_id|name&gt; 向目标过程发送系统信号 ping ping pm2守护进程 - 如果不是，它将推出它 updatePM2 使用本地PM2更新内存中PM2 update (别名)使用本地PM2更新内存中PM2 install|module:install [options] &lt;module|git:/&gt; 安装或更新模块并永久运行它 module:update &lt;module|git:/&gt; 更新模块并永久运行它 module:generate [app_name] 在当前文件夹中生成示例模块 uninstall|module:uninstall &lt;module&gt; 停止并卸载模块 package [target] 检查和包焦油类型模块 publish|module:publish [options] [folder] 发布您目前的模块 set [key] [value] 设置指定的Config &lt;key&gt; &lt;value&gt; multiset &lt;value&gt; Multiset Eg例如“key1 Val1键2 Val2 get [key] 获取&lt;key&gt;的值 conf [key] [value] 获取/设置模块配置值 config &lt;key&gt; [value] 获取/设置模块配置值 unset &lt;key&gt; 清除指定的Config &lt;key&gt; report 为https://github.com/unitech/pm2/issues提供完整的PM2报告 link [options] [secret] [public] [name] 链接PM2监控仪表板 unlink 与PM2监控仪表板取消链接 monitor [name] 监控目标过程 unmonitor [name] 未解释目标过程 open 打开PM2监控仪表板 plus|register [options] [command] [option] 启用PM2 Plus login 登录PM2 Plus Logout logout 从PM2 Plus退出 dump|save [options] 转储稍后将其复活的所有流程 cleardump 创建空转储文件 send &lt;pm_id&gt; &lt;line&gt; 将 stdin 发送到&lt;pm_id&gt; attach &lt;pm_id&gt; [comman] 将 stdin / stdout 附加到由&lt;pm_id&gt;标识的应用程序 resurrect 复活以前倾倒的流程 unstartup [platform] 禁用PM2启动钩子 startup [platform] 启用PM2启动挂钩 logrotate 复制默认的Logotate配置 ecosystem|init [mode] 生成流程conf文件。 （mode = null或简单） reset &lt;name|id|all&gt; 重置过程的计数器 describe &lt;name|id&gt; 描述一个过程的所有参数 desc &lt;name|id&gt; (别名)描述一个过程的所有参数 info &lt;name|id&gt; (别名)描述一个过程的所有参数 show &lt;name|id&gt; (别名)描述一个过程的所有参数 env &lt;id&gt; 列出进程ID的所有环境变量 list|ls 列出所有进程 l (别名)列出所有进程 ps (别名)列出所有进程 status (别名)列出所有进程 jlist 列出JSON格式的所有进程 sysmonit 启动系统监控守护程序 slist|sysinfos [options] 列出JSON中的系统信息 prettylist 打印json在一个接驳的json中 monit 启动终端监测 imonit 启动遗留终端监测 dashboard|dash 使用监控和日志启动仪表板 flush [api] 冲洗日志Github Pm2 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"备忘录","slug":"备忘录","permalink":"https://www.thlg.ml/categories/%E5%A4%87%E5%BF%98%E5%BD%95/"}],"tags":[{"name":"pm2","slug":"pm2","permalink":"https://www.thlg.ml/tags/pm2/"},{"name":"守护进程","slug":"守护进程","permalink":"https://www.thlg.ml/tags/%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/"}]},{"title":"Git常用命令","slug":"Git常用命令","date":"2021-03-08T07:14:57.000Z","updated":"2021-03-08T07:21:38.259Z","comments":true,"path":"2021/03/08/Git常用命令/7065/","link":"","permalink":"https://www.thlg.ml/2021/03/08/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/7065/","excerpt":"Git 常用命令 (备忘)","text":"Git 常用命令 (备忘)分支命名规范master 主分支主分支，永远是可用的、稳定的、可直接发布的版本，不能直接在该分支上开发develop 开发分支开发主分支，代码永远是最新，所有新功能以这个分支来创建自己的开发分支，该分支只做只合并操作，不能直接在该分支上开发feature-xxx功能开发分支，在develop上创建分支，以自己开发功能模块命名，功能测试正常后合并到develop分支release预发布分支，在合并好feature分支的develop分支上创建，主要是用来提测的分支，修改好bug并确定稳定之后合并到develop和master分支，然后发布master分支release-fix功能bug修复分支，在release上创建分支修复，修复好提测的bug之后合并回release分支hotfix-xxx紧急bug修改分支，项目上线之后可以会遇到一些环境问题需要紧急修复，在对应版本的 release 分支上创建，流程跟release分支相似，修复完成后合并release分支，根据情况判断需不需要再合并到develop和master分支Git 命令git init初始化本地git仓库（创建新仓库）git config –global user.name “xxx”配置用户名git config –global user.email “xxx@xxx.com“配置邮件git config –global color.ui truegit status等命令自动着色git config –global color.status autogit config –global color.diff autogit config –global color.branch autogit config –global color.interactive autogit config –global –unset http.proxy删除git上的代理配置git clone git+ssh://git@192.168.53.168/VT.git克隆远程仓库git status查看当前版本状态（是否修改）git add xyz添加xyz文件至indexgit add .增加当前子目录下所有更改过的文件至indexgit commit -m ‘xxx’提交git commit –amend -m ‘xxx’合并上一次提交（用于反复修改）git commit -am ‘xxx’将add和commit合为一步git rm xxx删除index中的文件git rm -r递归删除git log显示提交日志git log -1显示1行日志 -n为n行git log -5git log –stat显示提交日志及相关变动文件git log -p -mgit show dfb02e6e4f2f7b573337763e5c0013802e392818显示某个提交的详细内容git show dfb02可只用commitid的前几位git show HEAD显示HEAD提交日志git show HEAD^显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本git tag显示已存在的taggit tag -a v2.0 -m ‘xxx’增加v2.0的taggit show v2.0显示v2.0的日志及详细内容git log v2.0显示v2.0的日志git diff显示所有未添加至index的变更git diff –cached显示所有已添加index但还未commit的变更git diff HEAD^比较与上一个版本的差异git diff HEAD – ./lib比较与HEAD版本lib目录的差异git diff origin/master..master比较远程分支master上有本地分支master上没有的git diff origin/master..master –stat只显示差异的文件，不显示具体内容git remote add origin git+ssh://git@192.168.53.168/VT.git增加远程定义（用于push/pull/fetch）git branch显示本地分支git branch –contains 50089显示包含提交50089的分支git branch -a显示所有分支git branch -r显示所有原创分支git branch –merged显示所有已合并到当前分支的分支git branch –no-merged显示所有未合并到当前分支的分支git branch -m master master_copy本地分支改名git checkout -b master_copy从当前分支创建新分支 master _copy 并检出git checkout -b master master_copy上面的完整版git checkout features/performance检出已存在的features/performance分支git checkout –track hotfixes/BJVEP933检出远程分支hotfixes/BJVEP933并创建本地跟踪分支git checkout v2.0检出版本v2.0git checkout -b devel origin/develop从远程分支develop创建新本地分支devel并检出git checkout – README检出head版本的README文件（可用于修改错误回退）git merge origin/master合并远程master分支至当前分支git cherry-pick ff44785404a8e合并提交ff44785404a8e的修改git push origin master将当前分支push到远程master分支git push origin :hotfixes/BJVEP933删除远程仓库的hotfixes/BJVEP933分支git push –tags把所有tag推送到远程仓库git fetch获取所有远程分支（不更新本地分支，另需merge）git fetch –prune获取所有原创分支并清除服务器上已删掉的分支git pull origin master获取远程分支master并merge到当前分支git mv README README2重命名文件README为README2git reset –hard HEAD将当前版本重置为HEAD（通常用于merge失败回退）git rebasegit branch -d hotfixes/BJVEP933删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）git branch -D hotfixes/BJVEP933强制删除分支hotfixes/BJVEP933git ls-files列出git index包含的文件git show-branch图示当前分支历史git show-branch –all图示所有分支历史git whatchanged显示提交历史对应的文件修改git revert dfb02e6e4f2f7b573337763e5c0013802e392818撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818git ls-tree HEAD内部命令：显示某个git对象git rev-parse v2.0内部命令：显示某个ref对于的SHA1 HASHgit reflog显示所有提交，包括孤立节点git show HEAD@{5}git show master@{yesterday}显示master分支昨天的状态git log –pretty=format:’%h %s’ –graph图示提交日志git show HEAD~3git show -s –pretty=raw 2be7fcb476git stash暂存当前修改，将所有至为HEAD状态git stash list查看所有暂存git stash show -p stash@{0}参考第一次暂存git stash apply stash@{0}应用第一次暂存git grep “delete from”文件中搜索文本“delete from”git grep -e ‘ define’ –and -e SORT_DIRENTgit gcgit fsck常用命令创建分支1git branch ***切换分支1git checkout ***查看远程分支1git branch -r查看本地分支1git branch查看本地和远程分支1git branch -a删除远程分支12git push origin --delete ***git push origin -d ***参考:https://gist.github.com/guweigang/9848271参考:https://www.jianshu.com/p/d0d3e5d1813a document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"备忘录","slug":"备忘录","permalink":"https://www.thlg.ml/categories/%E5%A4%87%E5%BF%98%E5%BD%95/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://www.thlg.ml/tags/Git/"}]},{"title":"Shopify公共应用开发(2)","slug":"Shopify公共应用开发-2","date":"2021-03-06T06:37:58.000Z","updated":"2021-03-06T07:28:24.498Z","comments":true,"path":"2021/03/06/Shopify公共应用开发-2/16015/","link":"","permalink":"https://www.thlg.ml/2021/03/06/Shopify%E5%85%AC%E5%85%B1%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91-2/16015/","excerpt":"接着上次的项目，我们这次把项目安装到 Shopify 商店。首先,我们要有个开发者账号,来这里 注册。","text":"接着上次的项目，我们这次把项目安装到 Shopify 商店。首先,我们要有个开发者账号,来这里 注册。创建公共应用我们创建一个公共应用,这时，我们会得到 client_id client_secret ,然后设置应用的 url 以及 重定向 url有条件的可以进行穿透 ,也可以填写本地地址 (https://127.0.0.1:3000/)OAuth 身份验证回到项目中 ,创建路由 安装路由 (/install) 和认证路由 (/auth/callback)/install获得安装商店 xxx.myshopify.com该应用需要的权限该应用的 client_id重定向 URl设置一个随机数重定向到1`https://${shop}/admin/oauth/authorize?client_id=${client_id}&amp;scope=${scopes}&amp;redirect_uri=${HOST}/auth/callback&amp;state=${nonce}`/auth/callback获取参数 code, hmac, shop, state, timestamp判断 state 与我们设置的随机数一样并且验证 hmac通过 code 获取访问令牌123456789let res = await fetch(`https://${shop}/admin/oauth/access_token`, { method: 'POST', body: JSON.stringify({ client_id: CLIENT_ID, client_secret: CLIENT_SECRET, code: code, }), headers: { 'Content-Type': 'application/json' },})保存 access_token设置 token (JWT认证)进入应用(重定向)认证流程编写应用功能代码……. document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Shopify","slug":"Shopify","permalink":"https://www.thlg.ml/categories/Shopify/"}],"tags":[{"name":"Shopify 插件","slug":"Shopify-插件","permalink":"https://www.thlg.ml/tags/Shopify-%E6%8F%92%E4%BB%B6/"},{"name":"Shopify 公共应用","slug":"Shopify-公共应用","permalink":"https://www.thlg.ml/tags/Shopify-%E5%85%AC%E5%85%B1%E5%BA%94%E7%94%A8/"}]},{"title":"yarn npm常用命令","slug":"yarn npm常用命令","date":"2021-03-05T05:30:01.000Z","updated":"2021-03-08T06:57:58.648Z","comments":true,"path":"2021/03/05/yarn npm常用命令/46610/","link":"","permalink":"https://www.thlg.ml/2021/03/05/yarn%20npm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/46610/","excerpt":"yarn npm 常用命令 (备忘&amp;速查)","text":"yarn npm 常用命令 (备忘&amp;速查)yarnnpm安装npm install –global yarn检查版本yarn –versionnpm -v新建项目yarn initnpm init添加依赖项yarn add [package]npm install [package]yarn add [package]@[version]npm install [package]@[version]yarn add [package]@[tag]npm install [package]@[tag]将依赖项添加到不同类别的依赖项中devDependenciesyarn add [package] –devnpm install [package] -DpeerDependenciesyarn add [package] –peeroptionalDependenciesyarn add [package] –optionalnpm install [package] -O升级依赖yarn upgrade [package]npm update [package]删除依赖yarn remove [package]npm uninstall [package]搜索依赖npm search [package]安装项目的所有依赖项yarnnpm i document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"备忘录","slug":"备忘录","permalink":"https://www.thlg.ml/categories/%E5%A4%87%E5%BF%98%E5%BD%95/"}],"tags":[{"name":"yarn","slug":"yarn","permalink":"https://www.thlg.ml/tags/yarn/"},{"name":"npm","slug":"npm","permalink":"https://www.thlg.ml/tags/npm/"}]},{"title":"Shopify 公共应用开发(1)","slug":"Shopify公共应用开发(1)","date":"2021-03-04T06:15:58.000Z","updated":"2021-03-04T07:07:00.024Z","comments":true,"path":"2021/03/04/Shopify公共应用开发(1)/23291/","link":"","permalink":"https://www.thlg.ml/2021/03/04/Shopify%E5%85%AC%E5%85%B1%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91(1)/23291/","excerpt":"目前,我正在开发一款 Shopify 公共应用 。其主要功能是个性化产品,并可以使用户试试预览。说实话第一次开发这种项目,感觉头大啊啊啊啊啊啊啊…文档全英文,虽有中文版,但删减的太过厉害。于是我去搜索这方面的博客、文章,无奈，关于这方面的文章太少,只好硬着头皮去爬文档。一把心酸一把泪啊 😭😭😭😭😭","text":"目前,我正在开发一款 Shopify 公共应用 。其主要功能是个性化产品,并可以使用户试试预览。说实话第一次开发这种项目,感觉头大啊啊啊啊啊啊啊…文档全英文,虽有中文版,但删减的太过厉害。于是我去搜索这方面的博客、文章,无奈，关于这方面的文章太少,只好硬着头皮去爬文档。一把心酸一把泪啊 😭😭😭😭😭跟着文档走官方文档步骤文档介绍的是 Next.js + React 搭建的服务端渲染下面我使用 Koa + Vue 搭建前后端分离开发构建框架创建 Koa 项目,创建一个项目文件夹 myapp1cd myapp初始化 package.json1npm init -y安装 koa 以及各项依赖1npm i koa koa-views koa-static koa-router koa-session koa-body isomorphic-fetch -S安装 nodemon 用于开发中热更新1npm i nodemon -D创建 启动文件 app.js1234567891011const Koa = require('koa')const koaStatic = require('koa-static')const path = require('path')const koaViews = require('koa-views')const app = new Koa()app.use(session({ sameSite: 'none', secure: true }, app))app.use(koaViews(path.join(__dirname, './src/view'), { extension: 'html' }))app.listen(port, () =&gt; { console.log('&gt; http://127.0.0.1:%d', port)})创建 src 文件夹 , 在 src 下面创建 view 文件夹在 view 文件夹下新建 index.html 文件123456789101112&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\" /&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt; &lt;title&gt;App install&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;App install&lt;/h1&gt; &lt;/body&gt;&lt;/html&gt;创建 route 文件夹 新建 index.js1234567const router = require('koa-router')()router.get('/index', async (ctx, next) =&gt; { ctx.type = 'html' await ctx.render('index')})module.exports = router在 package.json 添加123456// ... \"scripts\": { \"start\": \"nodemon app\", // ... } // ...启动项目1npm run start到此 我们的项目已经可以运行了, 但是 怎么和Shopify商店联系起来呢?😜😜😜(来看下一篇) document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Shopify","slug":"Shopify","permalink":"https://www.thlg.ml/categories/Shopify/"}],"tags":[{"name":"Shopify 插件","slug":"Shopify-插件","permalink":"https://www.thlg.ml/tags/Shopify-%E6%8F%92%E4%BB%B6/"},{"name":"Shopify 公共应用","slug":"Shopify-公共应用","permalink":"https://www.thlg.ml/tags/Shopify-%E5%85%AC%E5%85%B1%E5%BA%94%E7%94%A8/"}]},{"title":"Fie对象 Image对象 base64 canvas对象 相互转换","slug":"Fie对象Image对象base64canvas对象相互转换","date":"2021-03-01T07:04:06.000Z","updated":"2021-03-01T07:22:33.636Z","comments":true,"path":"2021/03/01/Fie对象Image对象base64canvas对象相互转换/23442/","link":"","permalink":"https://www.thlg.ml/2021/03/01/Fie%E5%AF%B9%E8%B1%A1Image%E5%AF%B9%E8%B1%A1base64canvas%E5%AF%B9%E8%B1%A1%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/23442/","excerpt":"在前端操作过程中，上传文件，图片是不可避免的，但有时候用户在前端页面操作完再上传，我们并没有文件对象，一般我们拿到的是 canvas image 等，有时候还可能是 base64 编码，这时我们该怎么上传文件呢？我们先来理清楚一个关系123url/base64 → Image → canvas → base64 → File → base64 → File → base64","text":"在前端操作过程中，上传文件，图片是不可避免的，但有时候用户在前端页面操作完再上传，我们并没有文件对象，一般我们拿到的是 canvas image 等，有时候还可能是 base64 编码，这时我们该怎么上传文件呢？我们先来理清楚一个关系123url/base64 → Image → canvas → base64 → File → base64 → File → base64编码实现123456789101112function urlToImgAsync(url) { const img = new Image() img.src = url return new Promise((resolve, reject) =&gt; { img.onload = function (e) { resolve(img) } img.onerror = function (e) { reject(e) } })}1234567891011function imgToCanvas(img) { if (img instanceof Image) { const canvas = document.createElement('canvas') const cxt = canvas.getContext('2d') cxt.width = img.width cxt.heigth = img.heigth cxt.drawImage(img, 0, 0, cxt.width, cxt.heigth) return canvas } throw new TypeError(`${Object.prototype.toString.call(img)} not a image`)}123456function canvasToData(canvas) { if (canvas instanceof HTMLCanvasElement) { return canvas.toDataURL() } throw new TypeError(`${Object.prototype.toString.call(canvas)} not a canvas`)}123456789101112function dataToFile(data, file = 'file') { let arr = data.split(',') let mime = arr[0].match(/:(.*?);/)[1] let suffix = mime.split('/')[1] let bstr = atob(arr[1]) let n = bstr.length let u8arr = new Uint8Array(n) while (n--) { u8arr[n] = bstr.charCodeAt(n) } return new File([u8arr], `${file}.${suffix}`, { type: mime })}123456789101112131415161718function fileToUrlAsync(file) { console.log(file) if (file instanceof File) { const reader = new FileReader() reader.readAsDataURL(file) return new Promise((resolve, reject) =&gt; { reader.onloadend = function (e) { console.log(e) resolve(e.target.result) } reader.onerror = function (e) { console.log(e) reject(e) } }) } throw new TypeError(`${Object.prototype.toString.call(file)} not a file`)}任意组合示例:12345urlToData(URL).then(res =&gt; { fileToData(dataToFile(res)).then(res =&gt; { console.log(res) })}) document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"JS","slug":"JS","permalink":"https://www.thlg.ml/categories/JS/"}],"tags":[{"name":"文件转换","slug":"文件转换","permalink":"https://www.thlg.ml/tags/%E6%96%87%E4%BB%B6%E8%BD%AC%E6%8D%A2/"}]},{"title":"Koa跨域解决方案","slug":"Koa跨域解决方案","date":"2021-02-27T11:16:31.000Z","updated":"2021-04-11T03:18:05.991Z","comments":true,"path":"2021/02/27/Koa跨域解决方案/57978/","link":"","permalink":"https://www.thlg.ml/2021/02/27/Koa%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/57978/","excerpt":"在开发插件的过程中遇到了接口请求不同,显示跨域错误。场景：我在本地开发启动了三个项目,插件部分请求服务器端出现跨域,我的服务器端是用 Koa 框架开发的。","text":"在开发插件的过程中遇到了接口请求不同,显示跨域错误。场景：我在本地开发启动了三个项目,插件部分请求服务器端出现跨域,我的服务器端是用 Koa 框架开发的。简单粗暴解决跨域自己写一个中间件来判断哪些路由需要跨域12345678910module.exports = function () { return async function (ctx, next) { // Allow cross-domain whitelist console.log(ctx.request.url) if (/^\\/plug-in\\/|^\\/expose-api\\//.test(ctx.request.url)) { // Allow requests for all domains ctx.set('Access-Control-Allow-Origin', '*') } await next() }安装 中间件1npm i koa2-cors -S使用123456const cors=require(\"koa2-cors\")//...app.use(cors())//...koa2-cors Github document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Koa","slug":"Koa","permalink":"https://www.thlg.ml/categories/Koa/"}],"tags":[{"name":"跨域","slug":"跨域","permalink":"https://www.thlg.ml/tags/%E8%B7%A8%E5%9F%9F/"}]},{"title":"手动实现reduce函数","slug":"手动实现reduce函数","date":"2021-02-25T02:31:51.000Z","updated":"2021-02-25T06:53:12.049Z","comments":true,"path":"2021/02/25/手动实现reduce函数/14755/","link":"","permalink":"https://www.thlg.ml/2021/02/25/%E6%89%8B%E5%8A%A8%E5%AE%9E%E7%8E%B0reduce%E5%87%BD%E6%95%B0/14755/","excerpt":"reduce 函数 可以自动将数组求和,但它内部是如何实现的呢? 今天我们来自己实现一个 reduce 函数","text":"reduce 函数 可以自动将数组求和,但它内部是如何实现的呢? 今天我们来自己实现一个 reduce 函数reducer 作用数组求和12345let arr = [1, 2, 3, 4]arr.reduce((count, num) =&gt; { return count + num})// 10数组求乘积12345let arr = [1, 2, 3, 4]arr.reduce((count, num) =&gt; { return count * num})// 24数组求最大（小）值123456789let arr = [1, 2, 3, 4]arr.reduce((count, num) =&gt; { return count &gt; num ? count : num})// 4arr.reduce((count, num) =&gt; { return count &lt; num ? count : num})// 1当然 还有其他的使用方法编码实现1234567891011Array.prototype.myreduce = function (backcall, grandTotal = 0) { if (typeof backcall !== 'function') { throw new TypeError( `${Object.prototype.toString.call(backcall)} is not a function` ) } for (let index = 0; index &lt; this.length; index++) { grandTotal = backcall(grandTotal, this[index], index, this) } return grandTotal} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"JS","slug":"JS","permalink":"https://www.thlg.ml/categories/JS/"}],"tags":[{"name":"reduce 函数","slug":"reduce-函数","permalink":"https://www.thlg.ml/tags/reduce-%E5%87%BD%E6%95%B0/"}]},{"title":"Nginx服务器实操","slug":"Nginx服务器实操","date":"2021-02-23T02:42:47.000Z","updated":"2021-02-23T03:34:54.420Z","comments":true,"path":"2021/02/23/Nginx服务器实操/35107/","link":"","permalink":"https://www.thlg.ml/2021/02/23/Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E6%93%8D/35107/","excerpt":"Nginx是非同步框架的網頁伺服器，也可以用作反向代理、負載平衡器和HTTP快取。总之 Nginx 非常🐮","text":"Nginx是非同步框架的網頁伺服器，也可以用作反向代理、負載平衡器和HTTP快取。总之 Nginx 非常🐮Nginx安装首先在官网(http://nginx.org/)[http://nginx.org/] 下载压缩包,解压到文件夹即可启动Nginx在文件夹下打开控制台 执行命令 (千万不要启动 nginx.exe! 千万不要启动 nginx.exe! 千万不要启动 nginx.exe!)1nginx打开 (http://localhost)[http://localhost],如果可以看到 Welcome to nginx! 说明安装成功Nginx 命令12345nginx # 启动 nginxnginx -s stop # 快速关机nginx -s quit # 正常关机nginx -s reload # 重新加载配置nginx -s reopen # 重新打开日志文件Nginx 配置文件user nobody;#worker_processes 1;#error_log logs/error.log;#error_log logs/error.log notice;#error_log logs/error.log info;# 进程的ID号#pid logs/nginx.pid;events { worker_connections 1024;}http { include mime.types; default_type application/octet-stream; #log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' # '$status $body_bytes_sent \"$http_referer\" ' # '\"$http_user_agent\" \"$http_x_forwarded_for\"'; #access_log logs/access.log main; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; #gzip on; # 每个 server 相当于一个站点 # server { # 监听端口 # listen 80; # 域名 # server_name localhost; # 编码 # #charset koi8-r; # 日志存放路径 # #access_log logs/host.access.log main; # 路由 # location / { # root html; # index index.html index.htm; # } # #error_page 404 /404.html; # # redirect server error pages to the static page /50x.html # # # error_page 500 502 503 504 /50x.html; # location = /50x.html { # root html; # } # # proxy the PHP scripts to Apache listening on 127.0.0.1:80 # # # #location ~ \\.php$ { # # proxy_pass http://127.0.0.1; # #} # # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 # # # #location ~ \\.php$ { # # root html; # # fastcgi_pass 127.0.0.1:9000; # # fastcgi_index index.php; # # fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name; # # include fastcgi_params; # #} # # deny access to .htaccess files, if Apache's document root # # concurs with nginx's one # # # #location ~ /\\.ht { # # deny all; # #} # } ############################################################################# ################################# 代理 ####################################### server { # 监听的端口 listen 80; # 域名 server_name a.localhost; # 编码 charset utf-8; #access_log logs/host.access.log main; location / { # root html; # index index.html index.htm; # 代理的 URL proxy_pass http://127.0.0.1:3001; # 客户端真实域名和端口号 proxy_set_header Host $http_host; # 客户端真实IP proxy_set_header X-Real-IP $remote_addr; # 包含代理IP 真实IP proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-NginX-Proxy true; #给请求头中添加客户端的Cookie proxy_set_header Cookie $http_cookie; } #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html { root html; } # proxy the PHP scripts to Apache listening on 127.0.0.1:80 # #location ~ \\.php$ { # proxy_pass http://127.0.0.1; #} # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 # #location ~ \\.php$ { # root html; # fastcgi_pass 127.0.0.1:9000; # fastcgi_index index.php; # fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name; # include fastcgi_params; #} # deny access to .htaccess files, if Apache's document root # concurs with nginx's one # #location ~ /\\.ht { # deny all; #} } server { listen 80; server_name b.localhost; #charset koi8-r; #access_log logs/host.access.log main; location / { # root html; # index index.html index.htm; proxy_pass http://127.0.0.1:3002; } #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html { root html; } } server { listen 80; server_name c.localhost; #charset koi8-r; #access_log logs/host.access.log main; location / { # root html; # index index.html index.htm; proxy_pass http://127.0.0.1:3003; } #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html { root html; } } server { listen 80; server_name d.localhost; #charset koi8-r; #access_log logs/host.access.log main; location / { # root html; # index index.html index.htm; proxy_pass http://127.0.0.1:3004; } #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html { root html; } } ##################################负载均衡####################################### upstream mysvr { server 127.0.0.1:3001 weight=1; server 127.0.0.1:3002 weight=2; server 127.0.0.1:3003 weight=3; server 127.0.0.1:3004 weight=4; } server { listen 80; server_name e.localhost; #charset koi8-r; #access_log logs/host.access.log main; location / { # root html; # index index.html index.htm; proxy_pass http://mysvr; } #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html { root html; } } ############################################################################## # another virtual host using mix of IP-, name-, and port-based configuration # #server { # listen 8000; # listen somename:8080; # server_name somename alias another.alias; # location / { # root html; # index index.html index.htm; # } #} # HTTPS server # #server { # listen 443 ssl; # server_name localhost; # ssl_certificate cert.pem; # ssl_certificate_key cert.key; # ssl_session_cache shared:SSL:1m; # ssl_session_timeout 5m; # ssl_ciphers HIGH:!aNULL:!MD5; # ssl_prefer_server_ciphers on; # location / { # root html; # index index.html index.htm; # } #}} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Nginx","slug":"Nginx","permalink":"https://www.thlg.ml/categories/Nginx/"}],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"https://www.thlg.ml/tags/Nginx/"},{"name":"nginx 代理","slug":"nginx-代理","permalink":"https://www.thlg.ml/tags/nginx-%E4%BB%A3%E7%90%86/"},{"name":"nginx 安装","slug":"nginx-安装","permalink":"https://www.thlg.ml/tags/nginx-%E5%AE%89%E8%A3%85/"},{"name":"nginx 命令","slug":"nginx-命令","permalink":"https://www.thlg.ml/tags/nginx-%E5%91%BD%E4%BB%A4/"}]},{"title":"浏览器如何获取本机ip地址","slug":"浏览器如何获取本机公网ip地址","date":"2021-02-20T07:19:53.000Z","updated":"2021-02-25T02:23:22.764Z","comments":true,"path":"2021/02/20/浏览器如何获取本机公网ip地址/30504/","link":"","permalink":"https://www.thlg.ml/2021/02/20/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E6%9C%AC%E6%9C%BA%E5%85%AC%E7%BD%91ip%E5%9C%B0%E5%9D%80/30504/","excerpt":"浏览器如何获取本机的 IP 地址呢,方案有很多，简单的可以去 (https://ip.cn/)[https://ip.cn/] 获取本机 IP但有时我们要在业务中拿到客户端 IP,该怎么办呢,也有相应的解决方案,例如一些三方接口：搜狐、 淘宝、腾讯","text":"浏览器如何获取本机的 IP 地址呢,方案有很多，简单的可以去 (https://ip.cn/)[https://ip.cn/] 获取本机 IP但有时我们要在业务中拿到客户端 IP,该怎么办呢,也有相应的解决方案,例如一些三方接口：搜狐、 淘宝、腾讯接下来，我们使用 WebRTC API 来获取本机 IP具体操作如下：123456789101112131415161718192021222324252627282930313233343536373839function IPQuery(backcall) { // 兼容性处理 const MyPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection // 创建实例 const pc = new MyPeerConnection({ // 连接 STUN协议服务器 iceServers: [{ url: 'stun:stun.l.google.com:19302' }], }) let localIPs = { '0.0.0.0': 1 } let noop = () =&gt; {} let ipRegex = /([0-9]{1,3}(\\.[0-9]{1,3}){3}|[a-f0-9]{1,4}(:[a-f0-9]{1,4}){7})/g function ipIterate(ip) { if (!localIPs[ip]) backcall(ip) localIPs[ip] = true } // 创建数据信道 pc.createDataChannel('') pc.createOffer().then(function (sdp) { sdp.sdp.split('\\n').forEach(function (line) { if (line.indexOf('candidate') &lt; 0) return; line.match(ipRegex).forEach(ipIterate) }) pc.setLocalDescription(sdp, noop, noop) }) // 聆听候选事件 pc.onicecandidate = function (ice) { console.log(ice) if (!ice ||!ice.candidate || !ice.candidate.candidate || !ice.candidate.candidate.match(ipRegex)) return; ice.candidate.candidate.match(ipRegex).forEach(ipIterate) }}IPQuery(ip =&gt; { console.log(ip) // xxx.xxx.xxx.xxx}) document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"JS","slug":"JS","permalink":"https://www.thlg.ml/categories/JS/"}],"tags":[{"name":"获取IP","slug":"获取IP","permalink":"https://www.thlg.ml/tags/%E8%8E%B7%E5%8F%96IP/"},{"name":"本机IP","slug":"本机IP","permalink":"https://www.thlg.ml/tags/%E6%9C%AC%E6%9C%BAIP/"}]},{"title":"如何使div垂直水平居中","slug":"如何使div垂直水平居中","date":"2021-02-19T06:47:16.000Z","updated":"2021-02-19T06:58:44.686Z","comments":true,"path":"2021/02/19/如何使div垂直水平居中/9230/","link":"","permalink":"https://www.thlg.ml/2021/02/19/%E5%A6%82%E4%BD%95%E4%BD%BFdiv%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD/9230/","excerpt":"使 div 垂直水平居中","text":"使 div 垂直水平居中12345678910111213141516&lt;style&gt; .parent { width: 600px; height: 600px; } .child { width: 200px; height: 200px; background-color: rebeccapurple; }&lt;/style&gt;...&lt;div class=\"parent\"&gt; &lt;div class=\"child\"&gt;&lt;/div&gt;&lt;/div&gt;...方案一123456.child { position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%);}方案二12345.parent { display: flex; align-items: center; justify-content: center;}方案三1234567.parent { display: grid;}.child { align-self: center; justify-self: center;}方案四1234567891011121314.parent { text-align: center;}.parent::before { content: ''; display: inline-block; width: 0; height: 100%; vertical-align: middle;}.child { display: inline-block; vertical-align: middle;} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"CSS","slug":"CSS","permalink":"https://www.thlg.ml/categories/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://www.thlg.ml/tags/CSS/"},{"name":"css布局","slug":"css布局","permalink":"https://www.thlg.ml/tags/css%E5%B8%83%E5%B1%80/"}]},{"title":"ssh远程登录服务器VSCode调试代码","slug":"ssh远程登录服务器VSCode调试代码","date":"2021-01-28T01:19:09.000Z","updated":"2021-01-28T01:38:42.362Z","comments":true,"path":"2021/01/28/ssh远程登录服务器VSCode调试代码/14742/","link":"","permalink":"https://www.thlg.ml/2021/01/28/ssh%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E6%9C%8D%E5%8A%A1%E5%99%A8VSCode%E8%B0%83%E8%AF%95%E4%BB%A3%E7%A0%81/14742/","excerpt":"我们在开发中有时会遇到要使用公网进行开发，虽然可以使用一下映射工具 如 ngrok 等，但是，我就想用服务器，那在服务器上如何进行开发调试呢？","text":"我们在开发中有时会遇到要使用公网进行开发，虽然可以使用一下映射工具 如 ngrok 等，但是，我就想用服务器，那在服务器上如何进行开发调试呢？这里我使用 Romote SSH 插件。安装插件打开VSCode ，在插件商店中搜索 Romote SSH 即可安装生成秘钥公钥打开命令窗口（win+R cmd）输入1ssh-keygen之后一路回车即可，当然，你也可以自定义文件名以及加密密码会生成两个文件 id_rsa (秘钥) id_rsa.pub (公钥)，我们将公钥的内容加到服务器 ~/.ssh/authorized_keys 文件中设置权限 命令如下12chmod 700 ~/.sshchmod 600 ~/.ssh/authorized_keys​建立连接之后打开 Romote SSH 插件1ssh root@***.**.**.**设置配置文件12345Host 自定义 HostName IP User root 用户名 Port 22 默认 22 IdentityFile \"C:\\Users\\***\\.ssh\\id_rsa\" 秘钥绝对路径之后就可以快乐的免密连接了 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Linux","slug":"Linux","permalink":"https://www.thlg.ml/categories/Linux/"}],"tags":[{"name":"ssh","slug":"ssh","permalink":"https://www.thlg.ml/tags/ssh/"},{"name":"免密登录","slug":"免密登录","permalink":"https://www.thlg.ml/tags/%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/"}]},{"title":"koa-body实现上传文件 分别保存自定义文件夹","slug":"koa-body上传文件","date":"2021-01-22T13:53:58.000Z","updated":"2021-04-11T03:18:04.065Z","comments":true,"path":"2021/01/22/koa-body上传文件/4437/","link":"","permalink":"https://www.thlg.ml/2021/01/22/koa-body%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/4437/","excerpt":"如何使用ndoe实现上传文件，在使用koa 开发过程中，使用koa-body 不仅可以实现上传文件，还可以解析 POST 参数","text":"如何使用ndoe实现上传文件，在使用koa 开发过程中，使用koa-body 不仅可以实现上传文件，还可以解析 POST 参数配置如下1234567891011121314151617181920212223242526272829app.use( koaBody({ multipart: true, // 支持上传文件 patchNode: true, formidable: { uploadDir: path.join(__dirname, 'uploads/'), // 上传文件路径 keepExtensi· ons: true, // 保持文件后缀 maxFieldsSize: 5 * 1024 * 1024, // 文件上传大小 onFileBegin: (name, file) =&gt; { // 文件上传前的设置 let shop = name.split('|')[0] let type = name.split('|')[1] let ext = file.name.split('.') // 判断保存路径是否存在，不存在则创建文件夹 let dir = path.join(__dirname, `uploads/${shop}`) checkDirExist(dir) dir = path.join(__dirname, `uploads/${shop}/${type}`) checkDirExist(dir) // 图片保存的实际路径 file.path = `${dir}\\\\${file.name}` }, }, }))function checkDirExist (dir) { if (!fs.existsSync(dir)) { fs.mkdirSync(dir) }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Koa","slug":"Koa","permalink":"https://www.thlg.ml/categories/Koa/"}],"tags":[{"name":"node","slug":"node","permalink":"https://www.thlg.ml/tags/node/"},{"name":"koa-body","slug":"koa-body","permalink":"https://www.thlg.ml/tags/koa-body/"},{"name":"上传文件","slug":"上传文件","permalink":"https://www.thlg.ml/tags/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"}]},{"title":"koa-body POST 方式出现 415 unsupported media type","slug":"koa-body415","date":"2021-01-22T13:44:46.000Z","updated":"2021-04-11T03:17:58.135Z","comments":true,"path":"2021/01/22/koa-body415/41372/","link":"","permalink":"https://www.thlg.ml/2021/01/22/koa-body415/41372/","excerpt":"使用 Koa 写了个插件，要上传文件时 使用了 koa-body 在 POST 提交参数时，总是报错 415 unsupported media type 苦思不得其解在痛苦了半天的结果下，最终找到了问题所在","text":"使用 Koa 写了个插件，要上传文件时 使用了 koa-body 在 POST 提交参数时，总是报错 415 unsupported media type 苦思不得其解在痛苦了半天的结果下，最终找到了问题所在主要是开启了 encoding: 'gzip' 这个配置，注释后发现可以运行，完美解决。1234567app.use( koaBody({ multipart: true, // 支持上传文件 patchNode: true, // encoding: 'gzip', })) document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Koa","slug":"Koa","permalink":"https://www.thlg.ml/categories/Koa/"}],"tags":[{"name":"node","slug":"node","permalink":"https://www.thlg.ml/tags/node/"},{"name":"koa-body","slug":"koa-body","permalink":"https://www.thlg.ml/tags/koa-body/"},{"name":"koa","slug":"koa","permalink":"https://www.thlg.ml/tags/koa/"}]},{"title":"JavaScript函数工具整理","slug":"JavaScript函数工具整理","date":"2021-01-17T08:58:16.000Z","updated":"2021-06-06T02:53:07.719Z","comments":true,"path":"2021/01/17/JavaScript函数工具整理/43110/","link":"","permalink":"https://www.thlg.ml/2021/01/17/JavaScript%E5%87%BD%E6%95%B0%E5%B7%A5%E5%85%B7%E6%95%B4%E7%90%86/43110/","excerpt":"日常函数总结","text":"日常函数总结修改当前历史记录 静默修改浏览器 URL 不刷新页面1window.history.replaceState({ path: 'url' }, '', url)解析 URL 参数1234567891011function analysisURL(string) { return JSON.parse( `{ ${string .slice(string.indexOf('?') + 1) .split('&amp;') .map( o =&gt; `\"${o.slice(0, o.indexOf('='))}\":\"${o.slice(o.indexOf('=') + 1)}\"` ) .join(',')}}` )}格式化 Date123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354function processingTime(date) { if ((!date &amp;&amp; typeof date !== 'number') || date === '') { return new Date() } else if (date instanceof Date) { return date } else { return new Date(date) }}/** * @description Formatted time string * @example * // returns 2021 * format(YYYY) * // returns 21 * format(YY) * // returns 2021-02-01 09:00:00 * format(YYYY-MM-DD hh:mm:ss) * // returns 21-2-1 9:0:0 * format(YY-M-D h:m:s) * @param {String} [format='YYYY-MM-DD hh:mm:ss'] A format string defaults to YYYY-MM-DD hh:mm:ss * @param {(Date|String|Number)} [date=''] Can be a time object or a parameter of new Date * @returns {String} A formatted time string * */function format(format = 'YYYY-MM-DD hh:mm:ss', date = '') { date = processingTime(date) let Y = date.getFullYear(), M = date.getMonth() + 1, D = date.getDate(), h = date.getHours(), m = date.getMinutes(), s = date.getSeconds(), replaces = [ { reg1: /MM/, reg2: /M/, str1: 'MM', str2: 'M', self: M }, { reg1: /DD/, reg2: /D/, str1: 'DD', str2: 'D', self: D }, { reg1: /hh/, reg2: /h/, str1: 'hh', str2: 'h', self: h }, { reg1: /mm/, reg2: /m/, str1: 'mm', str2: 'm', self: m }, { reg1: /ss/, reg2: /s/, str1: 'ss', str2: 's', self: s }, ] if (/Y{4}/.test(format)) { format = format.replace(/Y{4}/, Y) } else if (/Y{2}/.test(format)) { format = format.replace(/Y{2}/, `${Y}`.substr(2)) } replaces.forEach(({ reg1, reg2, str1, str2, self }) =&gt; { if (format.includes(str1)) { format = format.replace(reg1, self &lt; 10 ? `0${self}` : self) } else if (format.includes(str2)) { format = format.replace(reg2, self) } }) return format}随机数12345678910/** * @description 随机从区间中获取一个整数 例:[1,10] * * @param {Number} min * @param {Number} max * @returns {Number} randomInteger — A numeric expression. */function closedInterval(min, max) { return Math.floor(Math.random() * (max + 1 - min)) + min}12345678910/** * @description 随机从区间中获取一个整数 例:(1,10) * * @param {Number} min * @param {Number} max * @returns {Number} randomInteger — A numeric expression. */function openInterval(min, max) { return Math.floor(Math.random() * (max - (min + 1)) + min + 1)}12345678910/** * @description 随机从区间中获取一个浮点数 例:(1,10) * * @param {Number} min * @param {Number} max * @returns randomFloating — A numeric expression. */function openIntervalF(min, max) { return min + Math.random() * (max - min)}12345678910/** * @description 随机从区间中获取一个整数 例:[1,10) * * @param {Number} min * @param {Number} max * @returns {Number} randomInteger — A numeric expression. */function closeLeftOpenRight(min, max) { return Math.ceil(Math.random() * (max - min)) + min}12345678910/** * @description 随机从区间中获取一个整数 例:(1,10] * * @param {Number} min * @param {Number} max * @returns {Number} randomInteger — A numeric expression. */function openLeftCloseRight(min, max) { return Math.floor(Math.random() * (max - min)) + min}数字数组排序123456789101112131415161718const quickSort = arr =&gt; { const a = [...arr] if (a.length &lt; 2) return a const pivotIndex = Math.floor(arr.length / 2) const pivot = a[pivotIndex] const [lo, hi] = a.reduce( (acc, val, i) =&gt; { if (val &lt; pivot || (val === pivot &amp;&amp; i != pivotIndex)) { acc[0].push(val) } else if (val &gt; pivot) { acc[1].push(val) } return acc }, [[], []] ) return [...quickSort(lo), pivot, ...quickSort(hi)]} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"JS","slug":"JS","permalink":"https://www.thlg.ml/categories/JS/"}],"tags":[{"name":"工具函数","slug":"工具函数","permalink":"https://www.thlg.ml/tags/%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0/"}]},{"title":"浏览器如何读取本地文件","slug":"浏览器如何读取本地文件","date":"2021-01-12T06:24:27.000Z","updated":"2021-01-12T06:42:29.987Z","comments":true,"path":"2021/01/12/浏览器如何读取本地文件/20477/","link":"","permalink":"https://www.thlg.ml/2021/01/12/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A6%82%E4%BD%95%E8%AF%BB%E5%8F%96%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6/20477/","excerpt":"在业务需求上，不免需要用户上传文件，我们来操作一些内容，但如何在前端代码中来完成这部分需求呢？","text":"在业务需求上，不免需要用户上传文件，我们来操作一些内容，但如何在前端代码中来完成这部分需求呢？封装函数123456789101112131415161718192021222324252627282930313233// 文件转为内容文本 function readAsText(file, callback) { let reader = new FileReader() reader.readAsText(file) reader.onload = function(e) { callback(this.result) } reader.onerror = function(e) { callback(null, e) }}// 文件转为地址function readAsDataURL(file, callback) { let reader = new FileReader() reader.readAsDataURL(file) reader.onload = function(e) { callback(this.reader) } reader.onerror = function(e) { callback(null, e) }}// 文件转为二进制function readAsBinaryString(file, callback) { let reader = new FileReader() reader.readAsBinaryString(file) reader.onload = function(e) { callback(this.reader) } reader.onerror = function(e) { callback(null, e) }}当然 有时候也需要将文件Base64 编码转为文件类型123456789101112function Base64ToFile(dataURL, fileName = 'file') { let arr = dataURL.split(',') let mime = arr[0].match(/:(.*?);/)[1] let suffix = mime.split('/')[1] let bstr = atob(arr[1]) let n = bstr.length let u8arr = new Uint8Array(n) while (n--) { u8arr[n] = bstr.charCodeAt(n) } return new File([u8arr], `${fileName}.${suffix}`, { type: mime })} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"JS","slug":"JS","permalink":"https://www.thlg.ml/categories/JS/"}],"tags":[{"name":"js读取本地文件","slug":"js读取本地文件","permalink":"https://www.thlg.ml/tags/js%E8%AF%BB%E5%8F%96%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6/"},{"name":"读取文件","slug":"读取文件","permalink":"https://www.thlg.ml/tags/%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6/"}]},{"title":"扁平数组与树状结构的转换","slug":"扁平数组与树状结构的转换","date":"2020-09-22T11:36:01.000Z","updated":"2020-09-22T11:56:32.720Z","comments":true,"path":"2020/09/22/扁平数组与树状结构的转换/52305/","link":"","permalink":"https://www.thlg.ml/2020/09/22/%E6%89%81%E5%B9%B3%E6%95%B0%E7%BB%84%E4%B8%8E%E6%A0%91%E7%8A%B6%E7%BB%93%E6%9E%84%E7%9A%84%E8%BD%AC%E6%8D%A2/52305/","excerpt":"我们在使用后台传过来的数据的时候，有时候我们会得到树状结构的数据，虽然有时候，后端会处理掉，但，毕竟我们也可以在前端给它处理一下，一方面也锻炼一下脑子，天天写页面都没思考能力了。","text":"我们在使用后台传过来的数据的时候，有时候我们会得到树状结构的数据，虽然有时候，后端会处理掉，但，毕竟我们也可以在前端给它处理一下，一方面也锻炼一下脑子，天天写页面都没思考能力了。树状结构转为扁平数组12345678910111213141516171819202122232425262728293031323334353637383940414243let tree = { id: '1', pid: '7', name: 'aaaaa', children: [ { id: '2', pid: '1', name: 'bbbbbbb', children: [ { id: '6', pid: '2', name: 'ccccc', children: [{ id: '9', pid: '6', name: 'dddd' }], }, ], }, ],}const toArray = (tree, children) =&gt; { let arr = [] const a = ls =&gt; { if (ls instanceof Array) { ls.forEach(o =&gt; { let c = o[children] delete o[children] arr.push(o) a(c) }) } } tree instanceof Array ? a(tree) : a([tree]) return arr}toArray(tree, 'children')/* [ { id: '1', pid: '7', name: 'aaaaa' }, { id: '2', pid: '1', name: 'bbbbbbb' }, { id: '6', pid: '2', name: 'ccccc' }, { id: '9', pid: '6', name: 'dddd' }] */扁平数组转为树状结构1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253let array = [ { id: '1', pid: '7', name: 'aaaaa' }, { id: '2', pid: '1', name: 'bbbbbbb' }, { id: '6', pid: '2', name: 'ccccc' }, { id: '9', pid: '6', name: 'dddd' }] const arrayToTree = (arr, id, pid) =&gt; { if (!id || id == '') { return [] } if (arr instanceof Array) { let tree = [] let treeMap = {} arr.forEach(o =&gt; { treeMap[o[id]] = o }) arr.forEach(o =&gt; { let parent = treeMap[o[pid]] if (parent &amp;&amp; o[id] != o[pid]) { if (!parent.children) { parent.children = [] } parent.children.push(o) } else { tree.push(o) } }) return tree } else { return [arr] }}arrayToTree(array, 'id', 'pid')/* { id: '1', pid: '7', name: 'aaaaa', children: [ { id: '2', pid: '1', name: 'bbbbbbb', children: [ { id: '6', pid: '2', name: 'ccccc', children: [{ id: '9', pid: '6', name: 'dddd' }], }, ], }, ],} */在这里记录是为了以防用的时候找不到，这脑子😝，万一忘了呢 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"JS","slug":"JS","permalink":"https://www.thlg.ml/categories/JS/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://www.thlg.ml/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"axios 取消重复请求","slug":"axios-取消重复请求","date":"2020-08-15T13:26:12.000Z","updated":"2020-08-17T13:19:03.374Z","comments":true,"path":"2020/08/15/axios-取消重复请求/13208/","link":"","permalink":"https://www.thlg.ml/2020/08/15/axios-%E5%8F%96%E6%B6%88%E9%87%8D%E5%A4%8D%E8%AF%B7%E6%B1%82/13208/","excerpt":"在开发单页面应用中，我们在使用 axios 做请求的时候，会遇到一些很不好的体验，当我们切换路由的时候，如果上个页面的请求还没结束，那么这个请求依旧会执行完，我们能不能在不需要的时候就取消掉你？","text":"在开发单页面应用中，我们在使用 axios 做请求的时候，会遇到一些很不好的体验，当我们切换路由的时候，如果上个页面的请求还没结束，那么这个请求依旧会执行完，我们能不能在不需要的时候就取消掉你？那么刚刚好， axios 可以实现这个需求。有两种方法可以实现取消请求方法一官方示例123456789101112131415161718192021222324252627const CancelToken = axios.CancelTokenconst source = CancelToken.source()axios .get('/user/12345', { cancelToken: source.token, }) .catch(function (thrown) { if (axios.isCancel(thrown)) { console.log('Request canceled', thrown.message) } else { // 处理错误 } })axios.post( '/user/12345', { name: 'new name', }, { cancelToken: source.token, })// 取消请求（message 参数是可选的）source.cancel('Operation canceled by the user.')方法二官方示例123456789101112const CancelToken = axios.CancelTokenlet cancelaxios.get('/user/12345', { cancelToken: new CancelToken(function executor(c) { // executor 函数接收一个 cancel 函数作为参数 cancel = c }),})// cancel the requestcancel()我们这里使用第二种方式我们定义三个方法:addPending1234567891011121314151617181920212223const pending = new Map()/** * @description 添加请求 * * @param {Object} config */function addPending(config) { // 唯一标识 let flag = config.flag || false if (flag) { config.cancelToken = new axios.CancelToken(cancel =&gt; { if (!pending.has(flag)) { pending.set(flag, cancel) } else { const oldCancel = pending.get(flag) oldCancel() pending.set(flag, cancel) } }) } return config}removePending1234567891011/** * @description 移除请求 * * @param {Object} config */function removePending(config) { let flag = config.flag || false if (flag &amp;&amp; pending.has(flag)) { pending.delete(flag) }}clearPending 用于在路由跳转时，清空所有请求12345678910/** * @description 清空所有请求 * */function clearPending() { for (const [flag, oldCancel] of pending) { oldCancel() } pending.clear()}我们在请求体中，添加 flag 属性，来识别每一个唯一的 API12345678export function text(data) { return axios({ flag: 'text', url: 'https://easydoc.xyz/mock/NX1XF1Cx/p/29538143/0I92pgNB', method: 'GET', data, })}这样我们的函数就写好了，只要在请求拦截中只用就可以实现了123456789101112// 请求拦截request.interceptors.request.use( function(config) { // ... return addPending(config) }, function(error) { // 请求错误时的处理 // ... return Promise.reject(error) })12345678910111213// 响应拦截request.interceptors.response.use( function(response) { // 请求成功，移除 removePending(response.config) // ... return response.data }, function(error) { // ... return Promise.reject(error) }) document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Vue","slug":"Vue","permalink":"https://www.thlg.ml/categories/Vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://www.thlg.ml/tags/vue/"},{"name":"axios","slug":"axios","permalink":"https://www.thlg.ml/tags/axios/"}]},{"title":"vue 使用 elemen UI 导航菜单所遇到的问题","slug":"vue-使用-elemen-UI-导航菜单所遇到的问题","date":"2020-08-14T11:24:48.000Z","updated":"2020-08-15T13:28:44.293Z","comments":true,"path":"2020/08/14/vue-使用-elemen-UI-导航菜单所遇到的问题/23181/","link":"","permalink":"https://www.thlg.ml/2020/08/14/vue-%E4%BD%BF%E7%94%A8-elemen-UI-%E5%AF%BC%E8%88%AA%E8%8F%9C%E5%8D%95%E6%89%80%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/23181/","excerpt":"我们常常在开发vue 项目中使用 elemen UI 开结合开发，但在单页面应用中，随着用户的操作而改变的状态，我们常常使用 VueX 来做状态管理，但是，如果用户刷新页面，之前的状态都会消失，那么，导航该如何准确给当前页面的导航按钮添加选中的样式呢？","text":"我们常常在开发vue 项目中使用 elemen UI 开结合开发，但在单页面应用中，随着用户的操作而改变的状态，我们常常使用 VueX 来做状态管理，但是，如果用户刷新页面，之前的状态都会消失，那么，导航该如何准确给当前页面的导航按钮添加选中的样式呢？直接上代码1234567&lt;template&gt; &lt;el-menu router mode=\"horizontal\" @select=\"selectMenu\"&gt; &lt;template v-for=\"(item,index) in navlist\"&gt; &lt;el-menu-item :index=\"item.path\" :key=\"index\" disabled&gt;{{item.name}}&lt;/el-menu-item&gt; &lt;/template&gt; &lt;/el-menu&gt;&lt;/template&gt;这样写的问题是，当用户刷新页面时，当前页面对应的导航并不会被添加选中样式，那该怎么办呢？1234567&lt;template&gt; &lt;el-menu router :default-active=\"$route.path\" mode=\"horizontal\" @select=\"selectMenu\"&gt; &lt;template v-for=\"(item,index) in navlist\"&gt; &lt;el-menu-item :index=\"item.path\" :key=\"index\" disabled&gt;{{item.name}}&lt;/el-menu-item&gt; &lt;/template&gt; &lt;/el-menu&gt;&lt;/template&gt;当我们这样写，将当前路径时时绑定到导航上，就可以完美实现了. document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Vue","slug":"Vue","permalink":"https://www.thlg.ml/categories/Vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://www.thlg.ml/tags/vue/"},{"name":"elemen-ui","slug":"elemen-ui","permalink":"https://www.thlg.ml/tags/elemen-ui/"},{"name":"导航","slug":"导航","permalink":"https://www.thlg.ml/tags/%E5%AF%BC%E8%88%AA/"}]},{"title":"教你如何在本地开发 Shopify 主题","slug":"教你如何在本地开发-Shopify-主题","date":"2020-07-05T05:51:43.000Z","updated":"2020-07-06T13:42:59.034Z","comments":true,"path":"2020/07/05/教你如何在本地开发-Shopify-主题/37643/","link":"","permalink":"https://www.thlg.ml/2020/07/05/%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E5%9C%A8%E6%9C%AC%E5%9C%B0%E5%BC%80%E5%8F%91-Shopify-%E4%B8%BB%E9%A2%98/37643/","excerpt":"我们在开发 Shopify 主题的时候，常常是在官方的线上编辑器上进行修改代码的，这样的编辑效果不是很好（不能格式化、不能智能提示），而且对于我们想使用自己喜欢的编辑器来编辑的人来说，很是不舒服，那么有没有什么方法可以实现在本地编辑器上进行开发呢？接下来就让我们在本地配置一下环境。","text":"我们在开发 Shopify 主题的时候，常常是在官方的线上编辑器上进行修改代码的，这样的编辑效果不是很好（不能格式化、不能智能提示），而且对于我们想使用自己喜欢的编辑器来编辑的人来说，很是不舒服，那么有没有什么方法可以实现在本地编辑器上进行开发呢？接下来就让我们在本地配置一下环境。下载 Shopify 主题套件win10-64如果下载速度较慢，也可以下载我百度网盘里的https://pan.baidu.com/s/1YMQ2adpGaBpiwDCYCvoPSA提取码：pt8g下载完成后，创建一个 Theme Kit 文件夹，将程序复制到文件夹中，然后将路径（D:\\DevelopmentTool\\Theme Kit）添加到 环境变量（Path）中完成后 打开 cmd.exe 并输入 theme创建自定义 应用程序创建一个自定义应用程序 设置 Theme templates and theme assets 为 Read and write得到 密码后 ，复制下来，保存到一个文件里下载主题模板查看模板ID1theme new --password=[your-password] --store=[your-store.myshopify.com] --name=[theme name]记住主题 ID创建一个文件夹，这将是存放你主题文件的项目模板，然后执行1theme get -p=[your-password] -s=[you-store.myshopify.com] -t=[your-theme-id]常用命令下载配置文件中的主题1theme download打开将在浏览器中打开主题的预览页面，并打印出URL供您参考1theme openWatch将启动一个过程，该过程将监视您的目录中的更改并将其上载到Shopify。任何更改将被记录到终端，并且上传状态也将被记录。只需输入ctrl + C即可停止该程序1theme watch document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Shopify","slug":"Shopify","permalink":"https://www.thlg.ml/categories/Shopify/"}],"tags":[{"name":"开发技巧","slug":"开发技巧","permalink":"https://www.thlg.ml/tags/%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/"},{"name":"Shopify本地开发","slug":"Shopify本地开发","permalink":"https://www.thlg.ml/tags/Shopify%E6%9C%AC%E5%9C%B0%E5%BC%80%E5%8F%91/"}]},{"title":"Liquid","slug":"Liquid","date":"2020-06-16T11:01:48.000Z","updated":"2020-06-16T11:15:23.139Z","comments":true,"path":"2020/06/16/Liquid/22647/","link":"","permalink":"https://www.thlg.ml/2020/06/16/Liquid/22647/","excerpt":"开发 Shopify 商店，首先要熟悉 Liquid 的语法。Liquid 由 Shopify 创造并用 Ruby 实现。","text":"开发 Shopify 商店，首先要熟悉 Liquid 的语法。Liquid 由 Shopify 创造并用 Ruby 实现。基础操作符==相等!=不相等&gt;大于&lt;小于&gt;=大于或等于&lt;=小于或等于or逻辑或and逻辑与数据类型SttingNumberBootlean除了 nil false 其余全都为 真NilArray标签注释123{% comment %}{% endcomment %}控制流if123{% if true %}{% endif %}如果为真就执行unless123{% unless %}{% endunless %}若为假就执行elsif / else123{% elsif %}{% else %}否则 如果否则case/when123456789{% case 变量 %}...{% when '' %}...{% when '' %}...{% else %}...{% endcase %}类似于 switch迭代/循环break循环过程中若干遇到 break 标记（tag）即停止循环continue循环过程中若遇到 continue 标记（tag）则跳出当前循环limit limit:5限定循环执行的次数offset offsetv:5从指定索引号开始执行循环。range (1..5)定义循环执行的范围。可利用数字或变量来定义此执行范围1234567{% for i in (3..5) %} {{ i }}{% endfor %}{% assign num = 4 %}{% for i in (1..num) %} {{ i }}{% endfor %}reversed反转循环的执行顺序。注意和 reverse 过滤器（filter）的拼写是不同的1{% cycle 'one', 'two', 'three' %}将 cycle 代码块放入 for 循环中 每次执行都会输出参数中的下一个tablerow生成一个 HTML 表格。必须用和这两个 HTML 标签将其包裹起来cols 定义表格应当有多少列limit 在执行到指定的脚标（index）之后退出 tablerowoffset 在指定的脚标（index）之后开始执行 tablerowrange 定义循环执行的范围。可利用数字和变量来定义执行范围12345&lt;table&gt;{% tablerow product in collection.products %} {{ product.title }}{% endtablerow %}&lt;/table&gt;声明变量assign 声明1{% assign 变量='' %}capture 声明123{% capture 变量 %}I am being captured.{% endcapture %}increment 声明数值变量 0每次调用此变量 值 加1初始值为 0123{% increment my_counter %}{% increment my_counter %}{% increment my_counter %}123012decrement 声明数值变量 -1每次调用此变量 值 减1初始值为 -1原始内容1234{% raw %} In Handlebars, {{ this }} will be HTML-escaped, but {{{ that }}} will not.{% endraw %}对代码块中的内容 不做任何处理过滤器abs 绝对值输入12{{-8 | abs}}{{8 | abs}}输出128 8append 追加字符串输入1{{\"hello\" | append: ' word'}}输出1hello wordprepend 在字符前追加输入1{{ \"word\" | prepend: 'hello '}}输出1hello wordat_least 限制数字最小值输入12{{ 5 | at_least:6}}{{ 7 | at_least:6}}输出1267at_most 限制数字最大值输入12{{ 5 | at_most:6}}{{ 7 | at_most:6}}输出1256capitalize 首字母大写输入1{{\"text\" | capitalize}}输出1Textceil 将浮点数向上取整输入1{{3.1415926 | ceil}}输出14floor 浮点数详向下取整输入1{{9.9 | floor}}输出19round 四舍五入 保留 * 位小数输入123{{1.4 | round}}{{1.5 | round}}{{3.1415926 | round: 3}}输出123123.142compact 删除数组中所有 nil 值输入12输出12uniq 删除数组中所有 冗余项输入1{{\"1,2,3,4,5,6,8,5,4,2,3,1,7,9,5\" | split: ',' | uniq}}输出11,2,3,4,5,6,8,7,9concat 合并数组输入123456{%- assign array1 = \"a,b,c\"| split: ',' -%}{%- assign array2 = \"d,e,f\"| split: ',' -%}{%- assign array = array1 | concat: array2 -%}{%- for item in array |compact-%} &lt;div&gt;{{item}}&lt;/div&gt;{%- endfor -%}输出123456abcdefdate 转换时间格式%Y 年%y 年（后两位）%m 月%b 月（英文单词）%h 月（英文单词）%d 日%H 时%M 分%S 秒%s 时间戳%a 星期%A 星期（全）输入12{{\"now\" |date:\"%Y-%m-%d %H:%M\"}}{{\"today\" |date:\"%Y-%m-%d %H:%M\"}}输出122020-05-03 11:562020-05-03 11:56default 默认值当变量未定义或为空时，输出默认值输入1{{nub |default:555 }}输出1555输入12{%- assign nub = 666 -%}{{nub |default:555 }}输出1666plus 将两数相加输入1{{ 5 | plus: 6}}输出111minus 将两数相减输入1{{ 8 | minus: 5}}输出13times 将两数相乘输入1{{8 | times: 6}}输出148divided_by 将两数相除输入12{{17 | divided_by: 4}}{{17 | divided_by: 4.0}}输出124.254.25modulo 求余输入1{{ 10 | modulo:6}}输出11downcase 将字符串转为小写输入1{{\"ABCDEFG\" | downcase }}输出1abcdefgupcase 将字符串转为大写输入1{{\"abcdefg\" | upcase }}输出1ABCDEFGfirst 输出数组第一项输入123{% assign array = \"1,2,3,4,5,6\" | split: ',' %}{{array|first }}{{array.first }}输出12join 将数组连接成字符串参数为连接符输入12{% assign array = \"a,b,c,d,e,f,g\" | split: ',' %}{{array | join: '-'}}输出1a-b-c-d-e-f-glstrip 删除字符左侧 空格 制表符 换行符输入1{{\" s t r i n g \" | lstrip}}输出1s t r i n grstrip 删除字符右侧 空格 制表符 换行符输入1{{\" s t r i n g \" | rstrip}}输出1s t r i n gstrip 删除字符串两侧 空格 制表符 换行符输入1{{\" s t r i n g \" | rstrip}}输出1t r i n gstrip_html 删除字符串内 html 标签输入1Have you read Ulysses?输出12strip_newlines 删除字符串内 换行 字符输入12345{% capture string %}Hellothere{% endcapture %}{{string | strip_newlines }}输出1Hellotherenewline_to_br 将换行符转为输入12345{% capture string %}Hellothere{% endcapture %}{{string | newline_to_br}}输出123&lt;br/&gt;Hello&lt;br/&gt;there&lt;br/&gt;remove 删除字符串中出现的 子字符输入1{{ \"abcdefg\" | remove: 'cd'}}输出1abefgremove_first 删除第一个匹配到的 子字符输入1{{ \"abcdcdefg\" | remove_first: 'cd'}}输出1abcdefgreplace 替换字符找到字符并替换掉输入1{{ \"abcdcdefg\" | replace: 'c', 'd'}}输出1abddddefgreplace_first 替换字符将字符串中出现的第一个参数替换为第二个参数输入1{{ \"abcdcdefg\" | replace_first: 'c', 'd'}}输出1abddcdefgreverse 翻转数组输入12{% assign array = \"1,2,3,4,5,6\" | split: ',' %}{{array | reverse }}输出16, 5, 4, 3, 2, 1size 字符长度 大小输入123{{\"s t r i n g\" | size}}{% assign str = \"s t r i n g\" %}{{str.size}输出121111slice 截取字符串输入123{{\"123456\" | slice: 0}}{{\"123456\" | slice: 2,2}}{{\"123456\" | slice: -1}}输出1231346sort 排序 按照字母大小写区分大小写输入12{%- assign array = \"a,f,r,S,d,g,O,y\" | split: ',' -%}{{-array| sort-}}输出1O,S,a,d,f,g,r,ysort_natural 排序 不按照字母大小写不区分大小写输入12{%- assign array = \"a,f,r,S,d,g,O,y\" | split: ',' -%}{{-array| sort_natural -}}输出1a,d,f,g,O,r,S,ysplit 分割字符串为数组输入12{%- assign array = \"a,f,r,S,d,g,O,y\" | split: ',' -%}{{array}}输出1a,f,r,S,d,g,O,ytruncate 裁剪字符串（字符个数） 省略号输入123{{\"abcdefghijk\" | truncate: 8}}{{\"abcdefghijk\" | truncate: 8,'...'}}{{\"abcdefghijk\" | truncate: 8,'省略'}}输出123abcde... abcde... abcdef省略truncatewords 裁剪字符串（单词个数） 省略号输入123{{\"a b c d e f g h ijk\" | truncatewords: 8}}&lt;br/&gt;{{\"a b c d e f g h ijk\" | truncatewords: 8,'...'}}&lt;br/&gt;{{\"a b c d e f g h ijk\" | truncatewords: 8,'省略'}}&lt;br/&gt;输出123a b c d e f g h...a b c d e f g h...a b c d e f g h省略url_encode 将字符中 非url安全字符转换为百分号编码的字符输入1{{\"baidu.com?q=@qq.com&amp;w=sd\" | url_encode }}输出1baidu.com%3Fq%3D%40qq.com%26w%3Dsdurl_decode 将字符中 百分号编码的字符 解码输入1{{\"baidu.com%3Fq%3D%40qq.com%26w%3Dsd\" | url_decode }}输出1baidu.com?q=@qq.com&amp;w=sd document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"文档","slug":"文档","permalink":"https://www.thlg.ml/categories/%E6%96%87%E6%A1%A3/"},{"name":"Liquid","slug":"文档/Liquid","permalink":"https://www.thlg.ml/categories/%E6%96%87%E6%A1%A3/Liquid/"}],"tags":[{"name":"Shopify","slug":"Shopify","permalink":"https://www.thlg.ml/tags/Shopify/"},{"name":"Liquid","slug":"Liquid","permalink":"https://www.thlg.ml/tags/Liquid/"}]},{"title":"shopify 自定义应用开发","slug":"Shopify-自定义应用开发","date":"2020-06-13T11:36:18.000Z","updated":"2021-05-02T01:49:04.364Z","comments":true,"path":"2020/06/13/Shopify-自定义应用开发/15100/","link":"","permalink":"https://www.thlg.ml/2020/06/13/Shopify-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/15100/","excerpt":"公司要求开发一个 shopify 嵌入式应用，说实话，实在是有些坎坷，主要是英文文档😭😭，在这里自己做下记录。Shopify Inc.是加拿大的一家跨国电子商务公司.Shopify为在线零售商提供一整套服务“包括支付、市场营销、运输和客户契合工具，以简化小型商户开设在线商店的过程","text":"公司要求开发一个 shopify 嵌入式应用，说实话，实在是有些坎坷，主要是英文文档😭😭，在这里自己做下记录。Shopify Inc.是加拿大的一家跨国电子商务公司.Shopify为在线零售商提供一整套服务“包括支付、市场营销、运输和客户契合工具，以简化小型商户开设在线商店的过程准备在开发之前呢，首先你需要准备一个 开发者账号。 创建一个 Shopify 合作伙伴账户官方推荐使用 React Next 作为渲染框架 node 作为服务器后端开发 使用 GraphQL Apollo 作为查询语言 使用 Polaris 作为 UI组件库首先要确保自己安装了 Node.js运行一下命令 检查 node 版本1node -v如果已经安装，请确保您使用的是8.1.0或更高版本。创建项目文件夹创建文件夹 shopify_app进入到项目文件夹1cd shopify_app初始化项目1npm init -y使用 Next.js 构建 React 支架安装 Next React ReactDOM1npm install react react-dom next --save在根目录中创建 pages 文件夹在 pages 文件夹中添加 index.js1234567const Index = () =&gt; ( &lt;div&gt; &lt;p&gt;Sample app using React and Next.js&lt;/p&gt; &lt;/div&gt;);export default Index;修改 package.json 文件12345678{ \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\", \"dev\": \"next\", \"build\": \"next build\", \"start\": \"next start\" }}运行项目1npm run dev将应用嵌入 Shopify安装 ngrok koa @shopify/koa-shopify-auth dotenv koa-session isomorphic-fetch @zeit/next-css @shopify/polaris @shopify/app-bridge-react js-cookie12npm install ngrok -gnpm install koa @shopify/koa-shopify-auth dotenv koa-session isomorphic-fetch --save运行1ngrok http 3000获取 shopifyAPI秘钥 和 shopifyAPI秘密秘钥通过登录 Shopify 合作伙伴账户 创建一个应用程序获取。您可以创建： 公共应用程序 自定义应用程序 私人应用程序这里我们创建 自定义应用程序在 应用程序URL 中填入 ngrok转发URL的HTTPS版本将相同的HTTPS转发URL粘贴到 列入白名单的重定向URL 字段中，并将 /auth/ allback 添加到路径的末尾然后 创建应用然后在根目录创建 .env 文件12SHOPIFY_API_KEY = '您的来自SHOPIFY PARTNERS仪表板的API密钥' SHOPIFY_API_SECRET_KEY = '您的来自SHOPIFY PARTNERS仪表板的API密钥'设置 Node.js 服务器 OAuth 授权认证在项目根目录中 创建 server.js 文件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849require('isomorphic-fetch')const dotenv = require('dotenv')const Koa = require('koa')const next = require('next')const { default: createShopifyAuth } = require('@shopify/koa-shopify-auth')const { verifyRequest } = require('@shopify/koa-shopify-auth')const session = require('koa-session')dotenv.config()// graphql的相关中间件const { default: graphQLProxy } = require('@shopify/koa-shopify-graphql-proxy')const { ApiVersion } = require('@shopify/koa-shopify-graphql-proxy')const port = parseInt(process.env.PORT, 10) || 3000const dev = process.env.NODE_ENV !== 'production'const app = next({ dev })const handle = app.getRequestHandler()const { SHOPIFY_API_SECRET_KEY, SHOPIFY_API_KEY } = process.env // 环境变量里读取 api-key与api-secret-keyapp.prepare().then(() =&gt; { const server = new Koa() server.use(session(server)) server.keys = [SHOPIFY_API_SECRET_KEY] server.use( createShopifyAuth({ apiKey: SHOPIFY_API_KEY, secret: SHOPIFY_API_SECRET_KEY, scopes: ['read_products', 'write_products','read_orders'], //填写相关应用api相关请求的权限 afterAuth (ctx) { const { shop, accessToken } = ctx.session // 通过session拿取相关商店地址以及请求api需要的accessToken ctx.cookies.set('shopOrigin', shop, { httpOnly: false }) ctx.redirect('/') // 重定向到index首页 } }) ) server.use(verifyRequest()) server.use(async (ctx) =&gt; { await handle(ctx.req, ctx.res) ctx.respond = false ctx.res.statusCode = 200 return }) server.use(graphQLProxy({ version: ApiVersion.October19 })) // 这里填写相关api的版本 server.listen(port, () =&gt; { console.log(`&gt; Ready on http://localhost:${port}`) // 监听端口 })})修改 package.json 文件12345678{ \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\", \"dev\": \"node server.js\", \"build\": \"next build\", \"start\": \"NODE_ENV=production node server.js\" }}然后启动项目 将应用安装到自己的测试商店 就可以看到自己的应用已经成功运行了！Shopify 官方文档Shopify developers document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Shopify","slug":"Shopify","permalink":"https://www.thlg.ml/categories/Shopify/"}],"tags":[{"name":"shopify","slug":"shopify","permalink":"https://www.thlg.ml/tags/shopify/"},{"name":"next.js","slug":"next-js","permalink":"https://www.thlg.ml/tags/next-js/"},{"name":"node.js","slug":"node-js","permalink":"https://www.thlg.ml/tags/node-js/"}]},{"title":"Redux 小试牛刀","slug":"Redux-小试牛刀","date":"2020-06-07T05:38:00.000Z","updated":"2020-06-07T08:07:48.268Z","comments":true,"path":"2020/06/07/Redux-小试牛刀/37966/","link":"","permalink":"https://www.thlg.ml/2020/06/07/Redux-%E5%B0%8F%E8%AF%95%E7%89%9B%E5%88%80/37966/","excerpt":"在使用 Redux 之前，首先要了解为什么使用 Redux。随着 JavaScript 单页应用开发日趋复杂，JavaScript 需要管理比任何时候都要多的 state （状态）。 这些 state 可能包括服务器响应、缓存数据、本地生成尚未持久化到服务器的数据，也包括 UI 状态，如激活的路由，被选中的标签，是否显示加载动效或者分页器等等。","text":"在使用 Redux 之前，首先要了解为什么使用 Redux。随着 JavaScript 单页应用开发日趋复杂，JavaScript 需要管理比任何时候都要多的 state （状态）。 这些 state 可能包括服务器响应、缓存数据、本地生成尚未持久化到服务器的数据，也包括 UI 状态，如激活的路由，被选中的标签，是否显示加载动效或者分页器等等。Redux 三要素Action（将要发生的操作）Reducer（根据 action 更新 state，是一个纯函数）提供 combineReducers(reducers) 函数组合多个 reducer存放 state 数据的 Store（将 action 和 reducer 联系到一起的对象）提供 getState() 方法获取 state提供 dispatch(action) 方法更新 state通过 subsctibe(listener) 注册监听器通过 subscribr(listener) 返回的函数注销监听器三大基本原则单一数据源state 是只读的，只能通过触发 action 修改 state使用纯函数来执行修改使用创建 reducer创建 store 用于存储绑定事件定义 render 函数，更新视图为 store 添加监听，每次状态发生变化即刻调用render函数渲染组件初始化渲染默认数据我们用 Redux 来写一个计数器第一步编写 HTML 代码12345&lt;h1&gt;计数器：&lt;span id=\"num\"&gt;&lt;/span&gt;&lt;/h1&gt;&lt;button onclick=\"addNum()\"&gt;+&lt;/button&gt;&lt;button onclick=\"minNum()\"&gt;-&lt;/button&gt;&lt;button onclick=\"doubleness()\"&gt;2倍&lt;/button&gt;&lt;button onclick=\"square()\"&gt;平方&lt;/button&gt;导入 redux.min.js1&lt;script src=\"./redux.min.js\"&gt;&lt;/script&gt;定义方法12345678910111213141516171819202122232425const addNum = () =&gt; { let action = { type: 'ADD_ONE' } store.dispatch(action)}const minNum = () =&gt; { let action = { type: 'MIN_ONE' } store.dispatch(action)}const doubleness = () =&gt; { let action = { type: 'DOUBLENESS' } store.dispatch(action)}const square = () =&gt; { let action = { type: 'SQUARE' } store.dispatch(action)}创建纯函数12345678910111213141516171819const counter = (state = 0, action) =&gt; { switch (action.type) { case 'ADD_ONE': return state + 1 break; case 'MIN_ONE': return state - 1 break; case 'DOUBLENESS': return state * 2 break; case 'SQUARE': return state * state break; default: return state break; } }创建仓库123456789const store = Redux.createStore(counter)const readen = () =&gt; { document.getElementById('num').innerHTML = store.getState() console.log(store.getState());}readen()store.subscribe(readen)Redux 中文文档 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Redux","slug":"Redux","permalink":"https://www.thlg.ml/categories/Redux/"}],"tags":[{"name":"Redux","slug":"Redux","permalink":"https://www.thlg.ml/tags/Redux/"}]},{"title":"OWL Carousel2","slug":"OWL-Carousel2","date":"2020-05-24T01:34:07.000Z","updated":"2020-12-26T11:24:25.245Z","comments":true,"path":"2020/05/24/OWL-Carousel2/13606/","link":"","permalink":"https://www.thlg.ml/2020/05/24/OWL-Carousel2/13606/","excerpt":"Owl Carousel 是一个强大、实用但小巧的 jQuery 幻灯片插件，它具有一下特点：兼容所有浏览器支持响应式支持 CSS3 过度支持触摸事件支持 JSON 及自定义 JSON 格式支持进度条支持自定义事件支持延迟加载支持自适应高度Owl Carousel 提供了众多的参数、回调函数及自定义事件（具体请往下浏览），所以它几乎可以满足你的所有要求。","text":"Owl Carousel 是一个强大、实用但小巧的 jQuery 幻灯片插件，它具有一下特点：兼容所有浏览器支持响应式支持 CSS3 过度支持触摸事件支持 JSON 及自定义 JSON 格式支持进度条支持自定义事件支持延迟加载支持自适应高度Owl Carousel 提供了众多的参数、回调函数及自定义事件（具体请往下浏览），所以它几乎可以满足你的所有要求。基本使用12345div#outer&gt;div.item*3$('#outer').owlCarousel({ ...})属性类型默认值作用itemsNumber3您想要在屏幕上看到的项目数。marginNumber0项目上的margin-right（px）。loopBooleanfalse无限循环。复制最后一个和第一个项目以获得循环幻觉。centerBooleanfalse中心项。适用于偶数个项目。mouseDragBooleantrue启用鼠标拖动。touchDragBooleantrue触摸拖动已启用pullDragBooleantrue舞台拉到边缘。freeDragBooleanfalse项目拉到边缘。stagePaddingNumber0在舞台上左右滑动（可以看到邻居）。mergeBooleanfalse合并项目。在项目内寻找data-merge =’{number}’。mergeFitBooleantrue如果屏幕小于项目值，则适合合并的项目。autoWidthBooleanfalse设置非网格内容。尝试在div上使用宽度样式。startPositionNumber/String0起始位置或URL哈希字符串，例如“ #id”。URLhashListenerBooleanfalse监听网址哈希更改。项上的数据哈希是必需的。navBooleanfalse显示下一个/上一个按钮。rewindBooleantrue到达边界后向后走。navTextArray['next','prev']允许HTML。navElementStringdiv单个方向导航链接的DOM元素类型。slideByNumber/String1导航幻灯片x。可以将“page”字符串设置为逐页滑动。slideTransitionString``您可以定义要使用的阶段的过渡，例如。线性的。dotsBooleantrue显示点导航。dotsEachNumber/Booleanfalse每个x项目显示点。dotsDataBooleanfalse由数据点内容使用。lazyLoadBooleanfalse延迟加载图像。data-src和data-src-retina用于高分辨率。如果元素不是，也将图像加载为背景内联样式lazyLoadEagerNumber0根据要预加载的项目，将图像预先正确地预加载到右侧（启用循环时向左加载）。autoplayBooleanfalse自动播放。autoplayTimeoutNumber5000自动播放间隔超时。autoplayHoverPauseBooleanfalse鼠标悬停时暂停。smartSpeedNumber250速度计算。fluidSpeedBooleanNumber速度计算autoplaySpeedNumber/Booleanfalse自动播放速度。navSpeedNumber/Booleanfalse导航速度。dotsSpeedBooleanNumber/Boolean分页速度。dragEndSpeedNumber/Booleanfalse拖动结束速度。callbacksBooleantrue启用回调事件。responsiveObjectempty object包含响应选项的对象。可以设置为false以删除响应功能。responsiveRefreshRateNumber200响应刷新率。responsiveBaseElementDOM elementwindow在任何DOM元素上设置。如果您关心无响应的浏览器（例如ie8），请在主包装器上使用它。这将防止疯狂调整大小videoBooleanfalse启用提取YouTube / Vimeo / Vzaar视频的功能。videoHeightNumber/Booleanfalse设置视频的高度。videoWidthNumber/Booleanfalse设置视频的宽度。animateOutString/BooleanfalseCSS3动画类。animateInString/Booleanfalse输入CSS3动画的类。fallbackEasingStringswing简化CSS2 $ .animate。infoFunctionfalse回调以获取基本信息（当前项目/页面/宽度）。信息功能的第二个参数是Owl DOM对象引用。nestedItemSelectorString/Classfalse如果猫头鹰项目深深嵌套在某些生成的内容中，请使用它。例如“ youritem”。在类名之前不要使用点号。itemElementStringdiv用于owl-item的DOM元素类型。stageElementStringdiv用于owl-item的DOM元素类型。navContainerString/Class/ID/Booleanfalse为nav设置自己的容器。dotsContainerString/Class/ID/Booleanfalse为nav设置自己的容器。checkVisibleBooleantrue如果您知道轮播总是可见的，则可以将checkVisibility设置为false，以防止昂贵的浏览器布局强制回流$ element.is（’：visible’）。OWL Carousel2官方文档 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"文档","slug":"文档","permalink":"https://www.thlg.ml/categories/%E6%96%87%E6%A1%A3/"},{"name":"jQuery","slug":"文档/jQuery","permalink":"https://www.thlg.ml/categories/%E6%96%87%E6%A1%A3/jQuery/"}],"tags":[{"name":"jQuery插件","slug":"jQuery插件","permalink":"https://www.thlg.ml/tags/jQuery%E6%8F%92%E4%BB%B6/"},{"name":"jQuery轮播图","slug":"jQuery轮播图","permalink":"https://www.thlg.ml/tags/jQuery%E8%BD%AE%E6%92%AD%E5%9B%BE/"},{"name":"OWL Carousel2","slug":"OWL-Carousel2","permalink":"https://www.thlg.ml/tags/OWL-Carousel2/"}]},{"title":"如何搭建React项目","slug":"如何搭建React项目","date":"2020-04-13T05:58:19.000Z","updated":"2020-07-05T06:58:56.417Z","comments":true,"path":"2020/04/13/如何搭建React项目/45936/","link":"","permalink":"https://www.thlg.ml/2020/04/13/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BAReact%E9%A1%B9%E7%9B%AE/45936/","excerpt":"React 是什么React 是一个声明式，高效且灵活的用于构建用户界面的 JavaScript 库。使用 React 可以将一些简短、独立的代码片段组合成复杂的 UI 界面，这些代码片段被称作“组件”。","text":"React 是什么React 是一个声明式，高效且灵活的用于构建用户界面的 JavaScript 库。使用 React 可以将一些简短、独立的代码片段组合成复杂的 UI 界面，这些代码片段被称作“组件”。React 项目搭建步骤安装 Node npm 并检查其版本12node -vnpm -v创建项目1npx create-react-app my-app打开项目123cd my-appnpm start document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"React","slug":"React","permalink":"https://www.thlg.ml/categories/React/"}],"tags":[{"name":"React","slug":"React","permalink":"https://www.thlg.ml/tags/React/"}]},{"title":"webpack（2）","slug":"webpack（2）","date":"2020-04-11T07:07:29.000Z","updated":"2020-04-21T10:06:06.991Z","comments":true,"path":"2020/04/11/webpack（2）/16618/","link":"","permalink":"https://www.thlg.ml/2020/04/11/webpack%EF%BC%882%EF%BC%89/16618/","excerpt":"如何配置 webpack 转化器， webpack 插件， webpack 开发服务器呢？","text":"如何配置 webpack 转化器， webpack 插件， webpack 开发服务器呢？webpack 转化器loader 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。例如：less、sass等loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。test 属性，用于标识出应该被对应的 loader 进行转换的某个或某些文件。use 属性，表示进行转换时，应该使用哪个 loader。例1 若要引用 css 样式，则要配置相应的配置安装 style-loader css-loader1npm install style-loader css-loader在 module 下配置12345678module: {// loladers 遵循module.rules规则 rules: [// 规则 {// 样式 test: /\\.css$/, use: ['style-loader', 'css-loader'] } ]}例2 引用图片安装 url-lolader file-loader1npm install url-lolader file-loader在 module 下配置12345678910111213module: {// loladers 遵循module.rules规则 rules: [// 规则 {// 图片 test: /\\.(gif|png|jpg)$/, use: [{ loader: 'url-loader', options: { limit: 500,// 限制文件大小 500kb } }] } ] }webpack 插件loader 被用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。插件接口功能极其强大，可以用来处理各种各样的任务。想要使用一个插件，你只需要 require() 它，然后把它添加到 plugins 数组中。多数插件可以通过选项(option)自定义。你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 new 操作符来创建它的一个实例。配置模板，合并文件安装 html-webpack-plugin1npm install html-webpack-plugin配置引入1const HtmlWebpackPlugin = require('html-webpack-plugin')在 plugins 下添加如下配置1234567891011new HtmlWebpackPlugin({ filename: 'index.html',// 打包后的文件名字 chunks: ['index'],// 引入的文件,对应 entry 中的名字 title: '我是指定的标题', template: './src/index.html', hash: true,// 防止浏览器缓存 minify: {//压缩 html \"\" '' collapseWhitespace: true,// 折叠构成文档tr中的文本节点的空白 removeAttributeQuotes: true,// 删除属性周围的引号 } })为了避免每次手动删除 dist 文件夹 安装 clean-webpack-plugin 插件安装1npm install clean-webpack-plugin配置引入1const { CleanWebpackPlugin } = require('clean-webpack-plugin')在 plugins 下添加如下配置1new CleanWebpackPlugin()// 删除 dist 文件夹如果有静态文件，该怎么输出到 public 文件夹呢？可以安装 copy-webpack-plugin安装1npm install copy-webpack-plugin配置1const CopyWebpackPlugin = require('copy-webpack-plugin')123456new CopyWebpackPlugin([// 静态资源输出 { from: path.relative(__dirname, 'src/assets/'), to: '../public' } ])webpack 开发服务器开发服务器的配置如下12345678devServer: {// 开发服务器 contentBase: path.join(__dirname, \"dist\"), //设置服务器访问的基本目录 host: 'localhost', //服务器地址，localhost port: 9000,//端口号，如果deserver的配置没问题，但是项目启动失败了，需要注意该端口号是否被占用 compress: true,//一切服务都启用 gzip 压缩 open: true,//浏览器自动打开 //hot:true,//webpack4之前的版本的配置：热更新，4以后被弱化不需要被配置会自动刷新}官网地址：https://www.webpackjs.com/configuration/dev-server/#devserver document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"webpack","slug":"webpack","permalink":"https://www.thlg.ml/categories/webpack/"}],"tags":[{"name":"webpack","slug":"webpack","permalink":"https://www.thlg.ml/tags/webpack/"},{"name":"开发服务器","slug":"开发服务器","permalink":"https://www.thlg.ml/tags/%E5%BC%80%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"}]},{"title":"webpack入门","slug":"webpack入门","date":"2020-03-30T04:36:41.000Z","updated":"2020-04-02T01:19:54.045Z","comments":true,"path":"2020/03/30/webpack入门/23985/","link":"","permalink":"https://www.thlg.ml/2020/03/30/webpack%E5%85%A5%E9%97%A8/23985/","excerpt":"webpack 是基于Node.js开发出来的一个前端项目构建工具。可以看做是模块打包机（bundler），通过分析项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Sass/less（css预处理器），TypeScript等），并将其打包为合适的格式以供浏览器使用。","text":"webpack 是基于Node.js开发出来的一个前端项目构建工具。可以看做是模块打包机（bundler），通过分析项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Sass/less（css预处理器），TypeScript等），并将其打包为合适的格式以供浏览器使用。为什么使用 webpack解决 JavaScript 和 CSS 的依赖问题文件加载顺序的问题会造成 css 没作用或 js 中变量和方法找不到性能优化文件合并文件压缩提高开发效率单元测试vebdor 前缀代码分析版本升级webpack 的作用将sass/less 等预编译的css语言转换成浏览器识别的css文件能够将多个预编译文件打包成一个文件打包image/styles/assets/scrips/等前端常用的文件搭建开发环境开启服务器监视文件改动，热部署。将单文件组件(*.vue)类型的文件，转化成浏览器识别的内容使用 webpack 搭建项目首先新建一个项目目录 domewebpack在终端进入该目录,初始化项目1npm init -y安装 webpack &amp; webpack-cli1npm i webpack webpack-cli -D创建文件在项目根目录下创建 src 文件夹（放置入口文件的地方，源码也放在这里）在项目根目录下创建 dist 文件夹（出口文件方式的地方）创建dist/index.html文件,包含id=root的元素，引入bundle.js123456789101112&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"root\"&gt;&lt;/div&gt; &lt;script src=\"bundle.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;创建src/index.js，里面给root元素设置innerhtml1document.getElementById('root').innerHTML='webpack项目'在项目根目录下创建 webpack.config.js 文件1234567891011121314151617181920let path = require('path')module.exports = { mode: 'development',// 发布版：production 开发板：development entry: {// 入口 entryKey: './src/index.js',// entryKey 是自定义的 }, // module: {// loladers 遵循module.rules规则 // }, // plugins: [ // ], output: {// 出口 filename: 'bundle.js',// 打包后的文件名 filename是固定的 path: path.resolve(__dirname, 'dist'),// 路径必须是绝对路径 }, // devServer: {// 开发服务器 // }}在 package.json 文件 scripts 下配置 \"biuild\": \"npx webpack --config webpack.config.js\"1234\"scripts\": { \"biuild\": \"npx webpack --config webpack.config.js\", \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\" }在终端运行打包命令1npm run build在浏览器打开 index.html 就可以看到 已经打印出 webpack项目 字体了。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"webpack","slug":"webpack","permalink":"https://www.thlg.ml/categories/webpack/"}],"tags":[{"name":"webpack","slug":"webpack","permalink":"https://www.thlg.ml/tags/webpack/"},{"name":"入门","slug":"入门","permalink":"https://www.thlg.ml/tags/%E5%85%A5%E9%97%A8/"}]},{"title":"文章置顶","slug":"文章置顶","date":"2020-03-26T04:59:02.000Z","updated":"2020-06-13T15:46:29.398Z","comments":true,"path":"2020/03/26/文章置顶/36265/","link":"","permalink":"https://www.thlg.ml/2020/03/26/%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6/36265/","excerpt":"有的时候，写好一篇文章，想要置顶，但 next 默认是按照时间来进行排序的，自己写的文章总不能靠修改创作时间来进行置顶吧。想要通过一个权重来进行排序，但苦苦没有办法，今天它来了","text":"有的时候，写好一篇文章，想要置顶，但 next 默认是按照时间来进行排序的，自己写的文章总不能靠修改创作时间来进行置顶吧。想要通过一个权重来进行排序，但苦苦没有办法，今天它来了设置文章置顶修改仓库配置，使其支持文章置顶功能卸载 hexo-generator-index1npm r hexo-generator-index安装 hexo-generator-index-pin-top1npm i hexo-generator-index-pin-top -S在文章中添加置顶信息添加 top12345678title: 文章置顶tags: - 标签categories: - 分类copyright: truedate: 2020-03-26 12:59:02top:10top 后数字越大，权限越高添加置顶标志打开：/bolg/themes/next/layout/_macro/post.swig 文件在&lt;span class='post-time'&gt; 标签下，插入以下代码：1234567 {% if post.top %} &lt;span class=\"post-meta-item-icon\"&gt; &lt;i class=\"fa fa-thumb-tack\"&gt;&lt;/i&gt; &lt;/span&gt; &lt;font color=red&gt;置顶&lt;/font&gt; &lt;span class=\"post-meta-divider\"&gt;|&lt;/span&gt;{% endif %} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://www.thlg.ml/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://www.thlg.ml/tags/Hexo/"},{"name":"next","slug":"next","permalink":"https://www.thlg.ml/tags/next/"},{"name":"文章置顶","slug":"文章置顶","permalink":"https://www.thlg.ml/tags/%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6/"}]},{"title":"第一篇博客","slug":"Hello","date":"2020-03-20T16:00:00.000Z","updated":"2020-07-05T06:56:35.085Z","comments":true,"path":"2020/03/21/Hello/16108/","link":"","permalink":"https://www.thlg.ml/2020/03/21/Hello/16108/","excerpt":"前言欢迎来到我的第一篇博客，在闲暇之余，搭了个博客，用来记录一下自己的学习过程，俗话说得好，好记性不如烂笔头。还记得上学的时候，老师经常对我们说这句话。虽然当时也（被迫）养成了这个习惯，但是还是很抵触的（懒啊~）。","text":"前言欢迎来到我的第一篇博客，在闲暇之余，搭了个博客，用来记录一下自己的学习过程，俗话说得好，好记性不如烂笔头。还记得上学的时候，老师经常对我们说这句话。虽然当时也（被迫）养成了这个习惯，但是还是很抵触的（懒啊~）。为什么要写博客积累 写博客主要是积累经验，记录生活中的收获，记录 把博客当做是日记，记录工作生活中的所见所闻，所思所想。交流 博客是一个很大的圈子。学习 在这里总会学到知识的，正如每天都会阅读。写博客当然得先了解一下 MarkdownMarkdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。好啦，这就是我的第一篇博客了，先记录到这里，我的博客之路将从这里出发！ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"杂记","slug":"杂记","permalink":"https://www.thlg.ml/categories/%E6%9D%82%E8%AE%B0/"}],"tags":[]}],"categories":[{"name":"JS","slug":"JS","permalink":"https://www.thlg.ml/categories/JS/"},{"name":"Vue","slug":"Vue","permalink":"https://www.thlg.ml/categories/Vue/"},{"name":"Echarts","slug":"Echarts","permalink":"https://www.thlg.ml/categories/Echarts/"},{"name":"HTTP","slug":"HTTP","permalink":"https://www.thlg.ml/categories/HTTP/"},{"name":"CSS","slug":"CSS","permalink":"https://www.thlg.ml/categories/CSS/"},{"name":"Net","slug":"Net","permalink":"https://www.thlg.ml/categories/Net/"},{"name":"Nginx","slug":"Nginx","permalink":"https://www.thlg.ml/categories/Nginx/"},{"name":"Node","slug":"Node","permalink":"https://www.thlg.ml/categories/Node/"},{"name":"linux","slug":"linux","permalink":"https://www.thlg.ml/categories/linux/"},{"name":"备忘录","slug":"备忘录","permalink":"https://www.thlg.ml/categories/%E5%A4%87%E5%BF%98%E5%BD%95/"},{"name":"Shopify","slug":"Shopify","permalink":"https://www.thlg.ml/categories/Shopify/"},{"name":"Koa","slug":"Koa","permalink":"https://www.thlg.ml/categories/Koa/"},{"name":"Linux","slug":"Linux","permalink":"https://www.thlg.ml/categories/Linux/"},{"name":"文档","slug":"文档","permalink":"https://www.thlg.ml/categories/%E6%96%87%E6%A1%A3/"},{"name":"Liquid","slug":"文档/Liquid","permalink":"https://www.thlg.ml/categories/%E6%96%87%E6%A1%A3/Liquid/"},{"name":"Redux","slug":"Redux","permalink":"https://www.thlg.ml/categories/Redux/"},{"name":"jQuery","slug":"文档/jQuery","permalink":"https://www.thlg.ml/categories/%E6%96%87%E6%A1%A3/jQuery/"},{"name":"React","slug":"React","permalink":"https://www.thlg.ml/categories/React/"},{"name":"webpack","slug":"webpack","permalink":"https://www.thlg.ml/categories/webpack/"},{"name":"Hexo","slug":"Hexo","permalink":"https://www.thlg.ml/categories/Hexo/"},{"name":"杂记","slug":"杂记","permalink":"https://www.thlg.ml/categories/%E6%9D%82%E8%AE%B0/"}],"tags":[{"name":"font","slug":"font","permalink":"https://www.thlg.ml/tags/font/"},{"name":"vue3","slug":"vue3","permalink":"https://www.thlg.ml/tags/vue3/"},{"name":"element-plus","slug":"element-plus","permalink":"https://www.thlg.ml/tags/element-plus/"},{"name":"tab切换","slug":"tab切换","permalink":"https://www.thlg.ml/tags/tab%E5%88%87%E6%8D%A2/"},{"name":"css","slug":"css","permalink":"https://www.thlg.ml/tags/css/"},{"name":"vue","slug":"vue","permalink":"https://www.thlg.ml/tags/vue/"},{"name":"echarts","slug":"echarts","permalink":"https://www.thlg.ml/tags/echarts/"},{"name":"vue-echarts","slug":"vue-echarts","permalink":"https://www.thlg.ml/tags/vue-echarts/"},{"name":"面试","slug":"面试","permalink":"https://www.thlg.ml/tags/%E9%9D%A2%E8%AF%95/"},{"name":"常用CSS","slug":"常用CSS","permalink":"https://www.thlg.ml/tags/%E5%B8%B8%E7%94%A8CSS/"},{"name":"chrome","slug":"chrome","permalink":"https://www.thlg.ml/tags/chrome/"},{"name":"nginx 反向代理","slug":"nginx-反向代理","permalink":"https://www.thlg.ml/tags/nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"},{"name":"node","slug":"node","permalink":"https://www.thlg.ml/tags/node/"},{"name":"moule","slug":"moule","permalink":"https://www.thlg.ml/tags/moule/"},{"name":"笔记","slug":"笔记","permalink":"https://www.thlg.ml/tags/%E7%AC%94%E8%AE%B0/"},{"name":"linux","slug":"linux","permalink":"https://www.thlg.ml/tags/linux/"},{"name":"pm2","slug":"pm2","permalink":"https://www.thlg.ml/tags/pm2/"},{"name":"守护进程","slug":"守护进程","permalink":"https://www.thlg.ml/tags/%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/"},{"name":"Git","slug":"Git","permalink":"https://www.thlg.ml/tags/Git/"},{"name":"Shopify 插件","slug":"Shopify-插件","permalink":"https://www.thlg.ml/tags/Shopify-%E6%8F%92%E4%BB%B6/"},{"name":"Shopify 公共应用","slug":"Shopify-公共应用","permalink":"https://www.thlg.ml/tags/Shopify-%E5%85%AC%E5%85%B1%E5%BA%94%E7%94%A8/"},{"name":"yarn","slug":"yarn","permalink":"https://www.thlg.ml/tags/yarn/"},{"name":"npm","slug":"npm","permalink":"https://www.thlg.ml/tags/npm/"},{"name":"文件转换","slug":"文件转换","permalink":"https://www.thlg.ml/tags/%E6%96%87%E4%BB%B6%E8%BD%AC%E6%8D%A2/"},{"name":"跨域","slug":"跨域","permalink":"https://www.thlg.ml/tags/%E8%B7%A8%E5%9F%9F/"},{"name":"reduce 函数","slug":"reduce-函数","permalink":"https://www.thlg.ml/tags/reduce-%E5%87%BD%E6%95%B0/"},{"name":"Nginx","slug":"Nginx","permalink":"https://www.thlg.ml/tags/Nginx/"},{"name":"nginx 代理","slug":"nginx-代理","permalink":"https://www.thlg.ml/tags/nginx-%E4%BB%A3%E7%90%86/"},{"name":"nginx 安装","slug":"nginx-安装","permalink":"https://www.thlg.ml/tags/nginx-%E5%AE%89%E8%A3%85/"},{"name":"nginx 命令","slug":"nginx-命令","permalink":"https://www.thlg.ml/tags/nginx-%E5%91%BD%E4%BB%A4/"},{"name":"获取IP","slug":"获取IP","permalink":"https://www.thlg.ml/tags/%E8%8E%B7%E5%8F%96IP/"},{"name":"本机IP","slug":"本机IP","permalink":"https://www.thlg.ml/tags/%E6%9C%AC%E6%9C%BAIP/"},{"name":"CSS","slug":"CSS","permalink":"https://www.thlg.ml/tags/CSS/"},{"name":"css布局","slug":"css布局","permalink":"https://www.thlg.ml/tags/css%E5%B8%83%E5%B1%80/"},{"name":"ssh","slug":"ssh","permalink":"https://www.thlg.ml/tags/ssh/"},{"name":"免密登录","slug":"免密登录","permalink":"https://www.thlg.ml/tags/%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/"},{"name":"koa-body","slug":"koa-body","permalink":"https://www.thlg.ml/tags/koa-body/"},{"name":"上传文件","slug":"上传文件","permalink":"https://www.thlg.ml/tags/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"},{"name":"koa","slug":"koa","permalink":"https://www.thlg.ml/tags/koa/"},{"name":"工具函数","slug":"工具函数","permalink":"https://www.thlg.ml/tags/%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0/"},{"name":"js读取本地文件","slug":"js读取本地文件","permalink":"https://www.thlg.ml/tags/js%E8%AF%BB%E5%8F%96%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6/"},{"name":"读取文件","slug":"读取文件","permalink":"https://www.thlg.ml/tags/%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6/"},{"name":"算法","slug":"算法","permalink":"https://www.thlg.ml/tags/%E7%AE%97%E6%B3%95/"},{"name":"axios","slug":"axios","permalink":"https://www.thlg.ml/tags/axios/"},{"name":"elemen-ui","slug":"elemen-ui","permalink":"https://www.thlg.ml/tags/elemen-ui/"},{"name":"导航","slug":"导航","permalink":"https://www.thlg.ml/tags/%E5%AF%BC%E8%88%AA/"},{"name":"开发技巧","slug":"开发技巧","permalink":"https://www.thlg.ml/tags/%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/"},{"name":"Shopify本地开发","slug":"Shopify本地开发","permalink":"https://www.thlg.ml/tags/Shopify%E6%9C%AC%E5%9C%B0%E5%BC%80%E5%8F%91/"},{"name":"Shopify","slug":"Shopify","permalink":"https://www.thlg.ml/tags/Shopify/"},{"name":"Liquid","slug":"Liquid","permalink":"https://www.thlg.ml/tags/Liquid/"},{"name":"shopify","slug":"shopify","permalink":"https://www.thlg.ml/tags/shopify/"},{"name":"next.js","slug":"next-js","permalink":"https://www.thlg.ml/tags/next-js/"},{"name":"node.js","slug":"node-js","permalink":"https://www.thlg.ml/tags/node-js/"},{"name":"Redux","slug":"Redux","permalink":"https://www.thlg.ml/tags/Redux/"},{"name":"jQuery插件","slug":"jQuery插件","permalink":"https://www.thlg.ml/tags/jQuery%E6%8F%92%E4%BB%B6/"},{"name":"jQuery轮播图","slug":"jQuery轮播图","permalink":"https://www.thlg.ml/tags/jQuery%E8%BD%AE%E6%92%AD%E5%9B%BE/"},{"name":"OWL Carousel2","slug":"OWL-Carousel2","permalink":"https://www.thlg.ml/tags/OWL-Carousel2/"},{"name":"React","slug":"React","permalink":"https://www.thlg.ml/tags/React/"},{"name":"webpack","slug":"webpack","permalink":"https://www.thlg.ml/tags/webpack/"},{"name":"开发服务器","slug":"开发服务器","permalink":"https://www.thlg.ml/tags/%E5%BC%80%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"name":"入门","slug":"入门","permalink":"https://www.thlg.ml/tags/%E5%85%A5%E9%97%A8/"},{"name":"Hexo","slug":"Hexo","permalink":"https://www.thlg.ml/tags/Hexo/"},{"name":"next","slug":"next","permalink":"https://www.thlg.ml/tags/next/"},{"name":"文章置顶","slug":"文章置顶","permalink":"https://www.thlg.ml/tags/%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6/"}]}