{"meta":{"title":"天火流光","subtitle":"天火流光的小屋","description":"一个人静静坐在电脑面前写代码的感觉，那是什么感觉?那是武林高手闭关修炼的感觉。","author":"天火流光","url":"https://GuoChen-thlg.github.io","root":"/"},"pages":[{"title":"404","date":"2020-03-26T04:23:18.437Z","updated":"2020-03-26T04:23:18.437Z","comments":true,"path":"/404.html","permalink":"https://guochen-thlg.github.io/404.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"关于","date":"2020-03-28T09:02:52.139Z","updated":"2020-03-28T09:02:52.139Z","comments":false,"path":"about/index.html","permalink":"https://guochen-thlg.github.io/about/index.html","excerpt":"","text":"这个人很懒，什么都没有留下这个人很懒，但还是留下了点东西 时间一晃20多年就过去了，21岁的年纪，也许是人一生中最具挑战性的时候，六七岁的年纪，还能够无忧无虑的生活着，不用去烦恼那些是是非非，到了三四十岁，也许人生就开始变的平淡了（emmm,拒绝平淡，从我做起）。 不管如何，在现在这个年龄阶段，对任何一个人来说，都是非常重要的，在 生涯彩虹图 中，现在正处于 人的一生中的 建立阶段 正是我们要确立自己人生观，世界观，价值观的时候。所以现在应该积极地充实自己，为自己的未来打下结实的基础。 小时候不知是什么原因，对发明创造很感兴趣.因为当时知道的少，就觉得自己的方案可行，但随着时间的慢慢推延，现在想想的话，（原谅我笑了）。但是吧，现在直到踏入这一行以来，才发现，我与我小时的梦想也不远啊，搬代码也很快乐啊 :-） 现在有了这个 blog ,就可以记录一下自己的单点滴滴，为自己留下一点回忆，留下自己学习的经历记录自己走过的历程。加油吧！ 每一天~不要被生活所打倒，我还活着 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"分类","date":"2020-03-26T04:23:29.605Z","updated":"2020-03-26T04:23:29.605Z","comments":false,"path":"categories/index.html","permalink":"https://guochen-thlg.github.io/categories/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"标签","date":"2020-03-26T04:23:35.518Z","updated":"2020-03-26T04:23:35.518Z","comments":false,"path":"tags/index.html","permalink":"https://guochen-thlg.github.io/tags/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"相册","date":"2020-03-28T09:04:40.226Z","updated":"2020-03-28T09:04:40.226Z","comments":false,"path":"photos/index.html","permalink":"https://guochen-thlg.github.io/photos/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"个人简历","date":"2020-03-28T08:11:17.000Z","updated":"2020-03-28T11:29:52.264Z","comments":false,"path":"vita/index.html","permalink":"https://guochen-thlg.github.io/vita/index.html","excerpt":"","text":"个人资料姓名： GJT邮箱： gjt6636@vip.qq.com性别： 男求职意向： 前端开发工程师年龄： 22技能水平工作经历项目经验 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"}],"posts":[{"title":"浏览器如何获取本机ip地址","slug":"浏览器如何获取本机公网ip地址","date":"2021-02-20T07:19:53.000Z","updated":"2021-02-20T07:39:16.475Z","comments":true,"path":"2021/02/20/浏览器如何获取本机公网ip地址/30504/","link":"","permalink":"https://guochen-thlg.github.io/2021/02/20/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E6%9C%AC%E6%9C%BA%E5%85%AC%E7%BD%91ip%E5%9C%B0%E5%9D%80/30504/","excerpt":"浏览器如何获取本机的 IP 地址呢,方案有很多，简单的可以去 (https://ip.cn/)[https://ip.cn/] 获取本机 IP但有时我们要在业务中拿到客户端 IP,该怎么办呢,也有相应的解决方案,例如一些三方接口：(搜狐)[http://pv.sohu.com/cityjson]、 (淘宝)[https://www.taobao.com/help/getip.php]","text":"浏览器如何获取本机的 IP 地址呢,方案有很多，简单的可以去 (https://ip.cn/)[https://ip.cn/] 获取本机 IP但有时我们要在业务中拿到客户端 IP,该怎么办呢,也有相应的解决方案,例如一些三方接口：(搜狐)[http://pv.sohu.com/cityjson]、 (淘宝)[https://www.taobao.com/help/getip.php]接下来，我们使用 WebRTC API 来获取本机 IP具体操作如下：123456789101112131415161718192021222324252627282930313233343536373839function IPQuery(backcall) { // 兼容性处理 const MyPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection // 创建实例 const pc = new MyPeerConnection({ // 连接 STUN协议服务器 iceServers: [{ url: 'stun:stun.l.google.com:19302' }], }) let localIPs = { '0.0.0.0': 1 } let noop = () =&gt; {} let ipRegex = /([0-9]{1,3}(\\.[0-9]{1,3}){3}|[a-f0-9]{1,4}(:[a-f0-9]{1,4}){7})/g function ipIterate(ip) { if (!localIPs[ip]) backcall(ip) localIPs[ip] = true } // 创建数据信道 pc.createDataChannel('') pc.createOffer().then(function (sdp) { sdp.sdp.split('\\n').forEach(function (line) { if (line.indexOf('candidate') &lt; 0) return; line.match(ipRegex).forEach(ipIterate) }) pc.setLocalDescription(sdp, noop, noop) }) // 聆听候选事件 pc.onicecandidate = function (ice) { console.log(ice) if (!ice ||!ice.candidate || !ice.candidate.candidate || !ice.candidate.candidate.match(ipRegex)) return; ice.candidate.candidate.match(ipRegex).forEach(ipIterate) }}IPQuery(ip =&gt; { console.log(ip) // xxx.xxx.xxx.xxx}) document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"JS","slug":"JS","permalink":"https://guochen-thlg.github.io/categories/JS/"}],"tags":[{"name":"获取IP","slug":"获取IP","permalink":"https://guochen-thlg.github.io/tags/%E8%8E%B7%E5%8F%96IP/"},{"name":"本机IP","slug":"本机IP","permalink":"https://guochen-thlg.github.io/tags/%E6%9C%AC%E6%9C%BAIP/"}]},{"title":"如何使div垂直水平居中","slug":"如何使div垂直水平居中","date":"2021-02-19T06:47:16.000Z","updated":"2021-02-19T06:58:44.686Z","comments":true,"path":"2021/02/19/如何使div垂直水平居中/9230/","link":"","permalink":"https://guochen-thlg.github.io/2021/02/19/%E5%A6%82%E4%BD%95%E4%BD%BFdiv%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD/9230/","excerpt":"使 div 垂直水平居中","text":"使 div 垂直水平居中12345678910111213141516&lt;style&gt; .parent { width: 600px; height: 600px; } .child { width: 200px; height: 200px; background-color: rebeccapurple; }&lt;/style&gt;...&lt;div class=\"parent\"&gt; &lt;div class=\"child\"&gt;&lt;/div&gt;&lt;/div&gt;...方案一123456.child { position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%);}方案二12345.parent { display: flex; align-items: center; justify-content: center;}方案三1234567.parent { display: grid;}.child { align-self: center; justify-self: center;}方案四1234567891011121314.parent { text-align: center;}.parent::before { content: ''; display: inline-block; width: 0; height: 100%; vertical-align: middle;}.child { display: inline-block; vertical-align: middle;} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"CSS","slug":"CSS","permalink":"https://guochen-thlg.github.io/categories/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://guochen-thlg.github.io/tags/CSS/"},{"name":"css布局","slug":"css布局","permalink":"https://guochen-thlg.github.io/tags/css%E5%B8%83%E5%B1%80/"}]},{"title":"ssh远程登录服务器VSCode调试代码","slug":"ssh远程登录服务器VSCode调试代码","date":"2021-01-28T01:19:09.000Z","updated":"2021-01-28T01:38:42.362Z","comments":true,"path":"2021/01/28/ssh远程登录服务器VSCode调试代码/14742/","link":"","permalink":"https://guochen-thlg.github.io/2021/01/28/ssh%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E6%9C%8D%E5%8A%A1%E5%99%A8VSCode%E8%B0%83%E8%AF%95%E4%BB%A3%E7%A0%81/14742/","excerpt":"我们在开发中有时会遇到要使用公网进行开发，虽然可以使用一下映射工具 如 ngrok 等，但是，我就想用服务器，那在服务器上如何进行开发调试呢？","text":"我们在开发中有时会遇到要使用公网进行开发，虽然可以使用一下映射工具 如 ngrok 等，但是，我就想用服务器，那在服务器上如何进行开发调试呢？这里我使用 Romote SSH 插件。安装插件打开VSCode ，在插件商店中搜索 Romote SSH 即可安装生成秘钥公钥打开命令窗口（win+R cmd）输入1ssh-keygen之后一路回车即可，当然，你也可以自定义文件名以及加密密码会生成两个文件 id_rsa (秘钥) id_rsa.pub (公钥)，我们将公钥的内容加到服务器 ~/.ssh/authorized_keys 文件中设置权限 命令如下12chmod 700 ~/.sshchmod 600 ~/.ssh/authorized_keys​建立连接之后打开 Romote SSH 插件1ssh root@***.**.**.**设置配置文件12345Host 自定义 HostName IP User root 用户名 Port 22 默认 22 IdentityFile \"C:\\Users\\***\\.ssh\\id_rsa\" 秘钥绝对路径之后就可以快乐的免密连接了 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Linux","slug":"Linux","permalink":"https://guochen-thlg.github.io/categories/Linux/"}],"tags":[{"name":"ssh","slug":"ssh","permalink":"https://guochen-thlg.github.io/tags/ssh/"},{"name":"免密登录","slug":"免密登录","permalink":"https://guochen-thlg.github.io/tags/%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/"}]},{"title":"koa-body实现上传文件 分别保存自定义文件夹","slug":"koa-body上传文件","date":"2021-01-22T13:53:58.000Z","updated":"2021-01-28T01:21:10.913Z","comments":true,"path":"2021/01/22/koa-body上传文件/4437/","link":"","permalink":"https://guochen-thlg.github.io/2021/01/22/koa-body%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/4437/","excerpt":"如何使用ndoe实现上传文件，在使用koa 开发过程中，使用koa-body 不仅可以实现上传文件，还可以解析 POST 参数","text":"如何使用ndoe实现上传文件，在使用koa 开发过程中，使用koa-body 不仅可以实现上传文件，还可以解析 POST 参数配置如下1234567891011121314151617181920212223242526272829app.use( koaBody({ multipart: true, // 支持上传文件 patchNode: true, formidable: { uploadDir: path.join(__dirname, 'uploads/'), // 上传文件路径 keepExtensi· ons: true, // 保持文件后缀 maxFieldsSize: 5 * 1024 * 1024, // 文件上传大小 onFileBegin: (name, file) =&gt; { // 文件上传前的设置 let shop = name.split('|')[0] let type = name.split('|')[1] let ext = file.name.split('.') // 判断保存路径是否存在，不存在则创建文件夹 let dir = path.join(__dirname, `uploads/${shop}`) checkDirExist(dir) dir = path.join(__dirname, `uploads/${shop}/${type}`) checkDirExist(dir) // 图片保存的实际路径 file.path = `${dir}\\\\${file.name}` }, }, }))function checkDirExist (dir) { if (!fs.existsSync(dir)) { fs.mkdirSync(dir) }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Koa","slug":"Koa","permalink":"https://guochen-thlg.github.io/categories/Koa/"}],"tags":[{"name":"node","slug":"node","permalink":"https://guochen-thlg.github.io/tags/node/"},{"name":"Koa-body","slug":"Koa-body","permalink":"https://guochen-thlg.github.io/tags/Koa-body/"},{"name":"上传文件","slug":"上传文件","permalink":"https://guochen-thlg.github.io/tags/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"}]},{"title":"koa-body POST 方式出现 415 unsupported media type","slug":"koa-body415","date":"2021-01-22T13:44:46.000Z","updated":"2021-01-28T01:21:19.876Z","comments":true,"path":"2021/01/22/koa-body415/41372/","link":"","permalink":"https://guochen-thlg.github.io/2021/01/22/koa-body415/41372/","excerpt":"使用 Koa 写了个插件，要上传文件时 使用了 koa-body 在 POST 提交参数时，总是报错 415 unsupported media type 苦思不得其解在痛苦了半天的结果下，最终找到了问题所在","text":"使用 Koa 写了个插件，要上传文件时 使用了 koa-body 在 POST 提交参数时，总是报错 415 unsupported media type 苦思不得其解在痛苦了半天的结果下，最终找到了问题所在主要是开启了 encoding: 'gzip' 这个配置，注释后发现可以运行，完美解决。1234567app.use( koaBody({ multipart: true, // 支持上传文件 patchNode: true, // encoding: 'gzip', })) document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"koa","slug":"koa","permalink":"https://guochen-thlg.github.io/categories/koa/"}],"tags":[{"name":"node","slug":"node","permalink":"https://guochen-thlg.github.io/tags/node/"},{"name":"koa-body","slug":"koa-body","permalink":"https://guochen-thlg.github.io/tags/koa-body/"},{"name":"koa","slug":"koa","permalink":"https://guochen-thlg.github.io/tags/koa/"}]},{"title":"JavaScript函数工具整理","slug":"JavaScript函数工具整理","date":"2021-01-17T08:58:16.000Z","updated":"2021-01-28T01:20:55.135Z","comments":true,"path":"2021/01/17/JavaScript函数工具整理/43110/","link":"","permalink":"https://guochen-thlg.github.io/2021/01/17/JavaScript%E5%87%BD%E6%95%B0%E5%B7%A5%E5%85%B7%E6%95%B4%E7%90%86/43110/","excerpt":"日常函数总结","text":"日常函数总结修改当前历史记录静默修改浏览器 URL 不刷新页面1window.history.replaceState({ path: 'url' }, '', url)解析 URL 参数1234567891011function analysisURL(string) { return JSON.parse( `{ ${string .slice(string.indexOf('?') + 1) .split('&amp;') .map( o =&gt; `\"${o.slice(0, o.indexOf('='))}\":\"${o.slice(o.indexOf('=') + 1)}\"` ) .join(',')}}` )} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"JS","slug":"JS","permalink":"https://guochen-thlg.github.io/categories/JS/"}],"tags":[{"name":"工具函数","slug":"工具函数","permalink":"https://guochen-thlg.github.io/tags/%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0/"}]},{"title":"浏览器如何读取本地文件","slug":"浏览器如何读取本地文件","date":"2021-01-12T06:24:27.000Z","updated":"2021-01-12T06:42:29.987Z","comments":true,"path":"2021/01/12/浏览器如何读取本地文件/20477/","link":"","permalink":"https://guochen-thlg.github.io/2021/01/12/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A6%82%E4%BD%95%E8%AF%BB%E5%8F%96%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6/20477/","excerpt":"在业务需求上，不免需要用户上传文件，我们来操作一些内容，但如何在前端代码中来完成这部分需求呢？","text":"在业务需求上，不免需要用户上传文件，我们来操作一些内容，但如何在前端代码中来完成这部分需求呢？封装函数123456789101112131415161718192021222324252627282930313233// 文件转为内容文本 function readAsText(file, callback) { let reader = new FileReader() reader.readAsText(file) reader.onload = function(e) { callback(this.result) } reader.onerror = function(e) { callback(null, e) }}// 文件转为地址function readAsDataURL(file, callback) { let reader = new FileReader() reader.readAsDataURL(file) reader.onload = function(e) { callback(this.reader) } reader.onerror = function(e) { callback(null, e) }}// 文件转为二进制function readAsBinaryString(file, callback) { let reader = new FileReader() reader.readAsBinaryString(file) reader.onload = function(e) { callback(this.reader) } reader.onerror = function(e) { callback(null, e) }}当然 有时候也需要将文件Base64 编码转为文件类型123456789101112function Base64ToFile(dataURL, fileName = 'file') { let arr = dataURL.split(',') let mime = arr[0].match(/:(.*?);/)[1] let suffix = mime.split('/')[1] let bstr = atob(arr[1]) let n = bstr.length let u8arr = new Uint8Array(n) while (n--) { u8arr[n] = bstr.charCodeAt(n) } return new File([u8arr], `${fileName}.${suffix}`, { type: mime })} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"JS","slug":"JS","permalink":"https://guochen-thlg.github.io/categories/JS/"}],"tags":[{"name":"js读取本地文件","slug":"js读取本地文件","permalink":"https://guochen-thlg.github.io/tags/js%E8%AF%BB%E5%8F%96%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6/"},{"name":"读取文件","slug":"读取文件","permalink":"https://guochen-thlg.github.io/tags/%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6/"}]},{"title":"扁平数组与树状结构的转换","slug":"扁平数组与树状结构的转换","date":"2020-09-22T11:36:01.000Z","updated":"2020-09-22T11:56:32.720Z","comments":true,"path":"2020/09/22/扁平数组与树状结构的转换/52305/","link":"","permalink":"https://guochen-thlg.github.io/2020/09/22/%E6%89%81%E5%B9%B3%E6%95%B0%E7%BB%84%E4%B8%8E%E6%A0%91%E7%8A%B6%E7%BB%93%E6%9E%84%E7%9A%84%E8%BD%AC%E6%8D%A2/52305/","excerpt":"我们在使用后台传过来的数据的时候，有时候我们会得到树状结构的数据，虽然有时候，后端会处理掉，但，毕竟我们也可以在前端给它处理一下，一方面也锻炼一下脑子，天天写页面都没思考能力了。","text":"我们在使用后台传过来的数据的时候，有时候我们会得到树状结构的数据，虽然有时候，后端会处理掉，但，毕竟我们也可以在前端给它处理一下，一方面也锻炼一下脑子，天天写页面都没思考能力了。树状结构转为扁平数组12345678910111213141516171819202122232425262728293031323334353637383940414243let tree = { id: '1', pid: '7', name: 'aaaaa', children: [ { id: '2', pid: '1', name: 'bbbbbbb', children: [ { id: '6', pid: '2', name: 'ccccc', children: [{ id: '9', pid: '6', name: 'dddd' }], }, ], }, ],}const toArray = (tree, children) =&gt; { let arr = [] const a = ls =&gt; { if (ls instanceof Array) { ls.forEach(o =&gt; { let c = o[children] delete o[children] arr.push(o) a(c) }) } } tree instanceof Array ? a(tree) : a([tree]) return arr}toArray(tree, 'children')/* [ { id: '1', pid: '7', name: 'aaaaa' }, { id: '2', pid: '1', name: 'bbbbbbb' }, { id: '6', pid: '2', name: 'ccccc' }, { id: '9', pid: '6', name: 'dddd' }] */扁平数组转为树状结构1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253let array = [ { id: '1', pid: '7', name: 'aaaaa' }, { id: '2', pid: '1', name: 'bbbbbbb' }, { id: '6', pid: '2', name: 'ccccc' }, { id: '9', pid: '6', name: 'dddd' }] const arrayToTree = (arr, id, pid) =&gt; { if (!id || id == '') { return [] } if (arr instanceof Array) { let tree = [] let treeMap = {} arr.forEach(o =&gt; { treeMap[o[id]] = o }) arr.forEach(o =&gt; { let parent = treeMap[o[pid]] if (parent &amp;&amp; o[id] != o[pid]) { if (!parent.children) { parent.children = [] } parent.children.push(o) } else { tree.push(o) } }) return tree } else { return [arr] }}arrayToTree(array, 'id', 'pid')/* { id: '1', pid: '7', name: 'aaaaa', children: [ { id: '2', pid: '1', name: 'bbbbbbb', children: [ { id: '6', pid: '2', name: 'ccccc', children: [{ id: '9', pid: '6', name: 'dddd' }], }, ], }, ],} */在这里记录是为了以防用的时候找不到，这脑子😝，万一忘了呢 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"JS","slug":"JS","permalink":"https://guochen-thlg.github.io/categories/JS/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://guochen-thlg.github.io/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"axios 取消重复请求","slug":"axios-取消重复请求","date":"2020-08-15T13:26:12.000Z","updated":"2020-08-17T13:19:03.374Z","comments":true,"path":"2020/08/15/axios-取消重复请求/13208/","link":"","permalink":"https://guochen-thlg.github.io/2020/08/15/axios-%E5%8F%96%E6%B6%88%E9%87%8D%E5%A4%8D%E8%AF%B7%E6%B1%82/13208/","excerpt":"在开发单页面应用中，我们在使用 axios 做请求的时候，会遇到一些很不好的体验，当我们切换路由的时候，如果上个页面的请求还没结束，那么这个请求依旧会执行完，我们能不能在不需要的时候就取消掉你？","text":"在开发单页面应用中，我们在使用 axios 做请求的时候，会遇到一些很不好的体验，当我们切换路由的时候，如果上个页面的请求还没结束，那么这个请求依旧会执行完，我们能不能在不需要的时候就取消掉你？那么刚刚好， axios 可以实现这个需求。有两种方法可以实现取消请求方法一官方示例123456789101112131415161718192021222324252627const CancelToken = axios.CancelTokenconst source = CancelToken.source()axios .get('/user/12345', { cancelToken: source.token, }) .catch(function (thrown) { if (axios.isCancel(thrown)) { console.log('Request canceled', thrown.message) } else { // 处理错误 } })axios.post( '/user/12345', { name: 'new name', }, { cancelToken: source.token, })// 取消请求（message 参数是可选的）source.cancel('Operation canceled by the user.')方法二官方示例123456789101112const CancelToken = axios.CancelTokenlet cancelaxios.get('/user/12345', { cancelToken: new CancelToken(function executor(c) { // executor 函数接收一个 cancel 函数作为参数 cancel = c }),})// cancel the requestcancel()我们这里使用第二种方式我们定义三个方法:addPending1234567891011121314151617181920212223const pending = new Map()/** * @description 添加请求 * * @param {Object} config */function addPending(config) { // 唯一标识 let flag = config.flag || false if (flag) { config.cancelToken = new axios.CancelToken(cancel =&gt; { if (!pending.has(flag)) { pending.set(flag, cancel) } else { const oldCancel = pending.get(flag) oldCancel() pending.set(flag, cancel) } }) } return config}removePending1234567891011/** * @description 移除请求 * * @param {Object} config */function removePending(config) { let flag = config.flag || false if (flag &amp;&amp; pending.has(flag)) { pending.delete(flag) }}clearPending 用于在路由跳转时，清空所有请求12345678910/** * @description 清空所有请求 * */function clearPending() { for (const [flag, oldCancel] of pending) { oldCancel() } pending.clear()}我们在请求体中，添加 flag 属性，来识别每一个唯一的 API12345678export function text(data) { return axios({ flag: 'text', url: 'https://easydoc.xyz/mock/NX1XF1Cx/p/29538143/0I92pgNB', method: 'GET', data, })}这样我们的函数就写好了，只要在请求拦截中只用就可以实现了123456789101112// 请求拦截request.interceptors.request.use( function(config) { // ... return addPending(config) }, function(error) { // 请求错误时的处理 // ... return Promise.reject(error) })12345678910111213// 响应拦截request.interceptors.response.use( function(response) { // 请求成功，移除 removePending(response.config) // ... return response.data }, function(error) { // ... return Promise.reject(error) }) document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Vue","slug":"Vue","permalink":"https://guochen-thlg.github.io/categories/Vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://guochen-thlg.github.io/tags/vue/"},{"name":"axios","slug":"axios","permalink":"https://guochen-thlg.github.io/tags/axios/"}]},{"title":"vue 使用 elemen UI 导航菜单所遇到的问题","slug":"vue-使用-elemen-UI-导航菜单所遇到的问题","date":"2020-08-14T11:24:48.000Z","updated":"2020-08-15T13:28:44.293Z","comments":true,"path":"2020/08/14/vue-使用-elemen-UI-导航菜单所遇到的问题/23181/","link":"","permalink":"https://guochen-thlg.github.io/2020/08/14/vue-%E4%BD%BF%E7%94%A8-elemen-UI-%E5%AF%BC%E8%88%AA%E8%8F%9C%E5%8D%95%E6%89%80%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/23181/","excerpt":"我们常常在开发vue 项目中使用 elemen UI 开结合开发，但在单页面应用中，随着用户的操作而改变的状态，我们常常使用 VueX 来做状态管理，但是，如果用户刷新页面，之前的状态都会消失，那么，导航该如何准确给当前页面的导航按钮添加选中的样式呢？","text":"我们常常在开发vue 项目中使用 elemen UI 开结合开发，但在单页面应用中，随着用户的操作而改变的状态，我们常常使用 VueX 来做状态管理，但是，如果用户刷新页面，之前的状态都会消失，那么，导航该如何准确给当前页面的导航按钮添加选中的样式呢？直接上代码1234567&lt;template&gt; &lt;el-menu router mode=\"horizontal\" @select=\"selectMenu\"&gt; &lt;template v-for=\"(item,index) in navlist\"&gt; &lt;el-menu-item :index=\"item.path\" :key=\"index\" disabled&gt;{{item.name}}&lt;/el-menu-item&gt; &lt;/template&gt; &lt;/el-menu&gt;&lt;/template&gt;这样写的问题是，当用户刷新页面时，当前页面对应的导航并不会被添加选中样式，那该怎么办呢？1234567&lt;template&gt; &lt;el-menu router :default-active=\"$route.path\" mode=\"horizontal\" @select=\"selectMenu\"&gt; &lt;template v-for=\"(item,index) in navlist\"&gt; &lt;el-menu-item :index=\"item.path\" :key=\"index\" disabled&gt;{{item.name}}&lt;/el-menu-item&gt; &lt;/template&gt; &lt;/el-menu&gt;&lt;/template&gt;当我们这样写，将当前路径时时绑定到导航上，就可以完美实现了. document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Vue","slug":"Vue","permalink":"https://guochen-thlg.github.io/categories/Vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://guochen-thlg.github.io/tags/vue/"},{"name":"elemen-ui","slug":"elemen-ui","permalink":"https://guochen-thlg.github.io/tags/elemen-ui/"},{"name":"导航","slug":"导航","permalink":"https://guochen-thlg.github.io/tags/%E5%AF%BC%E8%88%AA/"}]},{"title":"教你如何在本地开发 Shopify 主题","slug":"教你如何在本地开发-Shopify-主题","date":"2020-07-05T05:51:43.000Z","updated":"2020-07-06T13:42:59.034Z","comments":true,"path":"2020/07/05/教你如何在本地开发-Shopify-主题/37643/","link":"","permalink":"https://guochen-thlg.github.io/2020/07/05/%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E5%9C%A8%E6%9C%AC%E5%9C%B0%E5%BC%80%E5%8F%91-Shopify-%E4%B8%BB%E9%A2%98/37643/","excerpt":"我们在开发 Shopify 主题的时候，常常是在官方的线上编辑器上进行修改代码的，这样的编辑效果不是很好（不能格式化、不能智能提示），而且对于我们想使用自己喜欢的编辑器来编辑的人来说，很是不舒服，那么有没有什么方法可以实现在本地编辑器上进行开发呢？接下来就让我们在本地配置一下环境。","text":"我们在开发 Shopify 主题的时候，常常是在官方的线上编辑器上进行修改代码的，这样的编辑效果不是很好（不能格式化、不能智能提示），而且对于我们想使用自己喜欢的编辑器来编辑的人来说，很是不舒服，那么有没有什么方法可以实现在本地编辑器上进行开发呢？接下来就让我们在本地配置一下环境。下载 Shopify 主题套件win10-64如果下载速度较慢，也可以下载我百度网盘里的https://pan.baidu.com/s/1YMQ2adpGaBpiwDCYCvoPSA提取码：pt8g下载完成后，创建一个 Theme Kit 文件夹，将程序复制到文件夹中，然后将路径（D:\\DevelopmentTool\\Theme Kit）添加到 环境变量（Path）中完成后 打开 cmd.exe 并输入 theme创建自定义 应用程序创建一个自定义应用程序 设置 Theme templates and theme assets 为 Read and write得到 密码后 ，复制下来，保存到一个文件里下载主题模板查看模板ID1theme new --password=[your-password] --store=[your-store.myshopify.com] --name=[theme name]记住主题 ID创建一个文件夹，这将是存放你主题文件的项目模板，然后执行1theme get -p=[your-password] -s=[you-store.myshopify.com] -t=[your-theme-id]常用命令下载配置文件中的主题1theme download打开将在浏览器中打开主题的预览页面，并打印出URL供您参考1theme openWatch将启动一个过程，该过程将监视您的目录中的更改并将其上载到Shopify。任何更改将被记录到终端，并且上传状态也将被记录。只需输入ctrl + C即可停止该程序1theme watch document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Shopify","slug":"Shopify","permalink":"https://guochen-thlg.github.io/categories/Shopify/"}],"tags":[{"name":"开发技巧","slug":"开发技巧","permalink":"https://guochen-thlg.github.io/tags/%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/"},{"name":"Shopify本地开发","slug":"Shopify本地开发","permalink":"https://guochen-thlg.github.io/tags/Shopify%E6%9C%AC%E5%9C%B0%E5%BC%80%E5%8F%91/"}]},{"title":"Liquid","slug":"Liquid","date":"2020-06-16T11:01:48.000Z","updated":"2020-06-16T11:15:23.139Z","comments":true,"path":"2020/06/16/Liquid/22647/","link":"","permalink":"https://guochen-thlg.github.io/2020/06/16/Liquid/22647/","excerpt":"开发 Shopify 商店，首先要熟悉 Liquid 的语法。Liquid 由 Shopify 创造并用 Ruby 实现。","text":"开发 Shopify 商店，首先要熟悉 Liquid 的语法。Liquid 由 Shopify 创造并用 Ruby 实现。基础操作符==相等!=不相等&gt;大于&lt;小于&gt;=大于或等于&lt;=小于或等于or逻辑或and逻辑与数据类型SttingNumberBootlean除了 nil false 其余全都为 真NilArray标签注释123{% comment %}{% endcomment %}控制流if123{% if true %}{% endif %}如果为真就执行unless123{% unless %}{% endunless %}若为假就执行elsif / else123{% elsif %}{% else %}否则 如果否则case/when123456789{% case 变量 %}...{% when '' %}...{% when '' %}...{% else %}...{% endcase %}类似于 switch迭代/循环break循环过程中若干遇到 break 标记（tag）即停止循环continue循环过程中若遇到 continue 标记（tag）则跳出当前循环limit limit:5限定循环执行的次数offset offsetv:5从指定索引号开始执行循环。range (1..5)定义循环执行的范围。可利用数字或变量来定义此执行范围1234567{% for i in (3..5) %} {{ i }}{% endfor %}{% assign num = 4 %}{% for i in (1..num) %} {{ i }}{% endfor %}reversed反转循环的执行顺序。注意和 reverse 过滤器（filter）的拼写是不同的1{% cycle 'one', 'two', 'three' %}将 cycle 代码块放入 for 循环中 每次执行都会输出参数中的下一个tablerow生成一个 HTML 表格。必须用和这两个 HTML 标签将其包裹起来cols 定义表格应当有多少列limit 在执行到指定的脚标（index）之后退出 tablerowoffset 在指定的脚标（index）之后开始执行 tablerowrange 定义循环执行的范围。可利用数字和变量来定义执行范围12345&lt;table&gt;{% tablerow product in collection.products %} {{ product.title }}{% endtablerow %}&lt;/table&gt;声明变量assign 声明1{% assign 变量='' %}capture 声明123{% capture 变量 %}I am being captured.{% endcapture %}increment 声明数值变量 0每次调用此变量 值 加1初始值为 0123{% increment my_counter %}{% increment my_counter %}{% increment my_counter %}123012decrement 声明数值变量 -1每次调用此变量 值 减1初始值为 -1原始内容1234{% raw %} In Handlebars, {{ this }} will be HTML-escaped, but {{{ that }}} will not.{% endraw %}对代码块中的内容 不做任何处理过滤器abs 绝对值输入12{{-8 | abs}}{{8 | abs}}输出128 8append 追加字符串输入1{{\"hello\" | append: ' word'}}输出1hello wordprepend 在字符前追加输入1{{ \"word\" | prepend: 'hello '}}输出1hello wordat_least 限制数字最小值输入12{{ 5 | at_least:6}}{{ 7 | at_least:6}}输出1267at_most 限制数字最大值输入12{{ 5 | at_most:6}}{{ 7 | at_most:6}}输出1256capitalize 首字母大写输入1{{\"text\" | capitalize}}输出1Textceil 将浮点数向上取整输入1{{3.1415926 | ceil}}输出14floor 浮点数详向下取整输入1{{9.9 | floor}}输出19round 四舍五入 保留 * 位小数输入123{{1.4 | round}}{{1.5 | round}}{{3.1415926 | round: 3}}输出123123.142compact 删除数组中所有 nil 值输入12输出12uniq 删除数组中所有 冗余项输入1{{\"1,2,3,4,5,6,8,5,4,2,3,1,7,9,5\" | split: ',' | uniq}}输出11,2,3,4,5,6,8,7,9concat 合并数组输入123456{%- assign array1 = \"a,b,c\"| split: ',' -%}{%- assign array2 = \"d,e,f\"| split: ',' -%}{%- assign array = array1 | concat: array2 -%}{%- for item in array |compact-%} &lt;div&gt;{{item}}&lt;/div&gt;{%- endfor -%}输出123456abcdefdate 转换时间格式%Y 年%y 年（后两位）%m 月%b 月（英文单词）%h 月（英文单词）%d 日%H 时%M 分%S 秒%s 时间戳%a 星期%A 星期（全）输入12{{\"now\" |date:\"%Y-%m-%d %H:%M\"}}{{\"today\" |date:\"%Y-%m-%d %H:%M\"}}输出122020-05-03 11:562020-05-03 11:56default 默认值当变量未定义或为空时，输出默认值输入1{{nub |default:555 }}输出1555输入12{%- assign nub = 666 -%}{{nub |default:555 }}输出1666plus 将两数相加输入1{{ 5 | plus: 6}}输出111minus 将两数相减输入1{{ 8 | minus: 5}}输出13times 将两数相乘输入1{{8 | times: 6}}输出148divided_by 将两数相除输入12{{17 | divided_by: 4}}{{17 | divided_by: 4.0}}输出124.254.25modulo 求余输入1{{ 10 | modulo:6}}输出11downcase 将字符串转为小写输入1{{\"ABCDEFG\" | downcase }}输出1abcdefgupcase 将字符串转为大写输入1{{\"abcdefg\" | upcase }}输出1ABCDEFGfirst 输出数组第一项输入123{% assign array = \"1,2,3,4,5,6\" | split: ',' %}{{array|first }}{{array.first }}输出12join 将数组连接成字符串参数为连接符输入12{% assign array = \"a,b,c,d,e,f,g\" | split: ',' %}{{array | join: '-'}}输出1a-b-c-d-e-f-glstrip 删除字符左侧 空格 制表符 换行符输入1{{\" s t r i n g \" | lstrip}}输出1s t r i n grstrip 删除字符右侧 空格 制表符 换行符输入1{{\" s t r i n g \" | rstrip}}输出1s t r i n gstrip 删除字符串两侧 空格 制表符 换行符输入1{{\" s t r i n g \" | rstrip}}输出1t r i n gstrip_html 删除字符串内 html 标签输入1Have you read Ulysses?输出12strip_newlines 删除字符串内 换行 字符输入12345{% capture string %}Hellothere{% endcapture %}{{string | strip_newlines }}输出1Hellotherenewline_to_br 将换行符转为输入12345{% capture string %}Hellothere{% endcapture %}{{string | newline_to_br}}输出123&lt;br/&gt;Hello&lt;br/&gt;there&lt;br/&gt;remove 删除字符串中出现的 子字符输入1{{ \"abcdefg\" | remove: 'cd'}}输出1abefgremove_first 删除第一个匹配到的 子字符输入1{{ \"abcdcdefg\" | remove_first: 'cd'}}输出1abcdefgreplace 替换字符找到字符并替换掉输入1{{ \"abcdcdefg\" | replace: 'c', 'd'}}输出1abddddefgreplace_first 替换字符将字符串中出现的第一个参数替换为第二个参数输入1{{ \"abcdcdefg\" | replace_first: 'c', 'd'}}输出1abddcdefgreverse 翻转数组输入12{% assign array = \"1,2,3,4,5,6\" | split: ',' %}{{array | reverse }}输出16, 5, 4, 3, 2, 1size 字符长度 大小输入123{{\"s t r i n g\" | size}}{% assign str = \"s t r i n g\" %}{{str.size}输出121111slice 截取字符串输入123{{\"123456\" | slice: 0}}{{\"123456\" | slice: 2,2}}{{\"123456\" | slice: -1}}输出1231346sort 排序 按照字母大小写区分大小写输入12{%- assign array = \"a,f,r,S,d,g,O,y\" | split: ',' -%}{{-array| sort-}}输出1O,S,a,d,f,g,r,ysort_natural 排序 不按照字母大小写不区分大小写输入12{%- assign array = \"a,f,r,S,d,g,O,y\" | split: ',' -%}{{-array| sort_natural -}}输出1a,d,f,g,O,r,S,ysplit 分割字符串为数组输入12{%- assign array = \"a,f,r,S,d,g,O,y\" | split: ',' -%}{{array}}输出1a,f,r,S,d,g,O,ytruncate 裁剪字符串（字符个数） 省略号输入123{{\"abcdefghijk\" | truncate: 8}}{{\"abcdefghijk\" | truncate: 8,'...'}}{{\"abcdefghijk\" | truncate: 8,'省略'}}输出123abcde... abcde... abcdef省略truncatewords 裁剪字符串（单词个数） 省略号输入123{{\"a b c d e f g h ijk\" | truncatewords: 8}}&lt;br/&gt;{{\"a b c d e f g h ijk\" | truncatewords: 8,'...'}}&lt;br/&gt;{{\"a b c d e f g h ijk\" | truncatewords: 8,'省略'}}&lt;br/&gt;输出123a b c d e f g h...a b c d e f g h...a b c d e f g h省略url_encode 将字符中 非url安全字符转换为百分号编码的字符输入1{{\"baidu.com?q=@qq.com&amp;w=sd\" | url_encode }}输出1baidu.com%3Fq%3D%40qq.com%26w%3Dsdurl_decode 将字符中 百分号编码的字符 解码输入1{{\"baidu.com%3Fq%3D%40qq.com%26w%3Dsd\" | url_decode }}输出1baidu.com?q=@qq.com&amp;w=sd document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"文档","slug":"文档","permalink":"https://guochen-thlg.github.io/categories/%E6%96%87%E6%A1%A3/"},{"name":"Liquid","slug":"文档/Liquid","permalink":"https://guochen-thlg.github.io/categories/%E6%96%87%E6%A1%A3/Liquid/"}],"tags":[{"name":"Shopify","slug":"Shopify","permalink":"https://guochen-thlg.github.io/tags/Shopify/"},{"name":"Liquid","slug":"Liquid","permalink":"https://guochen-thlg.github.io/tags/Liquid/"}]},{"title":"shopify 自定义应用开发","slug":"shopify-自定义应用开发","date":"2020-06-13T11:36:18.000Z","updated":"2020-07-05T07:13:29.972Z","comments":true,"path":"2020/06/13/shopify-自定义应用开发/15100/","link":"","permalink":"https://guochen-thlg.github.io/2020/06/13/shopify-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/15100/","excerpt":"公司要求开发一个 shopify 嵌入式应用，说实话，实在是有些坎坷，主要是英文文档😭😭，在这里自己做下记录。Shopify Inc.是加拿大的一家跨国电子商务公司.Shopify为在线零售商提供一整套服务“包括支付、市场营销、运输和客户契合工具，以简化小型商户开设在线商店的过程","text":"公司要求开发一个 shopify 嵌入式应用，说实话，实在是有些坎坷，主要是英文文档😭😭，在这里自己做下记录。Shopify Inc.是加拿大的一家跨国电子商务公司.Shopify为在线零售商提供一整套服务“包括支付、市场营销、运输和客户契合工具，以简化小型商户开设在线商店的过程准备在开发之前呢，首先你需要准备一个 开发者账号。 创建一个 Shopify 合作伙伴账户官方推荐使用 React Next 作为渲染框架 node 作为服务器后端开发 使用 GraphQL Apollo 作为查询语言 使用 Polaris 作为 UI组件库首先要确保自己安装了 Node.js运行一下命令 检查 node 版本1node -v如果已经安装，请确保您使用的是8.1.0或更高版本。创建项目文件夹创建文件夹 shopify_app进入到项目文件夹1cd shopify_app初始化项目1npm init -y使用 Next.js 构建 React 支架安装 Next React ReactDOM1npm install react react-dom next --save在根目录中创建 pages 文件夹在 pages 文件夹中添加 index.js1234567const Index = () =&gt; ( &lt;div&gt; &lt;p&gt;Sample app using React and Next.js&lt;/p&gt; &lt;/div&gt;);export default Index;修改 package.json 文件12345678{ \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\", \"dev\": \"next\", \"build\": \"next build\", \"start\": \"next start\" }}运行项目1npm run dev将应用嵌入 Shopify安装 ngrok koa @shopify/koa-shopify-auth dotenv koa-session isomorphic-fetch @zeit/next-css @shopify/polaris @shopify/app-bridge-react js-cookie12npm install ngrok -gnpm install koa @shopify/koa-shopify-auth dotenv koa-session isomorphic-fetch --save运行1ngrok http 3000获取 shopifyAPI秘钥 和 shopifyAPI秘密秘钥通过登录 Shopify 合作伙伴账户 创建一个应用程序获取。您可以创建： 公共应用程序 自定义应用程序 私人应用程序这里我们创建 自定义应用程序在 应用程序URL 中填入 ngrok转发URL的HTTPS版本将相同的HTTPS转发URL粘贴到 列入白名单的重定向URL 字段中，并将 /auth/ allback 添加到路径的末尾然后 创建应用然后在根目录创建 .env 文件12SHOPIFY_API_KEY = '您的来自SHOPIFY PARTNERS仪表板的API密钥' SHOPIFY_API_SECRET_KEY = '您的来自SHOPIFY PARTNERS仪表板的API密钥'设置 Node.js 服务器 OAuth 授权认证在项目根目录中 创建 server.js 文件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849require('isomorphic-fetch')const dotenv = require('dotenv')const Koa = require('koa')const next = require('next')const { default: createShopifyAuth } = require('@shopify/koa-shopify-auth')const { verifyRequest } = require('@shopify/koa-shopify-auth')const session = require('koa-session')dotenv.config()// graphql的相关中间件const { default: graphQLProxy } = require('@shopify/koa-shopify-graphql-proxy')const { ApiVersion } = require('@shopify/koa-shopify-graphql-proxy')const port = parseInt(process.env.PORT, 10) || 3000const dev = process.env.NODE_ENV !== 'production'const app = next({ dev })const handle = app.getRequestHandler()const { SHOPIFY_API_SECRET_KEY, SHOPIFY_API_KEY } = process.env // 环境变量里读取 api-key与api-secret-keyapp.prepare().then(() =&gt; { const server = new Koa() server.use(session(server)) server.keys = [SHOPIFY_API_SECRET_KEY] server.use( createShopifyAuth({ apiKey: SHOPIFY_API_KEY, secret: SHOPIFY_API_SECRET_KEY, scopes: ['read_products', 'write_products','read_orders'], //填写相关应用api相关请求的权限 afterAuth (ctx) { const { shop, accessToken } = ctx.session // 通过session拿取相关商店地址以及请求api需要的accessToken ctx.cookies.set('shopOrigin', shop, { httpOnly: false }) ctx.redirect('/') // 重定向到index首页 } }) ) server.use(verifyRequest()) server.use(async (ctx) =&gt; { await handle(ctx.req, ctx.res) ctx.respond = false ctx.res.statusCode = 200 return }) server.use(graphQLProxy({ version: ApiVersion.October19 })) // 这里填写相关api的版本 server.listen(port, () =&gt; { console.log(`&gt; Ready on http://localhost:${port}`) // 监听端口 })})修改 package.json 文件12345678{ \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\", \"dev\": \"node server.js\", \"build\": \"next build\", \"start\": \"NODE_ENV=production node server.js\" }}然后启动项目 将应用安装到自己的测试商店 就可以看到自己的应用已经成功运行了！Shopify 官方文档Shopify developers document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"开发","slug":"开发","permalink":"https://guochen-thlg.github.io/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"shopify","slug":"shopify","permalink":"https://guochen-thlg.github.io/tags/shopify/"},{"name":"next.js","slug":"next-js","permalink":"https://guochen-thlg.github.io/tags/next-js/"},{"name":"node.js","slug":"node-js","permalink":"https://guochen-thlg.github.io/tags/node-js/"}]},{"title":"Redux 小试牛刀","slug":"Redux-小试牛刀","date":"2020-06-07T05:38:00.000Z","updated":"2020-06-07T08:07:48.268Z","comments":true,"path":"2020/06/07/Redux-小试牛刀/37966/","link":"","permalink":"https://guochen-thlg.github.io/2020/06/07/Redux-%E5%B0%8F%E8%AF%95%E7%89%9B%E5%88%80/37966/","excerpt":"在使用 Redux 之前，首先要了解为什么使用 Redux。随着 JavaScript 单页应用开发日趋复杂，JavaScript 需要管理比任何时候都要多的 state （状态）。 这些 state 可能包括服务器响应、缓存数据、本地生成尚未持久化到服务器的数据，也包括 UI 状态，如激活的路由，被选中的标签，是否显示加载动效或者分页器等等。","text":"在使用 Redux 之前，首先要了解为什么使用 Redux。随着 JavaScript 单页应用开发日趋复杂，JavaScript 需要管理比任何时候都要多的 state （状态）。 这些 state 可能包括服务器响应、缓存数据、本地生成尚未持久化到服务器的数据，也包括 UI 状态，如激活的路由，被选中的标签，是否显示加载动效或者分页器等等。Redux 三要素Action（将要发生的操作）Reducer（根据 action 更新 state，是一个纯函数）提供 combineReducers(reducers) 函数组合多个 reducer存放 state 数据的 Store（将 action 和 reducer 联系到一起的对象）提供 getState() 方法获取 state提供 dispatch(action) 方法更新 state通过 subsctibe(listener) 注册监听器通过 subscribr(listener) 返回的函数注销监听器三大基本原则单一数据源state 是只读的，只能通过触发 action 修改 state使用纯函数来执行修改使用创建 reducer创建 store 用于存储绑定事件定义 render 函数，更新视图为 store 添加监听，每次状态发生变化即刻调用render函数渲染组件初始化渲染默认数据我们用 Redux 来写一个计数器第一步编写 HTML 代码12345&lt;h1&gt;计数器：&lt;span id=\"num\"&gt;&lt;/span&gt;&lt;/h1&gt;&lt;button onclick=\"addNum()\"&gt;+&lt;/button&gt;&lt;button onclick=\"minNum()\"&gt;-&lt;/button&gt;&lt;button onclick=\"doubleness()\"&gt;2倍&lt;/button&gt;&lt;button onclick=\"square()\"&gt;平方&lt;/button&gt;导入 redux.min.js1&lt;script src=\"./redux.min.js\"&gt;&lt;/script&gt;定义方法12345678910111213141516171819202122232425const addNum = () =&gt; { let action = { type: 'ADD_ONE' } store.dispatch(action)}const minNum = () =&gt; { let action = { type: 'MIN_ONE' } store.dispatch(action)}const doubleness = () =&gt; { let action = { type: 'DOUBLENESS' } store.dispatch(action)}const square = () =&gt; { let action = { type: 'SQUARE' } store.dispatch(action)}创建纯函数12345678910111213141516171819const counter = (state = 0, action) =&gt; { switch (action.type) { case 'ADD_ONE': return state + 1 break; case 'MIN_ONE': return state - 1 break; case 'DOUBLENESS': return state * 2 break; case 'SQUARE': return state * state break; default: return state break; } }创建仓库123456789const store = Redux.createStore(counter)const readen = () =&gt; { document.getElementById('num').innerHTML = store.getState() console.log(store.getState());}readen()store.subscribe(readen)Redux 中文文档 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Redux","slug":"Redux","permalink":"https://guochen-thlg.github.io/categories/Redux/"}],"tags":[{"name":"Redux","slug":"Redux","permalink":"https://guochen-thlg.github.io/tags/Redux/"}]},{"title":"OWL Carousel2","slug":"OWL-Carousel2","date":"2020-05-24T01:34:07.000Z","updated":"2020-12-26T11:24:25.245Z","comments":true,"path":"2020/05/24/OWL-Carousel2/13606/","link":"","permalink":"https://guochen-thlg.github.io/2020/05/24/OWL-Carousel2/13606/","excerpt":"Owl Carousel 是一个强大、实用但小巧的 jQuery 幻灯片插件，它具有一下特点：兼容所有浏览器支持响应式支持 CSS3 过度支持触摸事件支持 JSON 及自定义 JSON 格式支持进度条支持自定义事件支持延迟加载支持自适应高度Owl Carousel 提供了众多的参数、回调函数及自定义事件（具体请往下浏览），所以它几乎可以满足你的所有要求。","text":"Owl Carousel 是一个强大、实用但小巧的 jQuery 幻灯片插件，它具有一下特点：兼容所有浏览器支持响应式支持 CSS3 过度支持触摸事件支持 JSON 及自定义 JSON 格式支持进度条支持自定义事件支持延迟加载支持自适应高度Owl Carousel 提供了众多的参数、回调函数及自定义事件（具体请往下浏览），所以它几乎可以满足你的所有要求。基本使用12345div#outer&gt;div.item*3$('#outer').owlCarousel({ ...})属性类型默认值作用itemsNumber3您想要在屏幕上看到的项目数。marginNumber0项目上的margin-right（px）。loopBooleanfalse无限循环。复制最后一个和第一个项目以获得循环幻觉。centerBooleanfalse中心项。适用于偶数个项目。mouseDragBooleantrue启用鼠标拖动。touchDragBooleantrue触摸拖动已启用pullDragBooleantrue舞台拉到边缘。freeDragBooleanfalse项目拉到边缘。stagePaddingNumber0在舞台上左右滑动（可以看到邻居）。mergeBooleanfalse合并项目。在项目内寻找data-merge =’{number}’。mergeFitBooleantrue如果屏幕小于项目值，则适合合并的项目。autoWidthBooleanfalse设置非网格内容。尝试在div上使用宽度样式。startPositionNumber/String0起始位置或URL哈希字符串，例如“ #id”。URLhashListenerBooleanfalse监听网址哈希更改。项上的数据哈希是必需的。navBooleanfalse显示下一个/上一个按钮。rewindBooleantrue到达边界后向后走。navTextArray['next','prev']允许HTML。navElementStringdiv单个方向导航链接的DOM元素类型。slideByNumber/String1导航幻灯片x。可以将“page”字符串设置为逐页滑动。slideTransitionString``您可以定义要使用的阶段的过渡，例如。线性的。dotsBooleantrue显示点导航。dotsEachNumber/Booleanfalse每个x项目显示点。dotsDataBooleanfalse由数据点内容使用。lazyLoadBooleanfalse延迟加载图像。data-src和data-src-retina用于高分辨率。如果元素不是，也将图像加载为背景内联样式lazyLoadEagerNumber0根据要预加载的项目，将图像预先正确地预加载到右侧（启用循环时向左加载）。autoplayBooleanfalse自动播放。autoplayTimeoutNumber5000自动播放间隔超时。autoplayHoverPauseBooleanfalse鼠标悬停时暂停。smartSpeedNumber250速度计算。fluidSpeedBooleanNumber速度计算autoplaySpeedNumber/Booleanfalse自动播放速度。navSpeedNumber/Booleanfalse导航速度。dotsSpeedBooleanNumber/Boolean分页速度。dragEndSpeedNumber/Booleanfalse拖动结束速度。callbacksBooleantrue启用回调事件。responsiveObjectempty object包含响应选项的对象。可以设置为false以删除响应功能。responsiveRefreshRateNumber200响应刷新率。responsiveBaseElementDOM elementwindow在任何DOM元素上设置。如果您关心无响应的浏览器（例如ie8），请在主包装器上使用它。这将防止疯狂调整大小videoBooleanfalse启用提取YouTube / Vimeo / Vzaar视频的功能。videoHeightNumber/Booleanfalse设置视频的高度。videoWidthNumber/Booleanfalse设置视频的宽度。animateOutString/BooleanfalseCSS3动画类。animateInString/Booleanfalse输入CSS3动画的类。fallbackEasingStringswing简化CSS2 $ .animate。infoFunctionfalse回调以获取基本信息（当前项目/页面/宽度）。信息功能的第二个参数是Owl DOM对象引用。nestedItemSelectorString/Classfalse如果猫头鹰项目深深嵌套在某些生成的内容中，请使用它。例如“ youritem”。在类名之前不要使用点号。itemElementStringdiv用于owl-item的DOM元素类型。stageElementStringdiv用于owl-item的DOM元素类型。navContainerString/Class/ID/Booleanfalse为nav设置自己的容器。dotsContainerString/Class/ID/Booleanfalse为nav设置自己的容器。checkVisibleBooleantrue如果您知道轮播总是可见的，则可以将checkVisibility设置为false，以防止昂贵的浏览器布局强制回流$ element.is（’：visible’）。OWL Carousel2官方文档 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"文档","slug":"文档","permalink":"https://guochen-thlg.github.io/categories/%E6%96%87%E6%A1%A3/"},{"name":"jQuery","slug":"文档/jQuery","permalink":"https://guochen-thlg.github.io/categories/%E6%96%87%E6%A1%A3/jQuery/"}],"tags":[{"name":"jQuery插件","slug":"jQuery插件","permalink":"https://guochen-thlg.github.io/tags/jQuery%E6%8F%92%E4%BB%B6/"},{"name":"jQuery轮播图","slug":"jQuery轮播图","permalink":"https://guochen-thlg.github.io/tags/jQuery%E8%BD%AE%E6%92%AD%E5%9B%BE/"},{"name":"OWL Carousel2","slug":"OWL-Carousel2","permalink":"https://guochen-thlg.github.io/tags/OWL-Carousel2/"}]},{"title":"如何搭建React项目","slug":"如何搭建React项目","date":"2020-04-13T05:58:19.000Z","updated":"2020-07-05T06:58:56.417Z","comments":true,"path":"2020/04/13/如何搭建React项目/45936/","link":"","permalink":"https://guochen-thlg.github.io/2020/04/13/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BAReact%E9%A1%B9%E7%9B%AE/45936/","excerpt":"React 是什么React 是一个声明式，高效且灵活的用于构建用户界面的 JavaScript 库。使用 React 可以将一些简短、独立的代码片段组合成复杂的 UI 界面，这些代码片段被称作“组件”。","text":"React 是什么React 是一个声明式，高效且灵活的用于构建用户界面的 JavaScript 库。使用 React 可以将一些简短、独立的代码片段组合成复杂的 UI 界面，这些代码片段被称作“组件”。React 项目搭建步骤安装 Node npm 并检查其版本12node -vnpm -v创建项目1npx create-react-app my-app打开项目123cd my-appnpm start document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"React","slug":"React","permalink":"https://guochen-thlg.github.io/categories/React/"}],"tags":[{"name":"React","slug":"React","permalink":"https://guochen-thlg.github.io/tags/React/"}]},{"title":"webpack（2）","slug":"webpack（2）","date":"2020-04-11T07:07:29.000Z","updated":"2020-04-21T10:06:06.991Z","comments":true,"path":"2020/04/11/webpack（2）/16618/","link":"","permalink":"https://guochen-thlg.github.io/2020/04/11/webpack%EF%BC%882%EF%BC%89/16618/","excerpt":"如何配置 webpack 转化器， webpack 插件， webpack 开发服务器呢？","text":"如何配置 webpack 转化器， webpack 插件， webpack 开发服务器呢？webpack 转化器loader 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。例如：less、sass等loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。test 属性，用于标识出应该被对应的 loader 进行转换的某个或某些文件。use 属性，表示进行转换时，应该使用哪个 loader。例1 若要引用 css 样式，则要配置相应的配置安装 style-loader css-loader1npm install style-loader css-loader在 module 下配置12345678module: {// loladers 遵循module.rules规则 rules: [// 规则 {// 样式 test: /\\.css$/, use: ['style-loader', 'css-loader'] } ]}例2 引用图片安装 url-lolader file-loader1npm install url-lolader file-loader在 module 下配置12345678910111213module: {// loladers 遵循module.rules规则 rules: [// 规则 {// 图片 test: /\\.(gif|png|jpg)$/, use: [{ loader: 'url-loader', options: { limit: 500,// 限制文件大小 500kb } }] } ] }webpack 插件loader 被用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。插件接口功能极其强大，可以用来处理各种各样的任务。想要使用一个插件，你只需要 require() 它，然后把它添加到 plugins 数组中。多数插件可以通过选项(option)自定义。你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 new 操作符来创建它的一个实例。配置模板，合并文件安装 html-webpack-plugin1npm install html-webpack-plugin配置引入1const HtmlWebpackPlugin = require('html-webpack-plugin')在 plugins 下添加如下配置1234567891011new HtmlWebpackPlugin({ filename: 'index.html',// 打包后的文件名字 chunks: ['index'],// 引入的文件,对应 entry 中的名字 title: '我是指定的标题', template: './src/index.html', hash: true,// 防止浏览器缓存 minify: {//压缩 html \"\" '' collapseWhitespace: true,// 折叠构成文档tr中的文本节点的空白 removeAttributeQuotes: true,// 删除属性周围的引号 } })为了避免每次手动删除 dist 文件夹 安装 clean-webpack-plugin 插件安装1npm install clean-webpack-plugin配置引入1const { CleanWebpackPlugin } = require('clean-webpack-plugin')在 plugins 下添加如下配置1new CleanWebpackPlugin()// 删除 dist 文件夹如果有静态文件，该怎么输出到 public 文件夹呢？可以安装 copy-webpack-plugin安装1npm install copy-webpack-plugin配置1const CopyWebpackPlugin = require('copy-webpack-plugin')123456new CopyWebpackPlugin([// 静态资源输出 { from: path.relative(__dirname, 'src/assets/'), to: '../public' } ])webpack 开发服务器开发服务器的配置如下12345678devServer: {// 开发服务器 contentBase: path.join(__dirname, \"dist\"), //设置服务器访问的基本目录 host: 'localhost', //服务器地址，localhost port: 9000,//端口号，如果deserver的配置没问题，但是项目启动失败了，需要注意该端口号是否被占用 compress: true,//一切服务都启用 gzip 压缩 open: true,//浏览器自动打开 //hot:true,//webpack4之前的版本的配置：热更新，4以后被弱化不需要被配置会自动刷新}官网地址：https://www.webpackjs.com/configuration/dev-server/#devserver document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"webpack","slug":"webpack","permalink":"https://guochen-thlg.github.io/categories/webpack/"}],"tags":[{"name":"webpack","slug":"webpack","permalink":"https://guochen-thlg.github.io/tags/webpack/"},{"name":"开发服务器","slug":"开发服务器","permalink":"https://guochen-thlg.github.io/tags/%E5%BC%80%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"}]},{"title":"webpack入门","slug":"webpack入门","date":"2020-03-30T04:36:41.000Z","updated":"2020-04-02T01:19:54.045Z","comments":true,"path":"2020/03/30/webpack入门/23985/","link":"","permalink":"https://guochen-thlg.github.io/2020/03/30/webpack%E5%85%A5%E9%97%A8/23985/","excerpt":"webpack 是基于Node.js开发出来的一个前端项目构建工具。可以看做是模块打包机（bundler），通过分析项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Sass/less（css预处理器），TypeScript等），并将其打包为合适的格式以供浏览器使用。","text":"webpack 是基于Node.js开发出来的一个前端项目构建工具。可以看做是模块打包机（bundler），通过分析项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Sass/less（css预处理器），TypeScript等），并将其打包为合适的格式以供浏览器使用。为什么使用 webpack解决 JavaScript 和 CSS 的依赖问题文件加载顺序的问题会造成 css 没作用或 js 中变量和方法找不到性能优化文件合并文件压缩提高开发效率单元测试vebdor 前缀代码分析版本升级webpack 的作用将sass/less 等预编译的css语言转换成浏览器识别的css文件能够将多个预编译文件打包成一个文件打包image/styles/assets/scrips/等前端常用的文件搭建开发环境开启服务器监视文件改动，热部署。将单文件组件(*.vue)类型的文件，转化成浏览器识别的内容使用 webpack 搭建项目首先新建一个项目目录 domewebpack在终端进入该目录,初始化项目1npm init -y安装 webpack &amp; webpack-cli1npm i webpack webpack-cli -D创建文件在项目根目录下创建 src 文件夹（放置入口文件的地方，源码也放在这里）在项目根目录下创建 dist 文件夹（出口文件方式的地方）创建dist/index.html文件,包含id=root的元素，引入bundle.js123456789101112&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"root\"&gt;&lt;/div&gt; &lt;script src=\"bundle.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;创建src/index.js，里面给root元素设置innerhtml1document.getElementById('root').innerHTML='webpack项目'在项目根目录下创建 webpack.config.js 文件1234567891011121314151617181920let path = require('path')module.exports = { mode: 'development',// 发布版：production 开发板：development entry: {// 入口 entryKey: './src/index.js',// entryKey 是自定义的 }, // module: {// loladers 遵循module.rules规则 // }, // plugins: [ // ], output: {// 出口 filename: 'bundle.js',// 打包后的文件名 filename是固定的 path: path.resolve(__dirname, 'dist'),// 路径必须是绝对路径 }, // devServer: {// 开发服务器 // }}在 package.json 文件 scripts 下配置 \"biuild\": \"npx webpack --config webpack.config.js\"1234\"scripts\": { \"biuild\": \"npx webpack --config webpack.config.js\", \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\" }在终端运行打包命令1npm run build在浏览器打开 index.html 就可以看到 已经打印出 webpack项目 字体了。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"webpack","slug":"webpack","permalink":"https://guochen-thlg.github.io/categories/webpack/"}],"tags":[{"name":"webpack","slug":"webpack","permalink":"https://guochen-thlg.github.io/tags/webpack/"},{"name":"入门","slug":"入门","permalink":"https://guochen-thlg.github.io/tags/%E5%85%A5%E9%97%A8/"}]},{"title":"文章置顶","slug":"文章置顶","date":"2020-03-26T04:59:02.000Z","updated":"2020-06-13T15:46:29.398Z","comments":true,"path":"2020/03/26/文章置顶/36265/","link":"","permalink":"https://guochen-thlg.github.io/2020/03/26/%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6/36265/","excerpt":"有的时候，写好一篇文章，想要置顶，但 next 默认是按照时间来进行排序的，自己写的文章总不能靠修改创作时间来进行置顶吧。想要通过一个权重来进行排序，但苦苦没有办法，今天它来了","text":"有的时候，写好一篇文章，想要置顶，但 next 默认是按照时间来进行排序的，自己写的文章总不能靠修改创作时间来进行置顶吧。想要通过一个权重来进行排序，但苦苦没有办法，今天它来了设置文章置顶修改仓库配置，使其支持文章置顶功能卸载 hexo-generator-index1npm r hexo-generator-index安装 hexo-generator-index-pin-top1npm i hexo-generator-index-pin-top -S在文章中添加置顶信息添加 top12345678title: 文章置顶tags: - 标签categories: - 分类copyright: truedate: 2020-03-26 12:59:02top:10top 后数字越大，权限越高添加置顶标志打开：/bolg/themes/next/layout/_macro/post.swig 文件在&lt;span class='post-time'&gt; 标签下，插入以下代码：1234567 {% if post.top %} &lt;span class=\"post-meta-item-icon\"&gt; &lt;i class=\"fa fa-thumb-tack\"&gt;&lt;/i&gt; &lt;/span&gt; &lt;font color=red&gt;置顶&lt;/font&gt; &lt;span class=\"post-meta-divider\"&gt;|&lt;/span&gt;{% endif %} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://guochen-thlg.github.io/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://guochen-thlg.github.io/tags/Hexo/"},{"name":"next","slug":"next","permalink":"https://guochen-thlg.github.io/tags/next/"},{"name":"文章置顶","slug":"文章置顶","permalink":"https://guochen-thlg.github.io/tags/%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6/"}]},{"title":"第一篇博客","slug":"Hello","date":"2020-03-20T16:00:00.000Z","updated":"2020-07-05T06:56:35.085Z","comments":true,"path":"2020/03/21/Hello/16108/","link":"","permalink":"https://guochen-thlg.github.io/2020/03/21/Hello/16108/","excerpt":"前言欢迎来到我的第一篇博客，在闲暇之余，搭了个博客，用来记录一下自己的学习过程，俗话说得好，好记性不如烂笔头。还记得上学的时候，老师经常对我们说这句话。虽然当时也（被迫）养成了这个习惯，但是还是很抵触的（懒啊~）。","text":"前言欢迎来到我的第一篇博客，在闲暇之余，搭了个博客，用来记录一下自己的学习过程，俗话说得好，好记性不如烂笔头。还记得上学的时候，老师经常对我们说这句话。虽然当时也（被迫）养成了这个习惯，但是还是很抵触的（懒啊~）。为什么要写博客积累 写博客主要是积累经验，记录生活中的收获，记录 把博客当做是日记，记录工作生活中的所见所闻，所思所想。交流 博客是一个很大的圈子。学习 在这里总会学到知识的，正如每天都会阅读。写博客当然得先了解一下 MarkdownMarkdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。好啦，这就是我的第一篇博客了，先记录到这里，我的博客之路将从这里出发！ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"杂记","slug":"杂记","permalink":"https://guochen-thlg.github.io/categories/%E6%9D%82%E8%AE%B0/"}],"tags":[]}],"categories":[{"name":"JS","slug":"JS","permalink":"https://guochen-thlg.github.io/categories/JS/"},{"name":"CSS","slug":"CSS","permalink":"https://guochen-thlg.github.io/categories/CSS/"},{"name":"Linux","slug":"Linux","permalink":"https://guochen-thlg.github.io/categories/Linux/"},{"name":"Koa","slug":"Koa","permalink":"https://guochen-thlg.github.io/categories/Koa/"},{"name":"koa","slug":"koa","permalink":"https://guochen-thlg.github.io/categories/koa/"},{"name":"Vue","slug":"Vue","permalink":"https://guochen-thlg.github.io/categories/Vue/"},{"name":"Shopify","slug":"Shopify","permalink":"https://guochen-thlg.github.io/categories/Shopify/"},{"name":"文档","slug":"文档","permalink":"https://guochen-thlg.github.io/categories/%E6%96%87%E6%A1%A3/"},{"name":"Liquid","slug":"文档/Liquid","permalink":"https://guochen-thlg.github.io/categories/%E6%96%87%E6%A1%A3/Liquid/"},{"name":"开发","slug":"开发","permalink":"https://guochen-thlg.github.io/categories/%E5%BC%80%E5%8F%91/"},{"name":"Redux","slug":"Redux","permalink":"https://guochen-thlg.github.io/categories/Redux/"},{"name":"jQuery","slug":"文档/jQuery","permalink":"https://guochen-thlg.github.io/categories/%E6%96%87%E6%A1%A3/jQuery/"},{"name":"React","slug":"React","permalink":"https://guochen-thlg.github.io/categories/React/"},{"name":"webpack","slug":"webpack","permalink":"https://guochen-thlg.github.io/categories/webpack/"},{"name":"Hexo","slug":"Hexo","permalink":"https://guochen-thlg.github.io/categories/Hexo/"},{"name":"杂记","slug":"杂记","permalink":"https://guochen-thlg.github.io/categories/%E6%9D%82%E8%AE%B0/"}],"tags":[{"name":"获取IP","slug":"获取IP","permalink":"https://guochen-thlg.github.io/tags/%E8%8E%B7%E5%8F%96IP/"},{"name":"本机IP","slug":"本机IP","permalink":"https://guochen-thlg.github.io/tags/%E6%9C%AC%E6%9C%BAIP/"},{"name":"CSS","slug":"CSS","permalink":"https://guochen-thlg.github.io/tags/CSS/"},{"name":"css布局","slug":"css布局","permalink":"https://guochen-thlg.github.io/tags/css%E5%B8%83%E5%B1%80/"},{"name":"ssh","slug":"ssh","permalink":"https://guochen-thlg.github.io/tags/ssh/"},{"name":"免密登录","slug":"免密登录","permalink":"https://guochen-thlg.github.io/tags/%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/"},{"name":"node","slug":"node","permalink":"https://guochen-thlg.github.io/tags/node/"},{"name":"Koa-body","slug":"Koa-body","permalink":"https://guochen-thlg.github.io/tags/Koa-body/"},{"name":"上传文件","slug":"上传文件","permalink":"https://guochen-thlg.github.io/tags/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"},{"name":"koa-body","slug":"koa-body","permalink":"https://guochen-thlg.github.io/tags/koa-body/"},{"name":"koa","slug":"koa","permalink":"https://guochen-thlg.github.io/tags/koa/"},{"name":"工具函数","slug":"工具函数","permalink":"https://guochen-thlg.github.io/tags/%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0/"},{"name":"js读取本地文件","slug":"js读取本地文件","permalink":"https://guochen-thlg.github.io/tags/js%E8%AF%BB%E5%8F%96%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6/"},{"name":"读取文件","slug":"读取文件","permalink":"https://guochen-thlg.github.io/tags/%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6/"},{"name":"算法","slug":"算法","permalink":"https://guochen-thlg.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"vue","slug":"vue","permalink":"https://guochen-thlg.github.io/tags/vue/"},{"name":"axios","slug":"axios","permalink":"https://guochen-thlg.github.io/tags/axios/"},{"name":"elemen-ui","slug":"elemen-ui","permalink":"https://guochen-thlg.github.io/tags/elemen-ui/"},{"name":"导航","slug":"导航","permalink":"https://guochen-thlg.github.io/tags/%E5%AF%BC%E8%88%AA/"},{"name":"开发技巧","slug":"开发技巧","permalink":"https://guochen-thlg.github.io/tags/%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/"},{"name":"Shopify本地开发","slug":"Shopify本地开发","permalink":"https://guochen-thlg.github.io/tags/Shopify%E6%9C%AC%E5%9C%B0%E5%BC%80%E5%8F%91/"},{"name":"Shopify","slug":"Shopify","permalink":"https://guochen-thlg.github.io/tags/Shopify/"},{"name":"Liquid","slug":"Liquid","permalink":"https://guochen-thlg.github.io/tags/Liquid/"},{"name":"shopify","slug":"shopify","permalink":"https://guochen-thlg.github.io/tags/shopify/"},{"name":"next.js","slug":"next-js","permalink":"https://guochen-thlg.github.io/tags/next-js/"},{"name":"node.js","slug":"node-js","permalink":"https://guochen-thlg.github.io/tags/node-js/"},{"name":"Redux","slug":"Redux","permalink":"https://guochen-thlg.github.io/tags/Redux/"},{"name":"jQuery插件","slug":"jQuery插件","permalink":"https://guochen-thlg.github.io/tags/jQuery%E6%8F%92%E4%BB%B6/"},{"name":"jQuery轮播图","slug":"jQuery轮播图","permalink":"https://guochen-thlg.github.io/tags/jQuery%E8%BD%AE%E6%92%AD%E5%9B%BE/"},{"name":"OWL Carousel2","slug":"OWL-Carousel2","permalink":"https://guochen-thlg.github.io/tags/OWL-Carousel2/"},{"name":"React","slug":"React","permalink":"https://guochen-thlg.github.io/tags/React/"},{"name":"webpack","slug":"webpack","permalink":"https://guochen-thlg.github.io/tags/webpack/"},{"name":"开发服务器","slug":"开发服务器","permalink":"https://guochen-thlg.github.io/tags/%E5%BC%80%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"name":"入门","slug":"入门","permalink":"https://guochen-thlg.github.io/tags/%E5%85%A5%E9%97%A8/"},{"name":"Hexo","slug":"Hexo","permalink":"https://guochen-thlg.github.io/tags/Hexo/"},{"name":"next","slug":"next","permalink":"https://guochen-thlg.github.io/tags/next/"},{"name":"文章置顶","slug":"文章置顶","permalink":"https://guochen-thlg.github.io/tags/%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6/"}]}