<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>nginx反向代理apache2+HPH</title>
    <url>/2021/03/26/nginx%E4%BB%A3%E7%90%86apache2-HPH/64100/</url>
    <content><![CDATA[<img src="/2021/03/26/nginx%E4%BB%A3%E7%90%86apache2-HPH/64100/nginx.jpg"> &gt; 背景：在公司部署项目的时候遇到端口冲突，原本服务器上跑着一个 php 项目使用的是 apache2 。<br>&gt; 既然我使用nginx进行node反向代理，我也可以反向代理 apache2<a id="more"></a><h2 id="解除-443-端口占用"><a href="#解除-443-端口占用" class="headerlink" title="解除 443 端口占用"></a>解除 443 端口占用</h2><p>修改 apache2 配置文件 /etc/apache2/ports.conf</p><p>将端口修改</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">IfModule</span> <span class="attr">ssl_module</span>&gt;</span></span><br><span class="line">	Listen 444</span><br><span class="line"><span class="tag">&lt;/<span class="name">IfModule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">IfModule</span> <span class="attr">mod_gnutls.c</span>&gt;</span></span><br><span class="line">	Listen 444</span><br><span class="line"><span class="tag">&lt;/<span class="name">IfModule</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><p>修改虚拟机配置文件 在 /etc/apache2/sites-enabled 下</p><figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;VirtualHost _default_:<span class="number">444</span>&gt;</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><p>修改完成后 重启 apache2</p><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line"><span class="regexp">/etc/i</span>nit.d<span class="regexp">/apache2  restart</span></span><br></pre></td></tr></tbody></table></figure><p>检查项目是否可以跑通 （加上端口号）</p><h2 id="设置-nginx-反向代理"><a href="#设置-nginx-反向代理" class="headerlink" title="设置 nginx 反向代理"></a>设置 nginx 反向代理</h2><p>在 /etc/nginx/sites-available 目录下创建一个配置文件<br>复制默认文件的内容进行修改</p><figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">...</span></span><br><span class="line"><span class="attr">server</span> <span class="string">{</span></span><br><span class="line">  <span class="attr">...</span></span><br><span class="line">	<span class="attr">listen</span> <span class="string">443 ssl default_server;</span></span><br><span class="line">	<span class="attr">ssl_certificate</span>  <span class="string">/etc/nginx/cert/xxx.pem;</span></span><br><span class="line">	<span class="attr">ssl_certificate_key</span>  <span class="string">/etc/nginx/cert/xxx.key;</span></span><br><span class="line">	<span class="attr">server_name</span>  <span class="string">xxx.com;</span></span><br><span class="line">	<span class="attr">location</span> <span class="string">/ {</span></span><br><span class="line">    <span class="attr">...</span></span><br><span class="line">		<span class="attr">proxy_set_header</span> <span class="string">Host $host;</span></span><br><span class="line">		<span class="attr">proxy_set_header</span> <span class="string">X-Real-IP $remote_addr;</span></span><br><span class="line">		<span class="attr">proxy_pass</span>  <span class="string">https://xxx.xxx.xxx.xx:444;</span></span><br><span class="line">		<span class="attr">index</span> <span class="string">index.php index.html index.htm index.nginx-debian.html;</span></span><br><span class="line">	<span class="attr">}</span></span><br><span class="line"><span class="attr">}</span></span><br><span class="line"><span class="attr">...</span></span><br></pre></td></tr></tbody></table></figure><p>设置软连接</p><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">ln -s <span class="regexp">/etc/</span>nginx<span class="regexp">/sites-available/</span>xxx.conf <span class="regexp">/etc/</span>nginx<span class="regexp">/sites-enabled/</span></span><br></pre></td></tr></tbody></table></figure><p>重启 nginx</p><figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">nginx -s reload</span></span><br></pre></td></tr></tbody></table></figure><p>访问项目 查看是否反向代理成功</p><!-- rebuild by neat --><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>nginx 反向代理</tag>
      </tags>
  </entry>
  <entry>
    <title>node之module</title>
    <url>/2021/03/24/node%E4%B9%8Bmodule/17103/</url>
    <content><![CDATA[<p>在前端,在浏览器中运行的 js 是没有模块的概念的,但如果把 js 放在服务器上运行,若只是简单的代码还好说,如果在大型项目中就会显得非常复杂加难以迭代维护,所以 node 引入了模块的概念。<br><br>那模块是如何实现互不影响,各自分离的呢?</p><a id="more"></a><p>我们知道在 js 中想要实现代码之间的互不影响,可以使用函数来加以分隔,使函数内部的变量待在自己的作用域范围内.<br></p><p>那 node 是不是这样实现的呢?问题来了,如何验证是在函数内部?<br><br>在函数中有个特殊的变量 arguments</p><p>新建 index.js</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// {</span></span><br><span class="line"><span class="comment">//   '0': {},</span></span><br><span class="line"><span class="comment">//   '1': [Function: require] {</span></span><br><span class="line"><span class="comment">//     resolve: [Function: resolve] { paths: [Function: paths] },</span></span><br><span class="line"><span class="comment">//     main: Module {</span></span><br><span class="line"><span class="comment">//       id: '.',</span></span><br><span class="line"><span class="comment">//       path: 'c:\\Users\\Administrator\\Desktop\\node',</span></span><br><span class="line"><span class="comment">//       exports: {},</span></span><br><span class="line"><span class="comment">//       parent: null,</span></span><br><span class="line"><span class="comment">//       filename: 'c:\\Users\\Administrator\\Desktop\\node\\index.js',</span></span><br><span class="line"><span class="comment">//       loaded: false,</span></span><br><span class="line"><span class="comment">//       children: [],</span></span><br><span class="line"><span class="comment">//       paths: [Array]</span></span><br><span class="line"><span class="comment">//     },</span></span><br><span class="line"><span class="comment">//     extensions: [Object: null prototype] {</span></span><br><span class="line"><span class="comment">//       '.js': [Function],</span></span><br><span class="line"><span class="comment">//       '.json': [Function],</span></span><br><span class="line"><span class="comment">//       '.node': [Function]</span></span><br><span class="line"><span class="comment">//     },</span></span><br><span class="line"><span class="comment">//     cache: [Object: null prototype] {</span></span><br><span class="line"><span class="comment">//       'c:\\Users\\Administrator\\Desktop\\node\\index.js': [Module]</span></span><br><span class="line"><span class="comment">//     }</span></span><br><span class="line"><span class="comment">//   },</span></span><br><span class="line"><span class="comment">//   '2': Module {</span></span><br><span class="line"><span class="comment">//     id: '.',</span></span><br><span class="line"><span class="comment">//     path: 'c:\\Users\\Administrator\\Desktop\\node',</span></span><br><span class="line"><span class="comment">//     exports: {},</span></span><br><span class="line"><span class="comment">//     parent: null,</span></span><br><span class="line"><span class="comment">//     filename: 'c:\\Users\\Administrator\\Desktop\\node\\index.js',</span></span><br><span class="line"><span class="comment">//     loaded: false,</span></span><br><span class="line"><span class="comment">//     children: [],</span></span><br><span class="line"><span class="comment">//     paths: [</span></span><br><span class="line"><span class="comment">//       'c:\\Users\\Administrator\\Desktop\\node\\node_modules',</span></span><br><span class="line"><span class="comment">//       'c:\\Users\\Administrator\\Desktop\\node_modules',</span></span><br><span class="line"><span class="comment">//       'c:\\Users\\Administrator\\node_modules',</span></span><br><span class="line"><span class="comment">//       'c:\\Users\\node_modules',</span></span><br><span class="line"><span class="comment">//       'c:\\node_modules'</span></span><br><span class="line"><span class="comment">//     ]</span></span><br><span class="line"><span class="comment">//   },</span></span><br><span class="line"><span class="comment">//   '3': 'c:\\Users\\Administrator\\Desktop\\node\\index.js',</span></span><br><span class="line"><span class="comment">//   '4': 'c:\\Users\\Administrator\\Desktop\\node'</span></span><br><span class="line"><span class="comment">// }</span></span><br></pre></td></tr></tbody></table></figure><p>现在可以知道确实是在函数内部,但这个函数是什么样子呢？<br></p><p>使用 arguments 对象的 callee 属性</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee)</span><br><span class="line"></span><br><span class="line"><span class="comment">// function (exports, require, module, __filename, __dirname) {</span></span><br><span class="line"><span class="comment">// console.log(arguments.callee.toString())</span></span><br><span class="line"><span class="comment">// }</span></span><br></pre></td></tr></tbody></table></figure><p>可以看到常用的 exports, require, module, *<em>filename, *</em>dirname 是以参数形式传进来的<br></p><p>那么 exports 和 module.exports 有什么区别呢?</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(exports === <span class="built_in">module</span>.exports)</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure><p>即它们指向同一个对象</p><p>所有我们在操作 exports 时 只能通过属性来赋值。而 module.exports 却可以赋值一个对象</p><p>个人理解,如有失误,请指正</p><!-- rebuild by neat --><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>moule</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux笔记</title>
    <url>/2021/03/22/Linux%E7%AC%94%E8%AE%B0/24884/</url>
    <content><![CDATA[<p>linux 入门笔记 记录操作过程</p><a id="more"></a><h1 id="安装-node"><a href="#安装-node" class="headerlink" title="安装 node"></a>安装 node</h1><h2 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h2><p><a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">Node 官网下载地址</a></p><figure class="highlight crmsh"><table><tbody><tr><td class="code"><pre><span class="line">wegt https://nodejs.org/dist/v14.<span class="number">16.0</span>/<span class="keyword">node</span><span class="title">-v14</span>.<span class="number">16.0</span>-linux-x64.tar.xz</span><br></pre></td></tr></tbody></table></figure><p>或者把安装包下载到本地 再上传到服务器</p><h2 id="解压安装包"><a href="#解压安装包" class="headerlink" title="解压安装包"></a>解压安装包</h2><figure class="highlight crmsh"><table><tbody><tr><td class="code"><pre><span class="line">tar -xvf <span class="keyword">node</span><span class="title">-v14</span>.<span class="number">16.0</span>-linux-x64.tar.xz</span><br></pre></td></tr></tbody></table></figure><h2 id="重命名安装目录"><a href="#重命名安装目录" class="headerlink" title="重命名安装目录"></a>重命名安装目录</h2><p>将解压文件移动到你想要安装的文件夹下</p><figure class="highlight crmsh"><table><tbody><tr><td class="code"><pre><span class="line">mv <span class="keyword">node</span><span class="title">-v14</span>.<span class="number">16.0</span>-linux-x64/  /usr/local/<span class="keyword">node</span><span class="title"></span></span><br></pre></td></tr></tbody></table></figure><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>此处为解压文件 node 的 bin 文件夹路径</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"export PATH=<span class="variable">$PATH</span>:/usr/local/node/bin"</span> &gt;&gt; /etc/profile</span><br></pre></td></tr></tbody></table></figure><p>使环境变量生效</p><figure class="highlight gradle"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">source</span> <span class="regexp">/etc/</span>profile</span><br></pre></td></tr></tbody></table></figure><h2 id="检查安装结果"><a href="#检查安装结果" class="headerlink" title="检查安装结果"></a>检查安装结果</h2><figure class="highlight crmsh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">node</span> <span class="title">-v</span></span><br><span class="line">npm -v</span><br></pre></td></tr></tbody></table></figure><p>未完 ……</p><!-- rebuild by neat --><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>pm2命令</title>
    <url>/2021/03/20/pm2%E5%91%BD%E4%BB%A4/18509/</url>
    <content><![CDATA[<p>pm2 命令 速查</p><a id="more"></a><p>用法:</p><pre><code>pm2 [cmd] app</code></pre><p>选项:</p><pre><code>-V, --version                                                输出版本号
-v --version                                                 打印PM2版本
-s --silent                                                  隐藏所有消息
--ext &lt;extensions&gt;                                           仅监视此文件扩展
-n --name &lt;name&gt;                                             在进程列表中设置一个名称
-m --mini-list                                               显示无格式化的压缩列表
--interpreter &lt;interpreter&gt;                                  设置用于执行应用程序的特定解释器，默认为：node
--interpreter-args &lt;arguments&gt;                               设置传递给解释器的参数（--node-args的别名） 
--node-args &lt;node_args&gt;                                      要传递给节点的空间分隔的参数
-o --output &lt;path&gt;                                           为stdout指定日志文件
-e --error &lt;path&gt;                                            为stderr指定日志文件
-l --log [path]                                              指定记录文件，该文件会收集stdout和stderr
--filter-env [envs]                                          过滤掉输出包含提供字符串的全局值</code></pre><p>(默认: )</p><pre><code>--log-type &lt;type&gt;                                            指定日志输出样式（默认情况下，JSON可选）        
--log-date-format &lt;date format&gt;                              将自定义前缀时间戳添加到日志
--time                                                       启用时间日志记录
--disable-logs                                               禁用所有日志存储
--env &lt;environment_name&gt;                                     指定必须注入生态系统文件的哪些环境变量
-a --update-env                                              使用重新启动/重新加载更新环境 (-A &lt;=&gt; Apply)
-f --force                                                   强迫行动
-i --instances &lt;number&gt;                                      启动[编号]实例（对于网络应用程序）（负载平衡）    
--parallel &lt;number&gt;                                          并行操作的数量（用于重启/重新加载）
--shutdown-with-message                                      使用process.send（'shutdown'）而不是process.kill（pid，sigint）的应用程序
-p --pid &lt;pid&gt;                                               指定PID文件
-k --kill-timeout &lt;delay&gt;                                    在发送最终的Sigkill信号之前延迟到过程
--listen-timeout &lt;delay&gt;                                     聆听应用程序重新加载时的超时
--max-memory-restart &lt;memory&gt;                                如果超出了存储量（以字节为单位），则重新启动应用程序
--restart-delay &lt;delay&gt;                                      在重新启动之间指定延迟（以毫秒为单位）
--exp-backoff-restart-delay &lt;delay&gt;                          在重新启动之间指定延迟（以毫秒为单位）
-x --execute-command                                         使用Fork系统执行程序
--max-restarts [count]                                       只重新启动脚本计数时间
-u --user &lt;username&gt;                                         生成启动脚本时定义用户
--uid &lt;uid&gt;                                                  使用&lt;uid&gt;权限运行目标脚本
--gid &lt;gid&gt;                                                  使用&lt;gid&gt;权限运行目标脚本
--namespace &lt;ns&gt;                                             在指定的命名空间中启动应用程序
--cwd &lt;path&gt;                                                 从路径&lt;cwd&gt;运行目标脚本
--hp &lt;home path&gt;                                             生成启动脚本时定义主路径
--wait-ip                                                    覆盖Systemd脚本等待完全互联网连接启动PM2
--service-name &lt;name&gt;                                        生成启动脚本时定义服务名称
-c --cron &lt;cron_pattern&gt;                                     基于Cron模式重新启动运行过程
-c --cron-restart &lt;cron_pattern&gt;                             （别名）根据Cron模式重新启动运行进程
-w --write                                                   在本地文件夹中写入配置
--no-daemon                                                  如果它不存在，请在前台运行PM2守护程序
--source-map-support                                         强制源地图支持
--only &lt;application-name&gt;                                    使用JSON声明，允许仅在一个应用程序上行动
--disable-source-map-support                                 强制源地图支持
--wait-ready                                                 询问PM2等待您的应用程序的准备好事件
--merge-logs                                                 合并来自不同实例的日志，但保持错误和分开
--watch [paths]                                              监视更改的应用程序文件夹(默认值:)
--ignore-watch &lt;folders|files&gt;                               忽略（名称或正则表达式）的路径列表
--watch-delay &lt;delay&gt;                                        更改文件后指定重启延迟 (--watch-delay 4 (in sec) or 4000ms)
--no-color                                                   跳过颜色
--no-vizion                                                  启动不带Vizion功能的应用程序（版本控制控制）
--no-autorestart                                             在没有自动重启的情况下启动应用程序
--no-treekill                                                只杀死主要过程，而不是独立的孩子
--no-pmx                                                     在没有PMX的情况下启动一个应用程序
--no-automation                                              在没有PMX的情况下启动一个应用程序
--trace                                                      启用与KM的交易跟踪
--disable-trace                                              用KM禁用交易跟踪
--sort &lt;field_name:sort&gt;                                     根据字段的名称排序过程
--attach                                                     启动/重启/停止/重新加载后附加日志记录
--v8                                                         启用V8数据收集
--event-loop-inspector                                       在PMX中启用事件循环检查器转储
--deep-monitoring                                            启用所有监控工具(equivalent to --v8 --event-loop-inspector --trace)
-h, --help                                                   输出使用信息</code></pre><p>命令:</p><pre><code>start [options] [name|namespace|file|ecosystem|id...]        启动和守护到应用程序
trigger &lt;id|proc_name|namespace|all&gt; &lt;action_name&gt; [params]  触发过程动作
deploy &lt;file|environment&gt;                                    部署您的JSON.
startOrRestart &lt;json&gt;                                        启动或重新启动JSON文件
startOrReload &lt;json&gt;                                         开始或优雅地重新加载JSON文件
pid [app_name]                                               返回[app_name]或全部的pid
create                                                       返回[app_name]或全部的pid
startOrGracefulReload &lt;json&gt;                                 开始或优雅地重新加载JSON文件
stop [options] &lt;id|name|namespace|all|json|stdin...&gt;         停止一个过程
restart [options] &lt;id|name|namespace|all|json|stdin...&gt;      重新启动一个过程
scale &lt;app_name&gt; &lt;number&gt;                                    取决于Total_Numbe的群集模式中的过程上/下降r param
profile:mem [time]                                           样本PM2堆内存
profile:cpu [time]                                           个人资料PM2 CPU.
reload &lt;id|name|namespace|all&gt;                               重新加载流程（请注意其用于应用http / https的应用程序）
id &lt;name&gt;                                                    按名称获取进程ID
inspect &lt;name&gt;                                               检查一个过程
delete|del &lt;name|id|namespace|script|all|json|stdin...&gt;      停止并删除PM2进程列表的进程
sendSignal &lt;signal&gt; &lt;pm2_id|name&gt;                            向目标过程发送系统信号
ping                                                         ping pm2守护进程 - 如果不是，它将推出它
updatePM2                                                    使用本地PM2更新内存中PM2
update                                                       (别名)使用本地PM2更新内存中PM2
install|module:install [options] &lt;module|git:/&gt;              安装或更新模块并永久运行它
module:update &lt;module|git:/&gt;                                 更新模块并永久运行它
module:generate [app_name]                                   在当前文件夹中生成示例模块
uninstall|module:uninstall &lt;module&gt;                          停止并卸载模块
package [target]                                             检查和包焦油类型模块
publish|module:publish [options] [folder]                    发布您目前的模块
set [key] [value]                                            设置指定的Config &lt;key&gt; &lt;value&gt;
multiset &lt;value&gt;                                             Multiset Eg例如“key1 Val1键2 Val2
get [key]                                                    获取&lt;key&gt;的值
conf [key] [value]                                           获取/设置模块配置值
config &lt;key&gt; [value]                                         获取/设置模块配置值
unset &lt;key&gt;                                                  清除指定的Config &lt;key&gt;
report                                                       为https://github.com/unitech/pm2/issues提供完整的PM2报告   
link [options] [secret] [public] [name]                      链接PM2监控仪表板
unlink                                                       与PM2监控仪表板取消链接
monitor [name]                                               监控目标过程
unmonitor [name]                                             未解释目标过程
open                                                         打开PM2监控仪表板
plus|register [options] [command] [option]                   启用PM2 Plus
login                                                        登录PM2 Plus Logout
logout                                                       从PM2 Plus退出
dump|save [options]                                          转储稍后将其复活的所有流程
cleardump                                                    创建空转储文件
send &lt;pm_id&gt; &lt;line&gt;                                          将 stdin 发送到&lt;pm_id&gt;
attach &lt;pm_id&gt; [comman]                                      将 stdin / stdout  附加到由&lt;pm_id&gt;标识的应用程序
resurrect                                                    复活以前倾倒的流程
unstartup [platform]                                         禁用PM2启动钩子
startup [platform]                                           启用PM2启动挂钩
logrotate                                                    复制默认的Logotate配置
ecosystem|init [mode]                                        生成流程conf文件。 （mode = null或简单）
reset &lt;name|id|all&gt;                                          重置过程的计数器
describe &lt;name|id&gt;                                           描述一个过程的所有参数
desc &lt;name|id&gt;                                               (别名)描述一个过程的所有参数
info &lt;name|id&gt;                                               (别名)描述一个过程的所有参数
show &lt;name|id&gt;                                               (别名)描述一个过程的所有参数
env &lt;id&gt;                                                     列出进程ID的所有环境变量
list|ls                                                      列出所有进程
l                                                            (别名)列出所有进程
ps                                                           (别名)列出所有进程
status                                                       (别名)列出所有进程
jlist                                                        列出JSON格式的所有进程
sysmonit                                                     启动系统监控守护程序
slist|sysinfos [options]                                     列出JSON中的系统信息
prettylist                                                   打印json在一个接驳的json中
monit                                                        启动终端监测
imonit                                                       启动遗留终端监测
dashboard|dash                                               使用监控和日志启动仪表板
flush [api]                                                  冲洗日志</code></pre><p><a href="https://github.com/Unitech/pm2" target="_blank" rel="noopener">Github Pm2</a></p><!-- rebuild by neat --><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>pm2</tag>
        <tag>守护进程</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常用命令</title>
    <url>/2021/03/08/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/7065/</url>
    <content><![CDATA[<p>Git 常用命令 (备忘)</p><a id="more"></a><h3 id="分支命名规范"><a href="#分支命名规范" class="headerlink" title="分支命名规范"></a>分支命名规范</h3><ul><li><strong>master</strong> 主分支<ul><li>主分支，永远是可用的、稳定的、可直接发布的版本，不能直接在该分支上开发</li></ul></li><li><strong>develop</strong> 开发分支<ul><li>开发主分支，代码永远是最新，所有新功能以这个分支来创建自己的开发分支，该分支只做只合并操作，不能直接在该分支上开发</li></ul></li><li><strong>feature-xxx</strong><ul><li>功能开发分支，在<code>develop</code>上创建分支，以自己开发功能模块命名，功能测试正常后合并到<code>develop</code>分支</li></ul></li><li><strong>release</strong><ul><li>预发布分支，在合并好<code>feature</code>分支的<code>develop</code>分支上创建，主要是用来提测的分支，修改好bug并确定稳定之后合并到<code>develop</code>和<code>master</code>分支，然后发布<code>master</code>分支</li></ul></li><li><strong>release-fix</strong><ul><li>功能bug修复分支，在<code>release</code>上创建分支修复，修复好提测的bug之后合并回<code>release</code>分支</li></ul></li><li><strong>hotfix-xxx</strong><ul><li>紧急bug修改分支，项目上线之后可以会遇到一些环境问题需要紧急修复，在对应版本的 <code>release</code> 分支上创建，流程跟<code>release</code>分支相似，修复完成后合并<code>release</code>分支，根据情况判断需不需要再合并到<code>develop</code>和<code>master</code>分支</li></ul></li></ul><h3 id="Git-命令"><a href="#Git-命令" class="headerlink" title="Git 命令"></a>Git 命令</h3><table><thead><tr><th align="left">git init</th><th align="left">初始化本地git仓库（创建新仓库）</th></tr></thead><tbody><tr><td align="left">git config –global user.name “xxx”</td><td align="left">配置用户名</td></tr><tr><td align="left">git config –global user.email “<a href="mailto:xxx@xxx.com">xxx@xxx.com</a>“</td><td align="left">配置邮件</td></tr><tr><td align="left">git config –global color.ui true</td><td align="left">git status等命令自动着色</td></tr><tr><td align="left">git config –global color.status auto</td><td align="left"></td></tr><tr><td align="left">git config –global color.diff auto</td><td align="left"></td></tr><tr><td align="left">git config –global color.branch auto</td><td align="left"></td></tr><tr><td align="left">git config –global color.interactive auto</td><td align="left"></td></tr><tr><td align="left">git config –global –unset http.proxy</td><td align="left">删除git上的代理配置</td></tr><tr><td align="left">git clone git+ssh://git@192.168.53.168/VT.git</td><td align="left">克隆远程仓库</td></tr><tr><td align="left">git status</td><td align="left">查看当前版本状态（是否修改）</td></tr><tr><td align="left">git add xyz</td><td align="left">添加xyz文件至index</td></tr><tr><td align="left">git add .</td><td align="left">增加当前子目录下所有更改过的文件至index</td></tr><tr><td align="left">git commit -m ‘xxx’</td><td align="left">提交</td></tr><tr><td align="left">git commit –amend -m ‘xxx’</td><td align="left">合并上一次提交（用于反复修改）</td></tr><tr><td align="left">git commit -am ‘xxx’</td><td align="left">将add和commit合为一步</td></tr><tr><td align="left">git rm xxx</td><td align="left">删除index中的文件</td></tr><tr><td align="left">git rm -r</td><td align="left">递归删除</td></tr><tr><td align="left">git log</td><td align="left">显示提交日志</td></tr><tr><td align="left">git log -1</td><td align="left">显示1行日志 -n为n行</td></tr><tr><td align="left">git log -5</td><td align="left"></td></tr><tr><td align="left">git log –stat</td><td align="left">显示提交日志及相关变动文件</td></tr><tr><td align="left">git log -p -m</td><td align="left"></td></tr><tr><td align="left">git show dfb02e6e4f2f7b573337763e5c0013802e392818</td><td align="left">显示某个提交的详细内容</td></tr><tr><td align="left">git show dfb02</td><td align="left">可只用commitid的前几位</td></tr><tr><td align="left">git show HEAD</td><td align="left">显示HEAD提交日志</td></tr><tr><td align="left">git show HEAD^</td><td align="left">显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本</td></tr><tr><td align="left">git tag</td><td align="left">显示已存在的tag</td></tr><tr><td align="left">git tag -a v2.0 -m ‘xxx’</td><td align="left">增加v2.0的tag</td></tr><tr><td align="left">git show v2.0</td><td align="left">显示v2.0的日志及详细内容</td></tr><tr><td align="left">git log v2.0</td><td align="left">显示v2.0的日志</td></tr><tr><td align="left">git diff</td><td align="left">显示所有未添加至index的变更</td></tr><tr><td align="left">git diff –cached</td><td align="left">显示所有已添加index但还未commit的变更</td></tr><tr><td align="left">git diff HEAD^</td><td align="left">比较与上一个版本的差异</td></tr><tr><td align="left">git diff HEAD – ./lib</td><td align="left">比较与HEAD版本lib目录的差异</td></tr><tr><td align="left">git diff origin/master..master</td><td align="left">比较远程分支master上有本地分支master上没有的</td></tr><tr><td align="left">git diff origin/master..master –stat</td><td align="left">只显示差异的文件，不显示具体内容</td></tr><tr><td align="left">git remote add origin git+ssh://git@192.168.53.168/VT.git</td><td align="left">增加远程定义（用于push/pull/fetch）</td></tr><tr><td align="left">git branch</td><td align="left">显示本地分支</td></tr><tr><td align="left">git branch –contains 50089</td><td align="left">显示包含提交50089的分支</td></tr><tr><td align="left">git branch -a</td><td align="left">显示所有分支</td></tr><tr><td align="left">git branch -r</td><td align="left">显示所有原创分支</td></tr><tr><td align="left">git branch –merged</td><td align="left">显示所有已合并到当前分支的分支</td></tr><tr><td align="left">git branch –no-merged</td><td align="left">显示所有未合并到当前分支的分支</td></tr><tr><td align="left">git branch -m master master_copy</td><td align="left">本地分支改名</td></tr><tr><td align="left">git checkout -b master_copy</td><td align="left">从当前分支创建新分支 master _copy 并检出</td></tr><tr><td align="left">git checkout -b master master_copy</td><td align="left">上面的完整版</td></tr><tr><td align="left">git checkout features/performance</td><td align="left">检出已存在的features/performance分支</td></tr><tr><td align="left">git checkout –track hotfixes/BJVEP933</td><td align="left">检出远程分支hotfixes/BJVEP933并创建本地跟踪分支</td></tr><tr><td align="left">git checkout v2.0</td><td align="left">检出版本v2.0</td></tr><tr><td align="left">git checkout -b devel origin/develop</td><td align="left">从远程分支develop创建新本地分支devel并检出</td></tr><tr><td align="left">git checkout – README</td><td align="left">检出head版本的README文件（可用于修改错误回退）</td></tr><tr><td align="left">git merge origin/master</td><td align="left">合并远程master分支至当前分支</td></tr><tr><td align="left">git cherry-pick ff44785404a8e</td><td align="left">合并提交ff44785404a8e的修改</td></tr><tr><td align="left">git push origin master</td><td align="left">将当前分支push到远程master分支</td></tr><tr><td align="left">git push origin :hotfixes/BJVEP933</td><td align="left">删除远程仓库的hotfixes/BJVEP933分支</td></tr><tr><td align="left">git push –tags</td><td align="left">把所有tag推送到远程仓库</td></tr><tr><td align="left">git fetch</td><td align="left">获取所有远程分支（不更新本地分支，另需merge）</td></tr><tr><td align="left">git fetch –prune</td><td align="left">获取所有原创分支并清除服务器上已删掉的分支</td></tr><tr><td align="left">git pull origin master</td><td align="left">获取远程分支master并merge到当前分支</td></tr><tr><td align="left">git mv README README2</td><td align="left">重命名文件README为README2</td></tr><tr><td align="left">git reset –hard HEAD</td><td align="left">将当前版本重置为HEAD（通常用于merge失败回退）</td></tr><tr><td align="left">git rebase</td><td align="left"></td></tr><tr><td align="left">git branch -d hotfixes/BJVEP933</td><td align="left">删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）</td></tr><tr><td align="left">git branch -D hotfixes/BJVEP933</td><td align="left">强制删除分支hotfixes/BJVEP933</td></tr><tr><td align="left">git ls-files</td><td align="left">列出git index包含的文件</td></tr><tr><td align="left">git show-branch</td><td align="left">图示当前分支历史</td></tr><tr><td align="left">git show-branch –all</td><td align="left">图示所有分支历史</td></tr><tr><td align="left">git whatchanged</td><td align="left">显示提交历史对应的文件修改</td></tr><tr><td align="left">git revert dfb02e6e4f2f7b573337763e5c0013802e392818</td><td align="left">撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818</td></tr><tr><td align="left">git ls-tree HEAD</td><td align="left">内部命令：显示某个git对象</td></tr><tr><td align="left">git rev-parse v2.0</td><td align="left">内部命令：显示某个ref对于的SHA1 HASH</td></tr><tr><td align="left">git reflog</td><td align="left">显示所有提交，包括孤立节点</td></tr><tr><td align="left">git show HEAD@{5}</td><td align="left"></td></tr><tr><td align="left">git show master@{yesterday}</td><td align="left">显示master分支昨天的状态</td></tr><tr><td align="left">git log –pretty=format:’%h %s’ –graph</td><td align="left">图示提交日志</td></tr><tr><td align="left">git show HEAD~3</td><td align="left"></td></tr><tr><td align="left">git show -s –pretty=raw 2be7fcb476</td><td align="left"></td></tr><tr><td align="left">git stash</td><td align="left">暂存当前修改，将所有至为HEAD状态</td></tr><tr><td align="left">git stash list</td><td align="left">查看所有暂存</td></tr><tr><td align="left">git stash show -p stash@{0}</td><td align="left">参考第一次暂存</td></tr><tr><td align="left">git stash apply stash@{0}</td><td align="left">应用第一次暂存</td></tr><tr><td align="left">git grep “delete from”</td><td align="left">文件中搜索文本“delete from”</td></tr><tr><td align="left">git grep -e ‘ define’ –and -e SORT_DIRENT</td><td align="left"></td></tr><tr><td align="left">git gc</td><td align="left"></td></tr><tr><td align="left">git fsck</td><td align="left"></td></tr></tbody></table><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>创建分支</p><figure class="highlight armasm"><table><tbody><tr><td class="code"><pre><span class="line"><span class="symbol">git</span> <span class="keyword">branch </span>***</span><br></pre></td></tr></tbody></table></figure><p>切换分支</p><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">git checkout <span class="emphasis">***</span></span><br></pre></td></tr></tbody></table></figure><p>查看远程分支</p><figure class="highlight armasm"><table><tbody><tr><td class="code"><pre><span class="line"><span class="symbol">git</span> <span class="keyword">branch </span>-r</span><br></pre></td></tr></tbody></table></figure><p>查看本地分支</p><figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">git branch</span></span><br></pre></td></tr></tbody></table></figure><p>查看本地和远程分支</p><figure class="highlight armasm"><table><tbody><tr><td class="code"><pre><span class="line"><span class="symbol">git</span> <span class="keyword">branch </span>-a</span><br></pre></td></tr></tbody></table></figure><p>删除远程分支</p><figure class="highlight maxima"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> --<span class="built_in">delete</span>  ***</span><br><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> -d ***</span><br></pre></td></tr></tbody></table></figure><p><a href="https://gist.github.com/guweigang/9848271" target="_blank" rel="noopener">参考:https://gist.github.com/guweigang/9848271</a><br><br><a href="https://www.jianshu.com/p/d0d3e5d1813a" target="_blank" rel="noopener">参考:https://www.jianshu.com/p/d0d3e5d1813a</a></p><!-- rebuild by neat --><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Shopify公共应用开发(2)</title>
    <url>/2021/03/06/Shopify%E5%85%AC%E5%85%B1%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91-2/16015/</url>
    <content><![CDATA[<p>接着上次的项目，我们这次把项目安装到 Shopify 商店。<br><br>首先,我们要有个开发者账号,来这里 <a href="https://www.shopify.com/partners" target="_blank" rel="noopener">注册</a>。</p><a id="more"></a><h3 id="创建公共应用"><a href="#创建公共应用" class="headerlink" title="创建公共应用"></a>创建公共应用</h3><p>我们创建一个公共应用,这时，我们会得到 <code>client_id</code> <code>client_secret</code> ,然后设置应用的 url 以及 重定向 url</p><p>有条件的可以进行穿透 ,也可以填写本地地址 (<a href="https://127.0.0.1:3000/" target="_blank" rel="noopener">https://127.0.0.1:3000/</a>)</p><h3 id="OAuth-身份验证"><a href="#OAuth-身份验证" class="headerlink" title="OAuth 身份验证"></a>OAuth 身份验证</h3><p>回到项目中 ,创建路由 安装路由 (/install) 和认证路由 (/auth/callback)</p><p>/install</p><ol><li>获得安装商店 xxx.myshopify.com</li><li>该应用需要的权限</li><li>该应用的 client_id</li><li>重定向 URl</li><li>设置一个随机数</li><li>重定向到</li></ol><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">`https://<span class="subst">${shop}</span>/admin/oauth/authorize?client_id=<span class="subst">${client_id}</span>&amp;scope=<span class="subst">${scopes}</span>&amp;redirect_uri=<span class="subst">${HOST}</span>/auth/callback&amp;state=<span class="subst">${nonce}</span>`</span></span><br></pre></td></tr></tbody></table></figure><p>/auth/callback</p><ol><li>获取参数 code, hmac, shop, state, timestamp</li><li>判断 state 与我们设置的随机数一样并且验证 hmac</li><li>通过 code 获取访问令牌</li></ol><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> res = <span class="keyword">await</span> fetch(<span class="string">`https://<span class="subst">${shop}</span>/admin/oauth/access_token`</span>, {</span><br><span class="line">	method: <span class="string">'POST'</span>,</span><br><span class="line">	body: <span class="built_in">JSON</span>.stringify({</span><br><span class="line">		client_id: CLIENT_ID,</span><br><span class="line">		client_secret: CLIENT_SECRET,</span><br><span class="line">		code: code,</span><br><span class="line">	}),</span><br><span class="line">	headers: { <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span> },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>保存 access_token</li><li>设置 token (JWT认证)</li><li>进入应用(重定向)</li></ol><p><a href="https://shopify.dev/tutorials/authenticate-with-oauth" target="_blank" rel="noopener">认证流程</a></p><h3 id="编写应用功能代码"><a href="#编写应用功能代码" class="headerlink" title="编写应用功能代码"></a>编写应用功能代码</h3><p>…….</p><!-- rebuild by neat --><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Shopify</category>
      </categories>
      <tags>
        <tag>Shopify 插件</tag>
        <tag>Shopify 公共应用</tag>
      </tags>
  </entry>
  <entry>
    <title>yarn npm常用命令</title>
    <url>/2021/03/05/yarn%20npm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/46610/</url>
    <content><![CDATA[<p>yarn npm 常用命令 (备忘&amp;速查)</p><a id="more"></a><table><thead><tr><th></th><th>yarn</th><th>npm</th></tr></thead><tbody><tr><td>安装</td><td>npm install –global yarn</td><td></td></tr><tr><td>检查版本</td><td>yarn –version</td><td>npm -v</td></tr><tr><td>新建项目</td><td>yarn init</td><td>npm init</td></tr><tr><td>添加依赖项</td><td>yarn add [package]</td><td>npm install [package]</td></tr><tr><td></td><td>yarn add [package]@[version]</td><td>npm install [package]@[version]</td></tr><tr><td></td><td>yarn add [package]@[tag]</td><td>npm install [package]@[tag]</td></tr><tr><td>将依赖项添加到不同类别的依赖项中</td><td></td><td></td></tr><tr><td>devDependencies</td><td>yarn add [package] –dev</td><td>npm install [package] -D</td></tr><tr><td>peerDependencies</td><td>yarn add [package] –peer</td><td></td></tr><tr><td>optionalDependencies</td><td>yarn add [package] –optional</td><td>npm install [package] -O</td></tr><tr><td>升级依赖</td><td>yarn upgrade [package]</td><td>npm update [package]</td></tr><tr><td>删除依赖</td><td>yarn remove [package]</td><td>npm uninstall [package]</td></tr><tr><td>搜索依赖</td><td></td><td>npm search [package]</td></tr><tr><td>安装项目的所有依赖项</td><td>yarn</td><td>npm i</td></tr></tbody></table><!-- rebuild by neat --><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>yarn</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>Shopify 公共应用开发(1)</title>
    <url>/2021/03/04/Shopify%E5%85%AC%E5%85%B1%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91(1)/23291/</url>
    <content><![CDATA[<p>目前,我正在开发一款 Shopify 公共应用 。其主要功能是个性化产品,并可以使用户试试预览。说实话第一次开发这种项目,感觉头大啊啊啊啊啊啊啊…<br><br>文档全英文,虽有中文版,但删减的太过厉害。于是我去搜索这方面的博客、文章,无奈，关于这方面的文章太少,只好硬着头皮去爬文档。<br>一把心酸一把泪啊 😭😭😭😭😭</p><a id="more"></a><h3 id="跟着文档走"><a href="#跟着文档走" class="headerlink" title="跟着文档走"></a>跟着文档走</h3><p><a href="https://shopify.dev/tutorials/build-a-shopify-app-with-node-and-react" target="_blank" rel="noopener">官方文档步骤</a></p><p>文档介绍的是 Next.js + React 搭建的服务端渲染<br>下面我使用 Koa + Vue 搭建前后端分离开发</p><h4 id="构建框架"><a href="#构建框架" class="headerlink" title="构建框架"></a>构建框架</h4><p>创建 Koa 项目,创建一个项目文件夹 myapp</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> myapp</span><br></pre></td></tr></tbody></table></figure><p>初始化 package.json</p><figure class="highlight coffeescript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> init -y</span><br></pre></td></tr></tbody></table></figure><p>安装 koa 以及各项依赖</p><figure class="highlight d"><table><tbody><tr><td class="code"><pre><span class="line">npm i koa koa-views koa-<span class="keyword">static</span> koa-router koa-session  koa-<span class="keyword">body</span> isomorphic-fetch  -S</span><br></pre></td></tr></tbody></table></figure><p>安装 nodemon 用于开发中热更新</p><figure class="highlight coffeescript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> i nodemon -D</span><br></pre></td></tr></tbody></table></figure><p>创建 启动文件 app.js</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> koaStatic = <span class="built_in">require</span>(<span class="string">'koa-static'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> koaViews = <span class="built_in">require</span>(<span class="string">'koa-views'</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line">app.use(session({ <span class="attr">sameSite</span>: <span class="string">'none'</span>, <span class="attr">secure</span>: <span class="literal">true</span> }, app))</span><br><span class="line"></span><br><span class="line">app.use(koaViews(path.join(__dirname, <span class="string">'./src/view'</span>), { <span class="attr">extension</span>: <span class="string">'html'</span> }))</span><br><span class="line">app.listen(port, () =&gt; {</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'&gt; http://127.0.0.1:%d'</span>, port)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>创建 src 文件夹 , 在 src 下面创建 view 文件夹<br>在 view 文件夹下新建 index.html 文件</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>App install<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h1</span>&gt;</span>App install<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>创建 route 文件夹 新建 index.js</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)()</span><br><span class="line">router.get(<span class="string">'/index'</span>, <span class="keyword">async</span> (ctx, next) =&gt; {</span><br><span class="line">	ctx.type = <span class="string">'html'</span></span><br><span class="line">	<span class="keyword">await</span> ctx.render(<span class="string">'index'</span>)</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></tbody></table></figure><p>在 package.json 添加</p><figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"> "scripts": {</span><br><span class="line">    "start": "nodemon  app",</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  }</span><br><span class="line">  <span class="comment">// ...</span></span><br></pre></td></tr></tbody></table></figure><p>启动项目</p><figure class="highlight dockerfile"><table><tbody><tr><td class="code"><pre><span class="line">npm <span class="keyword">run</span><span class="bash"> start</span></span><br></pre></td></tr></tbody></table></figure><p>到此 我们的项目已经可以运行了, 但是 怎么和Shopify商店联系起来呢?😜😜😜(来看下一篇)<br></p><!-- rebuild by neat --><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Shopify</category>
      </categories>
      <tags>
        <tag>Shopify 插件</tag>
        <tag>Shopify 公共应用</tag>
      </tags>
  </entry>
  <entry>
    <title>Fie对象 Image对象 base64 canvas对象 相互转换</title>
    <url>/2021/03/01/Fie%E5%AF%B9%E8%B1%A1Image%E5%AF%B9%E8%B1%A1base64canvas%E5%AF%B9%E8%B1%A1%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/23442/</url>
    <content><![CDATA[<p>在前端操作过程中，上传文件，图片是不可避免的，但有时候用户在前端页面操作完再上传，我们并没有文件对象，一般我们拿到的是 canvas image 等，有时候还可能是 base64 编码，这时我们该怎么上传文件呢？<br><br>我们先来理清楚一个关系<br></p><figure class="highlight maxima"><table><tbody><tr><td class="code"><pre><span class="line">url/<span class="built_in">base64</span>  →  Image  → canvas → <span class="built_in">base64</span> → File</span><br><span class="line">            →  <span class="built_in">base64</span></span><br><span class="line">            →  File → <span class="built_in">base64</span></span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h3 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">urlToImgAsync</span>(<span class="params">url</span>) </span>{</span><br><span class="line">	<span class="keyword">const</span> img = <span class="keyword">new</span> Image()</span><br><span class="line">	img.src = url</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">		img.onload = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>{</span><br><span class="line">			resolve(img)</span><br><span class="line">		}</span><br><span class="line">		img.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>{</span><br><span class="line">			reject(e)</span><br><span class="line">		}</span><br><span class="line">	})</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">imgToCanvas</span>(<span class="params">img</span>) </span>{</span><br><span class="line">	<span class="keyword">if</span> (img <span class="keyword">instanceof</span> Image) {</span><br><span class="line">		<span class="keyword">const</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>)</span><br><span class="line">		<span class="keyword">const</span> cxt = canvas.getContext(<span class="string">'2d'</span>)</span><br><span class="line">		cxt.width = img.width</span><br><span class="line">		cxt.heigth = img.heigth</span><br><span class="line">		cxt.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, cxt.width, cxt.heigth)</span><br><span class="line">		<span class="keyword">return</span> canvas</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">`<span class="subst">${<span class="built_in">Object</span>.prototype.toString.call(img)}</span> not a image`</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">canvasToData</span>(<span class="params">canvas</span>) </span>{</span><br><span class="line">	<span class="keyword">if</span> (canvas <span class="keyword">instanceof</span> HTMLCanvasElement) {</span><br><span class="line">		<span class="keyword">return</span> canvas.toDataURL()</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">`<span class="subst">${<span class="built_in">Object</span>.prototype.toString.call(canvas)}</span> not a canvas`</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dataToFile</span>(<span class="params">data, file = <span class="string">'file'</span></span>) </span>{</span><br><span class="line">	<span class="keyword">let</span> arr = data.split(<span class="string">','</span>)</span><br><span class="line">	<span class="keyword">let</span> mime = arr[<span class="number">0</span>].match(<span class="regexp">/:(.*?);/</span>)[<span class="number">1</span>]</span><br><span class="line">	<span class="keyword">let</span> suffix = mime.split(<span class="string">'/'</span>)[<span class="number">1</span>]</span><br><span class="line">	<span class="keyword">let</span> bstr = atob(arr[<span class="number">1</span>])</span><br><span class="line">	<span class="keyword">let</span> n = bstr.length</span><br><span class="line">	<span class="keyword">let</span> u8arr = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(n)</span><br><span class="line">	<span class="keyword">while</span> (n--) {</span><br><span class="line">		u8arr[n] = bstr.charCodeAt(n)</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> File([u8arr], <span class="string">`<span class="subst">${file}</span>.<span class="subst">${suffix}</span>`</span>, { <span class="attr">type</span>: mime })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fileToUrlAsync</span>(<span class="params">file</span>) </span>{</span><br><span class="line">	<span class="built_in">console</span>.log(file)</span><br><span class="line">	<span class="keyword">if</span> (file <span class="keyword">instanceof</span> File) {</span><br><span class="line">		<span class="keyword">const</span> reader = <span class="keyword">new</span> FileReader()</span><br><span class="line">		reader.readAsDataURL(file)</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">			reader.onloadend = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>{</span><br><span class="line">				<span class="built_in">console</span>.log(e)</span><br><span class="line">				resolve(e.target.result)</span><br><span class="line">			}</span><br><span class="line">			reader.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>{</span><br><span class="line">				<span class="built_in">console</span>.log(e)</span><br><span class="line">				reject(e)</span><br><span class="line">			}</span><br><span class="line">		})</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">`<span class="subst">${<span class="built_in">Object</span>.prototype.toString.call(file)}</span> not a file`</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>任意组合示例:</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">urlToData(URL).then(<span class="function"><span class="params">res</span> =&gt;</span> {</span><br><span class="line">	fileToData(dataToFile(res)).then(<span class="function"><span class="params">res</span> =&gt;</span> {</span><br><span class="line">		<span class="built_in">console</span>.log(res)</span><br><span class="line">	})</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><!-- rebuild by neat --><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>文件转换</tag>
      </tags>
  </entry>
  <entry>
    <title>Koa跨域解决方案</title>
    <url>/2021/02/27/Koa%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/57978/</url>
    <content><![CDATA[<p>在开发插件的过程中遇到了接口请求不同,显示跨域错误。<br><br>场景：我在本地开发启动了三个项目,插件部分请求服务器端出现跨域,我的服务器端是用 Koa 框架开发的。</p><a id="more"></a><h3 id="简单粗暴解决跨域"><a href="#简单粗暴解决跨域" class="headerlink" title="简单粗暴解决跨域"></a>简单粗暴解决跨域</h3><p>自己写一个中间件来判断哪些路由需要跨域</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">ctx, next</span>) </span>{</span><br><span class="line">		<span class="comment">// Allow cross-domain whitelist</span></span><br><span class="line">		<span class="built_in">console</span>.log(ctx.request.url)</span><br><span class="line">		<span class="keyword">if</span> (<span class="regexp">/^\/plug-in\/|^\/expose-api\//</span>.test(ctx.request.url)) {</span><br><span class="line">			<span class="comment">// Allow requests for all domains</span></span><br><span class="line">			ctx.set(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>)</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">await</span> next()</span><br><span class="line">	}</span><br></pre></td></tr></tbody></table></figure><h3 id="安装-中间件"><a href="#安装-中间件" class="headerlink" title="安装 中间件"></a>安装 中间件</h3><figure class="highlight coffeescript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> i koa2-cors -S</span><br></pre></td></tr></tbody></table></figure><p>使用</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cors=<span class="built_in">require</span>(<span class="string">"koa2-cors"</span>)</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">app.use(cors())</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></tbody></table></figure><p><a href="https://github.com/zadzbw/koa2-cors#readme" target="_blank" rel="noopener">koa2-cors Github</a></p><!-- rebuild by neat --><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Koa</category>
      </categories>
      <tags>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title>手动实现reduce函数</title>
    <url>/2021/02/25/%E6%89%8B%E5%8A%A8%E5%AE%9E%E7%8E%B0reduce%E5%87%BD%E6%95%B0/14755/</url>
    <content><![CDATA[<p>reduce 函数 可以自动将数组求和,但它内部是如何实现的呢? 今天我们来自己实现一个 reduce 函数</p><a id="more"></a><h3 id="reducer-作用"><a href="#reducer-作用" class="headerlink" title="reducer 作用"></a>reducer 作用</h3><h4 id="数组求和"><a href="#数组求和" class="headerlink" title="数组求和"></a>数组求和</h4><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">arr.reduce(<span class="function">(<span class="params">count, num</span>) =&gt;</span> {</span><br><span class="line">	<span class="keyword">return</span> count + num</span><br><span class="line">})</span><br><span class="line"><span class="comment">// 10</span></span><br></pre></td></tr></tbody></table></figure><h4 id="数组求乘积"><a href="#数组求乘积" class="headerlink" title="数组求乘积"></a>数组求乘积</h4><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">arr.reduce(<span class="function">(<span class="params">count, num</span>) =&gt;</span> {</span><br><span class="line">	<span class="keyword">return</span> count * num</span><br><span class="line">})</span><br><span class="line"><span class="comment">// 24</span></span><br></pre></td></tr></tbody></table></figure><h4 id="数组求最大（小）值"><a href="#数组求最大（小）值" class="headerlink" title="数组求最大（小）值"></a>数组求最大（小）值</h4><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">arr.reduce(<span class="function">(<span class="params">count, num</span>) =&gt;</span> {</span><br><span class="line">	<span class="keyword">return</span> count &gt; num ? count : num</span><br><span class="line">})</span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line">arr.reduce(<span class="function">(<span class="params">count, num</span>) =&gt;</span> {</span><br><span class="line">	<span class="keyword">return</span> count &lt; num ? count : num</span><br><span class="line">})</span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></tbody></table></figure><h4 id="当然-还有其他的使用方法"><a href="#当然-还有其他的使用方法" class="headerlink" title="当然 还有其他的使用方法"></a>当然 还有其他的使用方法</h4><h3 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myreduce = <span class="function"><span class="keyword">function</span> (<span class="params">backcall, grandTotal = <span class="number">0</span></span>) </span>{</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">typeof</span> backcall !== <span class="string">'function'</span>) {</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(</span><br><span class="line">			<span class="string">`<span class="subst">${<span class="built_in">Object</span>.prototype.toString.call(backcall)}</span> is not a function`</span></span><br><span class="line">		)</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; <span class="keyword">this</span>.length; index++) {</span><br><span class="line">		grandTotal = backcall(grandTotal, <span class="keyword">this</span>[index], index, <span class="keyword">this</span>)</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> grandTotal</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><!-- rebuild by neat --><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>reduce 函数</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx服务器实操</title>
    <url>/2021/02/23/Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E6%93%8D/35107/</url>
    <content><![CDATA[<blockquote><p>Nginx是非同步框架的網頁伺服器，也可以用作反向代理、負載平衡器和HTTP快取。<br>总之 Nginx 非常🐮</p></blockquote><a id="more"></a><h3 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h3><p>首先在官网(<a href="http://nginx.org/)[http://nginx.org/]" target="_blank" rel="noopener">http://nginx.org/)[http://nginx.org/]</a> 下载压缩包,解压到文件夹即可</p><h3 id="启动Nginx"><a href="#启动Nginx" class="headerlink" title="启动Nginx"></a>启动Nginx</h3><p>在文件夹下打开控制台 执行命令 (千万不要启动 nginx.exe! 千万不要启动 nginx.exe! 千万不要启动 nginx.exe!)</p><figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">nginx</span></span><br></pre></td></tr></tbody></table></figure><p>打开 (<a href="http://localhost)[http://localhost],如果可以看到">http://localhost)[http://localhost],如果可以看到</a> Welcome to nginx! 说明安装成功</p><h3 id="Nginx-命令"><a href="#Nginx-命令" class="headerlink" title="Nginx 命令"></a>Nginx 命令</h3><figure class="highlight jboss-cli"><table><tbody><tr><td class="code"><pre><span class="line">nginx            <span class="comment"># 启动 nginx</span></span><br><span class="line">nginx -s stop    <span class="comment"># 快速关机</span></span><br><span class="line">nginx -s <span class="keyword">quit</span>    <span class="comment"># 正常关机</span></span><br><span class="line">nginx -s <span class="keyword">reload</span>  <span class="comment"># 重新加载配置</span></span><br><span class="line">nginx -s reopen  <span class="comment"># 重新打开日志文件</span></span><br></pre></td></tr></tbody></table></figure><h4 id="Nginx-配置文件"><a href="#Nginx-配置文件" class="headerlink" title="Nginx 配置文件"></a>Nginx 配置文件</h4><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">#user  nobody;</span><br><span class="line">#</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"># 进程的ID号</span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events {</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http {</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span><br><span class="line">    #                  '$status $body_bytes_sent "$http_referer" '</span><br><span class="line">    #                  '"$http_user_agent" "$http_x_forwarded_for"';</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line">    # 每个 server 相当于一个站点</span><br><span class="line">    # server {</span><br><span class="line">    # 监听端口</span><br><span class="line">    #     listen       80;</span><br><span class="line">    # 域名</span><br><span class="line">    #     server_name  localhost;</span><br><span class="line">    # 编码</span><br><span class="line">    #     #charset koi8-r;</span><br><span class="line">    # 日志存放路径</span><br><span class="line">    #     #access_log  logs/host.access.log  main;</span><br><span class="line">    # 路由</span><br><span class="line">    #     location / {</span><br><span class="line">    #         root   html;</span><br><span class="line">    #         index  index.html index.htm;</span><br><span class="line">    #     }</span><br><span class="line"></span><br><span class="line">    #     #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">    #     # redirect server error pages to the static page /50x.html</span><br><span class="line">    #     #</span><br><span class="line">    #     error_page   500 502 503 504  /50x.html;</span><br><span class="line">    #     location = /50x.html {</span><br><span class="line">    #         root   html;</span><br><span class="line">    #     }</span><br><span class="line"></span><br><span class="line">    #     # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">    #     #</span><br><span class="line">    #     #location ~ \.php$ {</span><br><span class="line">    #     #    proxy_pass   http://127.0.0.1;</span><br><span class="line">    #     #}</span><br><span class="line"></span><br><span class="line">    #     # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">    #     #</span><br><span class="line">    #     #location ~ \.php$ {</span><br><span class="line">    #     #    root           html;</span><br><span class="line">    #     #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">    #     #    fastcgi_index  index.php;</span><br><span class="line">    #     #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">    #     #    include        fastcgi_params;</span><br><span class="line">    #     #}</span><br><span class="line"></span><br><span class="line">    #     # deny access to .htaccess files, if Apache's document root</span><br><span class="line">    #     # concurs with nginx's one</span><br><span class="line">    #     #</span><br><span class="line">    #     #location ~ /\.ht {</span><br><span class="line">    #     #    deny  all;</span><br><span class="line">    #     #}</span><br><span class="line">    # }</span><br><span class="line">    #############################################################################</span><br><span class="line">    ################################# 代理 #######################################</span><br><span class="line">    server {</span><br><span class="line">        # 监听的端口</span><br><span class="line">        listen       80;</span><br><span class="line">        # 域名</span><br><span class="line">        server_name  a.localhost;</span><br><span class="line">        # 编码</span><br><span class="line">        charset utf-8;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / {</span><br><span class="line">            # root   html;</span><br><span class="line">            # index  index.html index.htm;</span><br><span class="line">            # 代理的 URL</span><br><span class="line">            proxy_pass   http://127.0.0.1:3001;</span><br><span class="line">            # 客户端真实域名和端口号</span><br><span class="line">            proxy_set_header Host $http_host;</span><br><span class="line">            # 客户端真实IP</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            # 包含代理IP 真实IP</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; </span><br><span class="line">            proxy_set_header X-NginX-Proxy true;</span><br><span class="line">            #给请求头中添加客户端的Cookie</span><br><span class="line">            proxy_set_header Cookie $http_cookie;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html {</span><br><span class="line">            root   html;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ {</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #}</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ {</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #}</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache's document root</span><br><span class="line">        # concurs with nginx's one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht {</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #}</span><br><span class="line">    }</span><br><span class="line">    server {</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  b.localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / {</span><br><span class="line">            # root   html;</span><br><span class="line">            # index  index.html index.htm;</span><br><span class="line">            proxy_pass   http://127.0.0.1:3002;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html {</span><br><span class="line">            root   html;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    server {</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  c.localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / {</span><br><span class="line">            # root   html;</span><br><span class="line">            # index  index.html index.htm;</span><br><span class="line">            proxy_pass   http://127.0.0.1:3003;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html {</span><br><span class="line">            root   html;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    server {</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  d.localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / {</span><br><span class="line">            # root   html;</span><br><span class="line">            # index  index.html index.htm;</span><br><span class="line">            proxy_pass   http://127.0.0.1:3004;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html {</span><br><span class="line">            root   html;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    ##################################负载均衡#######################################</span><br><span class="line">    upstream mysvr {</span><br><span class="line">        server 127.0.0.1:3001 weight=1;</span><br><span class="line">        server 127.0.0.1:3002 weight=2;</span><br><span class="line">        server 127.0.0.1:3003 weight=3;</span><br><span class="line">        server 127.0.0.1:3004 weight=4;</span><br><span class="line">    }</span><br><span class="line">    server {</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  e.localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / {</span><br><span class="line">            # root   html;</span><br><span class="line">            # index  index.html index.htm;</span><br><span class="line">            proxy_pass   http://mysvr;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html {</span><br><span class="line">            root   html;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    ##############################################################################</span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server {</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / {</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    }</span><br><span class="line">    #}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server {</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / {</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    }</span><br><span class="line">    #}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><!-- rebuild by neat --><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>nginx 代理</tag>
        <tag>nginx 安装</tag>
        <tag>nginx 命令</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器如何获取本机ip地址</title>
    <url>/2021/02/20/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E6%9C%AC%E6%9C%BA%E5%85%AC%E7%BD%91ip%E5%9C%B0%E5%9D%80/30504/</url>
    <content><![CDATA[<p>浏览器如何获取本机的 IP 地址呢,方案有很多，简单的可以去 (<a href="https://ip.cn/)[https://ip.cn/]" target="_blank" rel="noopener">https://ip.cn/)[https://ip.cn/]</a> 获取本机 IP<br>但有时我们要在业务中拿到客户端 IP,该怎么办呢,也有相应的解决方案,例如一些三方接口：<a href="http://pv.sohu.com/cityjson" target="_blank" rel="noopener">搜狐</a>、 <a href="https://www.taobao.com/help/getip.php" target="_blank" rel="noopener">淘宝</a>、<a href="https://vv.video.qq.com/checktime?otype=json" target="_blank" rel="noopener">腾讯</a></p><a id="more"></a><p>接下来，我们使用 WebRTC API 来获取本机 IP<br>具体操作如下：</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IPQuery</span>(<span class="params">backcall</span>) </span>{</span><br><span class="line">	<span class="comment">// 兼容性处理</span></span><br><span class="line">	<span class="keyword">const</span> MyPeerConnection =</span><br><span class="line">		<span class="built_in">window</span>.RTCPeerConnection ||</span><br><span class="line">		<span class="built_in">window</span>.mozRTCPeerConnection ||</span><br><span class="line">		<span class="built_in">window</span>.webkitRTCPeerConnection</span><br><span class="line">	<span class="comment">// 创建实例</span></span><br><span class="line">	<span class="keyword">const</span> pc = <span class="keyword">new</span> MyPeerConnection({</span><br><span class="line">		<span class="comment">// 连接 STUN协议服务器</span></span><br><span class="line">		iceServers: [{ <span class="attr">url</span>: <span class="string">'stun:stun.l.google.com:19302'</span> }],</span><br><span class="line">	})</span><br><span class="line">	<span class="keyword">let</span> localIPs = { <span class="string">'0.0.0.0'</span>: <span class="number">1</span> }</span><br><span class="line">	<span class="keyword">let</span> noop = <span class="function"><span class="params">()</span> =&gt;</span> {}</span><br><span class="line">	<span class="keyword">let</span> ipRegex = <span class="regexp">/([0-9]{1,3}(\.[0-9]{1,3}){3}|[a-f0-9]{1,4}(:[a-f0-9]{1,4}){7})/g</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">ipIterate</span>(<span class="params">ip</span>) </span>{</span><br><span class="line">		<span class="keyword">if</span> (!localIPs[ip]) backcall(ip)</span><br><span class="line">		localIPs[ip] = <span class="literal">true</span></span><br><span class="line">	}</span><br><span class="line">	<span class="comment">// 创建数据信道</span></span><br><span class="line">	pc.createDataChannel(<span class="string">''</span>)</span><br><span class="line">	pc.createOffer().then(<span class="function"><span class="keyword">function</span> (<span class="params">sdp</span>) </span>{</span><br><span class="line">		sdp.sdp.split(<span class="string">'\n'</span>).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">line</span>) </span>{</span><br><span class="line">			<span class="keyword">if</span> (line.indexOf(<span class="string">'candidate'</span>) &lt; <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">			line.match(ipRegex).forEach(ipIterate)</span><br><span class="line">		})</span><br><span class="line">		pc.setLocalDescription(sdp, noop, noop)</span><br><span class="line">	})</span><br><span class="line">  <span class="comment">// 聆听候选事件</span></span><br><span class="line">	pc.onicecandidate = <span class="function"><span class="keyword">function</span> (<span class="params">ice</span>) </span>{</span><br><span class="line">		<span class="built_in">console</span>.log(ice)</span><br><span class="line">		<span class="keyword">if</span> (!ice ||!ice.candidate || !ice.candidate.candidate || !ice.candidate.candidate.match(ipRegex)) <span class="keyword">return</span>;</span><br><span class="line">		ice.candidate.candidate.match(ipRegex).forEach(ipIterate)</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">IPQuery(<span class="function"><span class="params">ip</span> =&gt;</span> {</span><br><span class="line">	<span class="built_in">console</span>.log(ip)</span><br><span class="line">	<span class="comment">// xxx.xxx.xxx.xxx</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><!-- rebuild by neat --><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>获取IP</tag>
        <tag>本机IP</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使div垂直水平居中</title>
    <url>/2021/02/19/%E5%A6%82%E4%BD%95%E4%BD%BFdiv%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD/9230/</url>
    <content><![CDATA[<p>使 div 垂直水平居中</p><a id="more"></a><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">	<span class="selector-class">.parent</span> {</span></span><br><span class="line">		width: 600px;</span><br><span class="line">		height: 600px;</span><br><span class="line">	}</span><br><span class="line"><span class="css">	<span class="selector-class">.child</span> {</span></span><br><span class="line">		width: 200px;</span><br><span class="line">		height: 200px;</span><br><span class="line">		background-color: rebeccapurple;</span><br><span class="line">	}</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.child</span> {</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> {</span><br><span class="line">	<span class="attribute">display</span>: flex;</span><br><span class="line">	<span class="attribute">align-items</span>: center;</span><br><span class="line">	<span class="attribute">justify-content</span>: center;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h3><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> {</span><br><span class="line">	<span class="attribute">display</span>: grid;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.child</span> {</span><br><span class="line">	<span class="attribute">align-self</span>: center;</span><br><span class="line">	<span class="attribute">justify-self</span>: center;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="方案四"><a href="#方案四" class="headerlink" title="方案四"></a>方案四</h3><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> {</span><br><span class="line">	<span class="attribute">text-align</span>: center;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.parent</span><span class="selector-pseudo">::before</span> {</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">	<span class="attribute">display</span>: inline-block;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">	<span class="attribute">vertical-align</span>: middle;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.child</span> {</span><br><span class="line">	<span class="attribute">display</span>: inline-block;</span><br><span class="line">	<span class="attribute">vertical-align</span>: middle;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><!-- rebuild by neat --><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>css布局</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh远程登录服务器VSCode调试代码</title>
    <url>/2021/01/28/ssh%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E6%9C%8D%E5%8A%A1%E5%99%A8VSCode%E8%B0%83%E8%AF%95%E4%BB%A3%E7%A0%81/14742/</url>
    <content><![CDATA[<p>我们在开发中有时会遇到要使用公网进行开发，虽然可以使用一下映射工具 如 ngrok 等，但是，我就想用服务器，那在服务器上如何进行开发调试呢？</p><a id="more"></a><p>这里我使用 Romote SSH 插件。</p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>打开VSCode ，在插件商店中搜索 Romote SSH 即可安装</p><h3 id="生成秘钥公钥"><a href="#生成秘钥公钥" class="headerlink" title="生成秘钥公钥"></a>生成秘钥公钥</h3><p>打开命令窗口（win+R cmd）输入</p><figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">ssh-keygen</span></span><br></pre></td></tr></tbody></table></figure><p>之后一路回车即可，当然，你也可以自定义文件名以及加密密码</p><p>会生成两个文件 id_rsa (秘钥) id_rsa.pub (公钥)，我们将公钥的内容加到服务器 <code>~/.ssh/authorized_keys</code> 文件中</p><p>设置权限 命令如下</p><figure class="highlight angelscript"><table><tbody><tr><td class="code"><pre><span class="line">chmod <span class="number">700</span> ~/.ssh</span><br><span class="line">chmod <span class="number">600</span> ~/.ssh/authorized_keys​</span><br></pre></td></tr></tbody></table></figure><h3 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h3><p>之后打开 Romote SSH 插件</p><figure class="highlight asciidoc"><table><tbody><tr><td class="code"><pre><span class="line">ssh root@**<span class="strong">*.*</span><span class="strong">*.*</span><span class="strong">*.*</span><span class="strong">*</span></span><br></pre></td></tr></tbody></table></figure><p>设置配置文件</p><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">Host 自定义</span><br><span class="line">  HostName<span class="built_in"> IP </span></span><br><span class="line"> <span class="built_in"> User </span>root  用户名</span><br><span class="line"> <span class="built_in"> Port </span>22 默认 22</span><br><span class="line">  IdentityFile <span class="string">"C:\Users\***\.ssh\id_rsa"</span> 秘钥绝对路径</span><br></pre></td></tr></tbody></table></figure><p>之后就可以快乐的免密连接了</p><!-- rebuild by neat --><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ssh</tag>
        <tag>免密登录</tag>
      </tags>
  </entry>
  <entry>
    <title>koa-body实现上传文件 分别保存自定义文件夹</title>
    <url>/2021/01/22/koa-body%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/4437/</url>
    <content><![CDATA[<p>如何使用ndoe实现上传文件，在使用koa 开发过程中，使用koa-body 不仅可以实现上传文件，还可以解析 POST 参数</p><a id="more"></a><p>配置如下</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">app.use(</span><br><span class="line">	koaBody({</span><br><span class="line">		multipart: <span class="literal">true</span>, <span class="comment">// 支持上传文件</span></span><br><span class="line">		patchNode: <span class="literal">true</span>,</span><br><span class="line">		formidable: {</span><br><span class="line">			uploadDir: path.join(__dirname, <span class="string">'uploads/'</span>), <span class="comment">// 上传文件路径</span></span><br><span class="line">			keepExtensi·  ons: <span class="literal">true</span>, <span class="comment">// 保持文件后缀</span></span><br><span class="line">			maxFieldsSize: <span class="number">5</span> * <span class="number">1024</span> * <span class="number">1024</span>, <span class="comment">// 文件上传大小</span></span><br><span class="line">			onFileBegin: <span class="function">(<span class="params">name, file</span>) =&gt;</span> {</span><br><span class="line">				<span class="comment">// 文件上传前的设置</span></span><br><span class="line">				<span class="keyword">let</span> shop = name.split(<span class="string">'|'</span>)[<span class="number">0</span>]</span><br><span class="line">				<span class="keyword">let</span> type = name.split(<span class="string">'|'</span>)[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">let</span> ext = file.name.split(<span class="string">'.'</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 判断保存路径是否存在，不存在则创建文件夹</span></span><br><span class="line">				<span class="keyword">let</span> dir = path.join(__dirname, <span class="string">`uploads/<span class="subst">${shop}</span>`</span>)</span><br><span class="line">				checkDirExist(dir)</span><br><span class="line">				dir = path.join(__dirname, <span class="string">`uploads/<span class="subst">${shop}</span>/<span class="subst">${type}</span>`</span>)</span><br><span class="line">        checkDirExist(dir)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 图片保存的实际路径</span></span><br><span class="line">				file.path = <span class="string">`<span class="subst">${dir}</span>\\<span class="subst">${file.name}</span>`</span></span><br><span class="line">			},</span><br><span class="line">		},</span><br><span class="line">	})</span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkDirExist</span> (<span class="params">dir</span>) </span>{</span><br><span class="line">	<span class="keyword">if</span> (!fs.existsSync(dir)) { fs.mkdirSync(dir) }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><!-- rebuild by neat --><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>koa</category>
      </categories>
      <tags>
        <tag>koa-body</tag>
        <tag>上传文件</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>koa-body POST 方式出现 415 unsupported media type</title>
    <url>/2021/01/22/koa-body415/41372/</url>
    <content><![CDATA[<p>使用 Koa 写了个插件，要上传文件时 使用了 koa-body 在 POST 提交参数时，总是报错 415 unsupported media type 苦思不得其解<br>在痛苦了半天的结果下，最终找到了问题所在</p><a id="more"></a><p>主要是开启了 <code>encoding: 'gzip'</code> 这个配置，注释后发现可以运行，完美解决。</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">app.use(</span><br><span class="line">	koaBody({</span><br><span class="line">		multipart: <span class="literal">true</span>, <span class="comment">// 支持上传文件</span></span><br><span class="line">		patchNode: <span class="literal">true</span>,</span><br><span class="line">		<span class="comment">// encoding: 'gzip',</span></span><br><span class="line">	})</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><!-- rebuild by neat --><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Koa</category>
      </categories>
      <tags>
        <tag>koa-body</tag>
        <tag>node</tag>
        <tag>koa</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript函数工具整理</title>
    <url>/2021/01/17/JavaScript%E5%87%BD%E6%95%B0%E5%B7%A5%E5%85%B7%E6%95%B4%E7%90%86/43110/</url>
    <content><![CDATA[<p>日常函数总结</p><a id="more"></a><p>修改当前历史记录<br>静默修改浏览器 URL 不刷新页面</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.history.replaceState({ <span class="attr">path</span>: <span class="string">'url'</span> }, <span class="string">''</span>, url)</span><br></pre></td></tr></tbody></table></figure><p>解析 URL 参数</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">analysisURL</span>(<span class="params">string</span>) </span>{</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">JSON</span>.parse(</span><br><span class="line">		<span class="string">`{ <span class="subst">${string</span></span></span><br><span class="line"><span class="string"><span class="subst">			.slice(string.indexOf(<span class="string">'?'</span>) + <span class="number">1</span>)</span></span></span><br><span class="line"><span class="string"><span class="subst">			.split(<span class="string">'&amp;'</span>)</span></span></span><br><span class="line"><span class="string"><span class="subst">			.map(</span></span></span><br><span class="line"><span class="string"><span class="subst">				o =&gt; <span class="string">`"<span class="subst">${o.slice(<span class="number">0</span>, o.indexOf(<span class="string">'='</span>))}</span>":"<span class="subst">${o.slice(o.indexOf(<span class="string">'='</span>) + <span class="number">1</span>)}</span>"`</span></span></span></span><br><span class="line"><span class="string"><span class="subst">			)</span></span></span><br><span class="line"><span class="string"><span class="subst">			.join(<span class="string">','</span>)}</span>}`</span></span><br><span class="line">	)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><!-- rebuild by neat --><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>工具函数</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器如何读取本地文件</title>
    <url>/2021/01/12/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A6%82%E4%BD%95%E8%AF%BB%E5%8F%96%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6/20477/</url>
    <content><![CDATA[<p>在业务需求上，不免需要用户上传文件，我们来操作一些内容，但如何在前端代码中来完成这部分需求呢？</p><a id="more"></a><h3 id="封装函数"><a href="#封装函数" class="headerlink" title="封装函数"></a>封装函数</h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 文件转为内容文本</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">readAsText</span>(<span class="params">file, callback</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> reader = <span class="keyword">new</span> FileReader()</span><br><span class="line">    reader.readAsText(file)</span><br><span class="line">    reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>{</span><br><span class="line">      callback(<span class="keyword">this</span>.result)</span><br><span class="line">    }</span><br><span class="line">    reader.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>{</span><br><span class="line">      callback(<span class="literal">null</span>, e)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 文件转为地址</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readAsDataURL</span>(<span class="params">file, callback</span>) </span>{</span><br><span class="line">	<span class="keyword">let</span> reader = <span class="keyword">new</span> FileReader()</span><br><span class="line">	reader.readAsDataURL(file)</span><br><span class="line">	reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>{</span><br><span class="line">		callback(<span class="keyword">this</span>.reader)</span><br><span class="line">	}</span><br><span class="line">	reader.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>{</span><br><span class="line">		callback(<span class="literal">null</span>, e)</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 文件转为二进制</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readAsBinaryString</span>(<span class="params">file, callback</span>) </span>{</span><br><span class="line">	<span class="keyword">let</span> reader = <span class="keyword">new</span> FileReader()</span><br><span class="line">	reader.readAsBinaryString(file)</span><br><span class="line">	reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>{</span><br><span class="line">		callback(<span class="keyword">this</span>.reader)</span><br><span class="line">	}</span><br><span class="line">	reader.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>{</span><br><span class="line">		callback(<span class="literal">null</span>, e)</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>当然 有时候也需要将文件Base64 编码转为文件类型</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Base64ToFile</span>(<span class="params">dataURL, fileName = <span class="string">'file'</span></span>) </span>{</span><br><span class="line">	<span class="keyword">let</span> arr = dataURL.split(<span class="string">','</span>)</span><br><span class="line">	<span class="keyword">let</span> mime = arr[<span class="number">0</span>].match(<span class="regexp">/:(.*?);/</span>)[<span class="number">1</span>]</span><br><span class="line">	<span class="keyword">let</span> suffix = mime.split(<span class="string">'/'</span>)[<span class="number">1</span>]</span><br><span class="line">	<span class="keyword">let</span> bstr = atob(arr[<span class="number">1</span>])</span><br><span class="line">	<span class="keyword">let</span> n = bstr.length</span><br><span class="line">	<span class="keyword">let</span> u8arr = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(n)</span><br><span class="line">	<span class="keyword">while</span> (n--) {</span><br><span class="line">		u8arr[n] = bstr.charCodeAt(n)</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> File([u8arr], <span class="string">`<span class="subst">${fileName}</span>.<span class="subst">${suffix}</span>`</span>, { <span class="attr">type</span>: mime })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><!-- rebuild by neat --><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>js读取本地文件</tag>
        <tag>读取文件</tag>
      </tags>
  </entry>
  <entry>
    <title>扁平数组与树状结构的转换</title>
    <url>/2020/09/22/%E6%89%81%E5%B9%B3%E6%95%B0%E7%BB%84%E4%B8%8E%E6%A0%91%E7%8A%B6%E7%BB%93%E6%9E%84%E7%9A%84%E8%BD%AC%E6%8D%A2/52305/</url>
    <content><![CDATA[<p>我们在使用后台传过来的数据的时候，有时候我们会得到树状结构的数据，虽然有时候，后端会处理掉，但，毕竟我们也可以在前端给它处理一下，一方面也锻炼一下脑子，天天写页面都没思考能力了。</p><a id="more"></a><h2 id="树状结构转为扁平数组"><a href="#树状结构转为扁平数组" class="headerlink" title="树状结构转为扁平数组"></a>树状结构转为扁平数组</h2><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> tree = {</span><br><span class="line">	id: <span class="string">'1'</span>,</span><br><span class="line">	pid: <span class="string">'7'</span>,</span><br><span class="line">	name: <span class="string">'aaaaa'</span>,</span><br><span class="line">	children: [</span><br><span class="line">		{</span><br><span class="line">			id: <span class="string">'2'</span>,</span><br><span class="line">			pid: <span class="string">'1'</span>,</span><br><span class="line">			name: <span class="string">'bbbbbbb'</span>,</span><br><span class="line">			children: [</span><br><span class="line">				{</span><br><span class="line">					id: <span class="string">'6'</span>,</span><br><span class="line">					pid: <span class="string">'2'</span>,</span><br><span class="line">					name: <span class="string">'ccccc'</span>,</span><br><span class="line">					children: [{ <span class="attr">id</span>: <span class="string">'9'</span>, <span class="attr">pid</span>: <span class="string">'6'</span>, <span class="attr">name</span>: <span class="string">'dddd'</span> }],</span><br><span class="line">				},</span><br><span class="line">			],</span><br><span class="line">		},</span><br><span class="line">	],</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> toArray = <span class="function">(<span class="params">tree, children</span>) =&gt;</span> {</span><br><span class="line">	<span class="keyword">let</span> arr = []</span><br><span class="line">	<span class="keyword">const</span> a = <span class="function"><span class="params">ls</span> =&gt;</span> {</span><br><span class="line">		<span class="keyword">if</span> (ls <span class="keyword">instanceof</span> <span class="built_in">Array</span>) {</span><br><span class="line">			ls.forEach(<span class="function"><span class="params">o</span> =&gt;</span> {</span><br><span class="line">				<span class="keyword">let</span> c = o[children]</span><br><span class="line">				<span class="keyword">delete</span> o[children]</span><br><span class="line">				arr.push(o)</span><br><span class="line">				a(c)</span><br><span class="line">			})</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	tree <span class="keyword">instanceof</span> <span class="built_in">Array</span> ? a(tree) : a([tree])</span><br><span class="line">	<span class="keyword">return</span> arr</span><br><span class="line">}</span><br><span class="line">toArray(tree, <span class="string">'children'</span>)</span><br><span class="line"><span class="comment">/* [</span></span><br><span class="line"><span class="comment">  { id: '1', pid: '7', name: 'aaaaa' },</span></span><br><span class="line"><span class="comment">  { id: '2', pid: '1', name: 'bbbbbbb' },</span></span><br><span class="line"><span class="comment">  { id: '6', pid: '2', name: 'ccccc' },</span></span><br><span class="line"><span class="comment">  { id: '9', pid: '6', name: 'dddd' }</span></span><br><span class="line"><span class="comment">] */</span></span><br></pre></td></tr></tbody></table></figure><h2 id="扁平数组转为树状结构"><a href="#扁平数组转为树状结构" class="headerlink" title="扁平数组转为树状结构"></a>扁平数组转为树状结构</h2><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array =  [</span><br><span class="line">  { <span class="attr">id</span>: <span class="string">'1'</span>, <span class="attr">pid</span>: <span class="string">'7'</span>, <span class="attr">name</span>: <span class="string">'aaaaa'</span> },</span><br><span class="line">  { <span class="attr">id</span>: <span class="string">'2'</span>, <span class="attr">pid</span>: <span class="string">'1'</span>, <span class="attr">name</span>: <span class="string">'bbbbbbb'</span> },</span><br><span class="line">  { <span class="attr">id</span>: <span class="string">'6'</span>, <span class="attr">pid</span>: <span class="string">'2'</span>, <span class="attr">name</span>: <span class="string">'ccccc'</span> },</span><br><span class="line">  { <span class="attr">id</span>: <span class="string">'9'</span>, <span class="attr">pid</span>: <span class="string">'6'</span>, <span class="attr">name</span>: <span class="string">'dddd'</span> }</span><br><span class="line">] </span><br><span class="line"><span class="keyword">const</span> arrayToTree = <span class="function">(<span class="params">arr, id, pid</span>) =&gt;</span> {</span><br><span class="line">	<span class="keyword">if</span> (!id || id == <span class="string">''</span>) {</span><br><span class="line">		<span class="keyword">return</span> []</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">if</span> (arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>) {</span><br><span class="line">		<span class="keyword">let</span> tree = []</span><br><span class="line">		<span class="keyword">let</span> treeMap = {}</span><br><span class="line">		arr.forEach(<span class="function"><span class="params">o</span> =&gt;</span> {</span><br><span class="line">			treeMap[o[id]] = o</span><br><span class="line">		})</span><br><span class="line">		arr.forEach(<span class="function"><span class="params">o</span> =&gt;</span> {</span><br><span class="line">			<span class="keyword">let</span> parent = treeMap[o[pid]]</span><br><span class="line">			<span class="keyword">if</span> (parent &amp;&amp; o[id] != o[pid]) {</span><br><span class="line">				<span class="keyword">if</span> (!parent.children) {</span><br><span class="line">					parent.children = []</span><br><span class="line">				}</span><br><span class="line">				parent.children.push(o)</span><br><span class="line">			} <span class="keyword">else</span> {</span><br><span class="line">				tree.push(o)</span><br><span class="line">			}</span><br><span class="line">		})</span><br><span class="line">		<span class="keyword">return</span> tree</span><br><span class="line">	} <span class="keyword">else</span> {</span><br><span class="line">		<span class="keyword">return</span> [arr]</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line">arrayToTree(array, <span class="string">'id'</span>, <span class="string">'pid'</span>)</span><br><span class="line"><span class="comment">/* {</span></span><br><span class="line"><span class="comment">	id: '1',</span></span><br><span class="line"><span class="comment">	pid: '7',</span></span><br><span class="line"><span class="comment">	name: 'aaaaa',</span></span><br><span class="line"><span class="comment">	children: [</span></span><br><span class="line"><span class="comment">		{</span></span><br><span class="line"><span class="comment">			id: '2',</span></span><br><span class="line"><span class="comment">			pid: '1',</span></span><br><span class="line"><span class="comment">			name: 'bbbbbbb',</span></span><br><span class="line"><span class="comment">			children: [</span></span><br><span class="line"><span class="comment">				{</span></span><br><span class="line"><span class="comment">					id: '6',</span></span><br><span class="line"><span class="comment">					pid: '2',</span></span><br><span class="line"><span class="comment">					name: 'ccccc',</span></span><br><span class="line"><span class="comment">					children: [{ id: '9', pid: '6', name: 'dddd' }],</span></span><br><span class="line"><span class="comment">				},</span></span><br><span class="line"><span class="comment">			],</span></span><br><span class="line"><span class="comment">		},</span></span><br><span class="line"><span class="comment">	],</span></span><br><span class="line"><span class="comment">} */</span></span><br></pre></td></tr></tbody></table></figure><p>在这里记录是为了以防用的时候找不到，这脑子😝，万一忘了呢</p><!-- rebuild by neat --><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>axios 取消重复请求</title>
    <url>/2020/08/15/axios-%E5%8F%96%E6%B6%88%E9%87%8D%E5%A4%8D%E8%AF%B7%E6%B1%82/13208/</url>
    <content><![CDATA[<p>在开发单页面应用中，我们在使用 axios 做请求的时候，会遇到一些很不好的体验，当我们切换路由的时候，如果上个页面的请求还没结束，那么这个请求依旧会执行完，我们能不能在不需要的时候就取消掉你？</p><a id="more"></a><p>那么刚刚好， axios 可以实现这个需求。<br>有两种方法可以实现取消请求</p><p>方法一<br>官方示例</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CancelToken = axios.CancelToken</span><br><span class="line"><span class="keyword">const</span> source = CancelToken.source()</span><br><span class="line"></span><br><span class="line">axios</span><br><span class="line">	.get(<span class="string">'/user/12345'</span>, {</span><br><span class="line">		cancelToken: source.token,</span><br><span class="line">	})</span><br><span class="line">	.catch(<span class="function"><span class="keyword">function</span> (<span class="params">thrown</span>) </span>{</span><br><span class="line">		<span class="keyword">if</span> (axios.isCancel(thrown)) {</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">'Request canceled'</span>, thrown.message)</span><br><span class="line">		} <span class="keyword">else</span> {</span><br><span class="line">			<span class="comment">// 处理错误</span></span><br><span class="line">		}</span><br><span class="line">	})</span><br><span class="line"></span><br><span class="line">axios.post(</span><br><span class="line">	<span class="string">'/user/12345'</span>,</span><br><span class="line">	{</span><br><span class="line">		name: <span class="string">'new name'</span>,</span><br><span class="line">	},</span><br><span class="line">	{</span><br><span class="line">		cancelToken: source.token,</span><br><span class="line">	}</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消请求（message 参数是可选的）</span></span><br><span class="line">source.cancel(<span class="string">'Operation canceled by the user.'</span>)</span><br></pre></td></tr></tbody></table></figure><p>方法二<br>官方示例</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CancelToken = axios.CancelToken</span><br><span class="line"><span class="keyword">let</span> cancel</span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">'/user/12345'</span>, {</span><br><span class="line">	cancelToken: <span class="keyword">new</span> CancelToken(<span class="function"><span class="keyword">function</span> <span class="title">executor</span>(<span class="params">c</span>) </span>{</span><br><span class="line">		<span class="comment">// executor 函数接收一个 cancel 函数作为参数</span></span><br><span class="line">		cancel = c</span><br><span class="line">	}),</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">// cancel the request</span></span><br><span class="line">cancel()</span><br></pre></td></tr></tbody></table></figure><p>我们这里使用第二种方式</p><p>我们定义三个方法:</p><p>addPending</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pending = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description </span>添加请求</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{Object}</span> <span class="variable">config</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addPending</span>(<span class="params">config</span>) </span>{</span><br><span class="line">	<span class="comment">// 唯一标识</span></span><br><span class="line">	<span class="keyword">let</span> flag = config.flag || <span class="literal">false</span></span><br><span class="line">	<span class="keyword">if</span> (flag) {</span><br><span class="line">		config.cancelToken = <span class="keyword">new</span> axios.CancelToken(<span class="function"><span class="params">cancel</span> =&gt;</span> {</span><br><span class="line">			<span class="keyword">if</span> (!pending.has(flag)) {</span><br><span class="line">				pending.set(flag, cancel)</span><br><span class="line">			} <span class="keyword">else</span> {</span><br><span class="line">				<span class="keyword">const</span> oldCancel = pending.get(flag)</span><br><span class="line">				oldCancel()</span><br><span class="line">				pending.set(flag, cancel)</span><br><span class="line">			}</span><br><span class="line">		})</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> config</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>removePending</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description </span>移除请求</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{Object}</span> <span class="variable">config</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removePending</span>(<span class="params">config</span>) </span>{</span><br><span class="line">	<span class="keyword">let</span> flag = config.flag || <span class="literal">false</span></span><br><span class="line">	<span class="keyword">if</span> (flag &amp;&amp; pending.has(flag)) {</span><br><span class="line">		pending.delete(flag)</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>clearPending 用于在路由跳转时，清空所有请求</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description </span>清空所有请求</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clearPending</span>(<span class="params"></span>) </span>{</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">const</span> [flag, oldCancel] <span class="keyword">of</span> pending) {</span><br><span class="line">		oldCancel()</span><br><span class="line">	}</span><br><span class="line">	pending.clear()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>我们在请求体中，添加 <code>flag</code> 属性，来识别每一个唯一的 API</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">text</span>(<span class="params">data</span>) </span>{</span><br><span class="line">	<span class="keyword">return</span> axios({</span><br><span class="line">		flag: <span class="string">'text'</span>,</span><br><span class="line">		url: <span class="string">'https://easydoc.xyz/mock/NX1XF1Cx/p/29538143/0I92pgNB'</span>,</span><br><span class="line">		method: <span class="string">'GET'</span>,</span><br><span class="line">		data,</span><br><span class="line">	})</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这样我们的函数就写好了，只要在请求拦截中只用就可以实现了</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 请求拦截</span></span><br><span class="line">request.interceptors.request.use(</span><br><span class="line">	<span class="function"><span class="keyword">function</span>(<span class="params">config</span>) </span>{</span><br><span class="line">		<span class="comment">// ...</span></span><br><span class="line">		<span class="keyword">return</span> addPending(config)</span><br><span class="line">	},</span><br><span class="line">	<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>{</span><br><span class="line">		<span class="comment">// 请求错误时的处理</span></span><br><span class="line">		<span class="comment">// ...</span></span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">	}</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 响应拦截</span></span><br><span class="line">request.interceptors.response.use(</span><br><span class="line">	<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>{</span><br><span class="line">		<span class="comment">// 请求成功，移除</span></span><br><span class="line">		removePending(response.config)</span><br><span class="line">		<span class="comment">// ...</span></span><br><span class="line">		<span class="keyword">return</span> response.data</span><br><span class="line">	},</span><br><span class="line">	<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>{</span><br><span class="line">		<span class="comment">// ...</span></span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">	}</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><!-- rebuild by neat --><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title>vue 使用 elemen UI 导航菜单所遇到的问题</title>
    <url>/2020/08/14/vue-%E4%BD%BF%E7%94%A8-elemen-UI-%E5%AF%BC%E8%88%AA%E8%8F%9C%E5%8D%95%E6%89%80%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/23181/</url>
    <content><![CDATA[<p>我们常常在开发vue 项目中使用 elemen UI 开结合开发，但在单页面应用中，随着用户的操作而改变的状态，我们常常使用 VueX 来做状态管理，但是，如果用户刷新页面，之前的状态都会消失，那么，导航该如何准确给当前页面的导航按钮添加选中的样式呢？</p><a id="more"></a><p>直接上代码</p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-menu router mode="horizontal" @select="selectMenu"&gt;</span><br><span class="line">    &lt;template v-for="(item,index) in navlist"&gt;</span><br><span class="line">      &lt;el-menu-item :index="item.path" :key="index" disabled&gt;{{item.name}}&lt;/el-menu-item&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/el-menu&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure><p>这样写的问题是，当用户刷新页面时，当前页面对应的导航并不会被添加选中样式，那该怎么办呢？</p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-menu router :default-active="$route.path" mode="horizontal" @select="selectMenu"&gt;</span><br><span class="line">    &lt;template v-for="(item,index) in navlist"&gt;</span><br><span class="line">      &lt;el-menu-item :index="item.path" :key="index" disabled&gt;{{item.name}}&lt;/el-menu-item&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/el-menu&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure><p>当我们这样写，将当前路径时时绑定到导航上，就可以完美实现了.</p><!-- rebuild by neat --><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>elemen-ui</tag>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title>教你如何在本地开发 Shopify 主题</title>
    <url>/2020/07/05/%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E5%9C%A8%E6%9C%AC%E5%9C%B0%E5%BC%80%E5%8F%91-Shopify-%E4%B8%BB%E9%A2%98/37643/</url>
    <content><![CDATA[<p>我们在开发 Shopify 主题的时候，常常是在官方的线上编辑器上进行修改代码的，这样的编辑效果不是很好（不能格式化、不能智能提示），而且对于我们想使用自己喜欢的编辑器来编辑的人来说，很是不舒服，那么有没有什么方法可以实现在本地编辑器上进行开发呢？接下来就让我们在本地配置一下环境。</p><a id="more"></a><h3 id="下载-Shopify-主题套件"><a href="#下载-Shopify-主题套件" class="headerlink" title="下载 Shopify 主题套件"></a>下载 Shopify 主题套件</h3><p><a href="https://shopify-themekit.s3.amazonaws.com/v1.0.2/windows-amd64/theme.exe" target="_blank" rel="noopener">win10-64</a><br><br>如果下载速度较慢，也可以下载我百度网盘里的<br><a href="https://pan.baidu.com/s/1YMQ2adpGaBpiwDCYCvoPSA" target="_blank" rel="noopener">https://pan.baidu.com/s/1YMQ2adpGaBpiwDCYCvoPSA</a>提取码：pt8g</p><p>下载完成后，创建一个 Theme Kit 文件夹，将程序复制到文件夹中，然后将路径（D:\DevelopmentTool\Theme Kit）添加到 环境变量（Path）中</p><p>完成后 打开 cmd.exe 并输入 theme</p><h3 id="创建自定义-应用程序"><a href="#创建自定义-应用程序" class="headerlink" title="创建自定义 应用程序"></a>创建自定义 应用程序</h3><p>创建一个自定义应用程序 设置 Theme templates and theme assets 为 Read and write<br>得到 密码后 ，复制下来，保存到一个文件里</p><h3 id="下载主题模板"><a href="#下载主题模板" class="headerlink" title="下载主题模板"></a>下载主题模板</h3><ol><li>查看模板ID</li></ol><figure class="highlight ada"><table><tbody><tr><td class="code"><pre><span class="line">theme <span class="keyword">new</span> <span class="comment">--password=[your-password] --store=[your-store.myshopify.com] --name=[theme name]</span></span><br></pre></td></tr></tbody></table></figure><p>记住主题 ID</p><p>创建一个文件夹，这将是存放你主题文件的项目模板，然后执行</p><figure class="highlight inform7"><table><tbody><tr><td class="code"><pre><span class="line">theme get -p=<span class="comment">[your-password]</span> -s=<span class="comment">[you-store.myshopify.com]</span> -t=<span class="comment">[your-theme-id]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>下载配置文件中的主题</p><figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">theme download</span></span><br></pre></td></tr></tbody></table></figure><p>打开将在浏览器中打开主题的预览页面，并打印出URL供您参考</p><figure class="highlight arduino"><table><tbody><tr><td class="code"><pre><span class="line">theme <span class="built_in">open</span></span><br></pre></td></tr></tbody></table></figure><p>Watch将启动一个过程，该过程将监视您的目录中的更改并将其上载到Shopify。任何更改将被记录到终端，并且上传状态也将被记录。只需输入ctrl + C即可停止该程序</p><figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">theme watch</span></span><br></pre></td></tr></tbody></table></figure><!-- rebuild by neat --><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Shopify</category>
      </categories>
      <tags>
        <tag>开发技巧</tag>
        <tag>Shopify本地开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Liquid</title>
    <url>/2020/06/16/Liquid/22647/</url>
    <content><![CDATA[<p>开发 Shopify 商店，首先要熟悉 Liquid 的语法。Liquid 由 Shopify 创造并用 Ruby 实现。</p><a id="more"></a><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>==</td><td>相等</td></tr><tr><td>!=</td><td>不相等</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;=</td><td>大于或等于</td></tr><tr><td>&lt;=</td><td>小于或等于</td></tr><tr><td>or</td><td>逻辑或</td></tr><tr><td>and</td><td>逻辑与</td></tr></tbody></table><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li>Stting</li><li>Number</li><li>Bootlean<ul><li>除了 nil false 其余全都为 真</li></ul></li><li>Nil</li><li>Array</li></ul><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight twig"><table><tbody><tr><td class="code"><pre><span class="line"><span class="template-tag">{% <span class="name">comment</span> %}</span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">{% <span class="name">endcomment</span> %}</span></span><br></pre></td></tr></tbody></table></figure><h3 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h3><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="template-tag">{% <span class="name"><span class="name">if</span></span>  true %}</span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">{% <span class="name"><span class="name">endif</span></span> %}</span></span><br></pre></td></tr></tbody></table></figure><p>如果为真就执行</p><h4 id="unless"><a href="#unless" class="headerlink" title="unless"></a>unless</h4><figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="template-tag">{% <span class="name">unless</span> %}</span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">{% <span class="name">endunless</span> %}</span></span><br></pre></td></tr></tbody></table></figure><p>若为假就执行</p><h4 id="elsif-else"><a href="#elsif-else" class="headerlink" title="elsif / else"></a>elsif / else</h4><figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="template-tag">{% <span class="name">elsif</span> %}</span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">{% <span class="name"><span class="name">else</span></span> %}</span></span><br></pre></td></tr></tbody></table></figure><p>否则 如果</p><p>否则</p><h4 id="case-when"><a href="#case-when" class="headerlink" title="case/when"></a>case/when</h4><figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="template-tag">{% <span class="name">case</span> 变量 %}</span></span><br><span class="line"><span class="xml">...</span></span><br><span class="line"><span class="template-tag">{% <span class="name">when</span> '' %}</span></span><br><span class="line"><span class="xml">...</span></span><br><span class="line"><span class="template-tag">{% <span class="name">when</span> '' %}</span></span><br><span class="line"><span class="xml">...</span></span><br><span class="line"><span class="template-tag">{% <span class="name"><span class="name">else</span></span> %}</span></span><br><span class="line"><span class="xml">...</span></span><br><span class="line"><span class="template-tag">{% <span class="name">endcase</span> %}</span></span><br></pre></td></tr></tbody></table></figure><p>类似于 switch</p><h3 id="迭代-循环"><a href="#迭代-循环" class="headerlink" title="迭代/循环"></a>迭代/循环</h3><ul><li><p>break</p><ul><li>循环过程中若干遇到 break 标记（tag）即停止循环</li></ul></li><li><p>continue</p><ul><li>循环过程中若遇到 continue 标记（tag）则跳出当前循环</li></ul></li><li><p>limit limit:5</p><ul><li>限定循环执行的次数</li></ul></li><li><p>offset offsetv:5</p><ul><li>从指定索引号开始执行循环。</li></ul></li><li><p>range (1..5)</p><ul><li>定义循环执行的范围。可利用数字或变量来定义此执行范围<figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="template-tag">{% <span class="name"><span class="name">for</span></span> i <span class="keyword">in</span> (3..5) %}</span></span><br><span class="line"><span class="xml">  </span><span class="template-variable">{{ i }}</span></span><br><span class="line"><span class="template-tag">{% <span class="name"><span class="name">endfor</span></span> %}</span></span><br><span class="line"><span class="template-tag">{% <span class="name">assign</span> num = 4 %}</span></span><br><span class="line"><span class="template-tag">{% <span class="name"><span class="name">for</span></span> i <span class="keyword">in</span> (1..num) %}</span></span><br><span class="line"><span class="xml">  </span><span class="template-variable">{{ i }}</span></span><br><span class="line"><span class="template-tag">{% <span class="name"><span class="name">endfor</span></span> %}</span></span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>reversed</p><ul><li>反转循环的执行顺序。注意和 reverse 过滤器（filter）的拼写是不同的<figure class="highlight gcode"><table><tbody><tr><td class="code"><pre><span class="line">{<span class="meta">%</span> cycle <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span> <span class="meta">%</span>}</span><br></pre></td></tr></tbody></table></figure></li></ul></li></ul><p>将 cycle 代码块放入 for 循环中 每次执行都会输出参数中的下一个</p><ul><li>tablerow<ul><li>生成一个 HTML 表格。必须用和<table></table>这两个 HTML 标签将其包裹起来</li><li>cols 定义表格应当有多少列</li><li>limit 在执行到指定的脚标（index）之后退出 tablerow</li><li>offset 在指定的脚标（index）之后开始执行 tablerow</li><li>range 定义循环执行的范围。可利用数字和变量来定义执行范围<figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">{% <span class="name">tablerow</span> product <span class="keyword">in</span> collection.products %}</span></span><br><span class="line"><span class="xml">  </span><span class="template-variable">{{ product.title }}</span></span><br><span class="line"><span class="template-tag">{% <span class="name">endtablerow</span> %}</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure></li></ul></li></ul><h3 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h3><h4 id="assign-声明"><a href="#assign-声明" class="headerlink" title="assign 声明"></a>assign 声明</h4><figure class="highlight autoit"><table><tbody><tr><td class="code"><pre><span class="line">{% <span class="built_in">assign</span> 变量=<span class="string">''</span> %}</span><br></pre></td></tr></tbody></table></figure><h4 id="capture-声明"><a href="#capture-声明" class="headerlink" title="capture 声明"></a>capture 声明</h4><figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="template-tag">{% <span class="name">capture</span> 变量 %}</span></span><br><span class="line"><span class="xml">I am being captured.</span></span><br><span class="line"><span class="template-tag">{% <span class="name">endcapture</span> %}</span></span><br></pre></td></tr></tbody></table></figure><h4 id="increment-声明数值变量-0"><a href="#increment-声明数值变量-0" class="headerlink" title="increment 声明数值变量 0"></a>increment 声明数值变量 0</h4><p>每次调用此变量 值 加1<br>初始值为 0</p><figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="template-tag">{% <span class="name">increment</span> my_counter %}</span></span><br><span class="line"><span class="template-tag">{% <span class="name">increment</span> my_counter %}</span></span><br><span class="line"><span class="template-tag">{% <span class="name">increment</span> my_counter %}</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight angelscript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></tbody></table></figure><h4 id="decrement-声明数值变量-1"><a href="#decrement-声明数值变量-1" class="headerlink" title="decrement 声明数值变量 -1"></a>decrement 声明数值变量 -1</h4><p>每次调用此变量 值 减1<br>初始值为 -1</p><h3 id="原始内容"><a href="#原始内容" class="headerlink" title="原始内容"></a>原始内容</h3><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">{%<span class="built_in"> raw </span>%}</span><br><span class="line">  <span class="keyword">In</span> Handlebars, {{ this }} will be HTML-escaped, but</span><br><span class="line">  {{{ that }}} will <span class="keyword">not</span>.</span><br><span class="line">{% endraw %}</span><br></pre></td></tr></tbody></table></figure><p>对代码块中的内容 不做任何处理</p><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><h3 id="abs-绝对值"><a href="#abs-绝对值" class="headerlink" title="abs 绝对值"></a>abs 绝对值</h3><p>输入</p><figure class="highlight clojure"><table><tbody><tr><td class="code"><pre><span class="line">{{<span class="number">-8</span> | abs}}</span><br><span class="line">{{<span class="number">8</span> | abs}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight basic"><table><tbody><tr><td class="code"><pre><span class="line"><span class="symbol">8 </span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></tbody></table></figure><h3 id="append-追加字符串"><a href="#append-追加字符串" class="headerlink" title="append 追加字符串"></a>append 追加字符串</h3><p>输入</p><figure class="highlight clojure"><table><tbody><tr><td class="code"><pre><span class="line">{{<span class="string">"hello"</span> | append: ' word'}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight applescript"><table><tbody><tr><td class="code"><pre><span class="line">hello <span class="built_in">word</span></span><br></pre></td></tr></tbody></table></figure><h3 id="prepend-在字符前追加"><a href="#prepend-在字符前追加" class="headerlink" title="prepend 在字符前追加"></a>prepend 在字符前追加</h3><p>输入</p><figure class="highlight clojure"><table><tbody><tr><td class="code"><pre><span class="line">{{ <span class="string">"word"</span> | prepend: 'hello '}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight applescript"><table><tbody><tr><td class="code"><pre><span class="line">hello <span class="built_in">word</span></span><br></pre></td></tr></tbody></table></figure><h3 id="at-least-限制数字最小值"><a href="#at-least-限制数字最小值" class="headerlink" title="at_least 限制数字最小值"></a>at_least 限制数字最小值</h3><p>输入</p><figure class="highlight angelscript"><table><tbody><tr><td class="code"><pre><span class="line">{{ <span class="number">5</span> | at_least:<span class="number">6</span>}}</span><br><span class="line">{{ <span class="number">7</span> | at_least:<span class="number">6</span>}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight angelscript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></tbody></table></figure><h3 id="at-most-限制数字最大值"><a href="#at-most-限制数字最大值" class="headerlink" title="at_most 限制数字最大值"></a>at_most 限制数字最大值</h3><p>输入</p><figure class="highlight angelscript"><table><tbody><tr><td class="code"><pre><span class="line">{{ <span class="number">5</span> | at_most:<span class="number">6</span>}}</span><br><span class="line">{{ <span class="number">7</span> | at_most:<span class="number">6</span>}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight angelscript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></tbody></table></figure><h3 id="capitalize-首字母大写"><a href="#capitalize-首字母大写" class="headerlink" title="capitalize 首字母大写"></a>capitalize 首字母大写</h3><p>输入</p><figure class="highlight clojure"><table><tbody><tr><td class="code"><pre><span class="line">{{<span class="string">"text"</span> | capitalize}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight arcade"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">Text</span></span><br></pre></td></tr></tbody></table></figure><h3 id="ceil-将浮点数向上取整"><a href="#ceil-将浮点数向上取整" class="headerlink" title="ceil 将浮点数向上取整"></a>ceil 将浮点数向上取整</h3><p>输入</p><figure class="highlight clojure"><table><tbody><tr><td class="code"><pre><span class="line">{{<span class="number">3.1415926</span> | ceil}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight angelscript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">4</span></span><br></pre></td></tr></tbody></table></figure><h3 id="floor-浮点数详向下取整"><a href="#floor-浮点数详向下取整" class="headerlink" title="floor 浮点数详向下取整"></a>floor 浮点数详向下取整</h3><p>输入</p><figure class="highlight clojure"><table><tbody><tr><td class="code"><pre><span class="line">{{<span class="number">9.9</span> | floor}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight angelscript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">9</span></span><br></pre></td></tr></tbody></table></figure><h3 id="round-四舍五入-保留-位小数"><a href="#round-四舍五入-保留-位小数" class="headerlink" title="round 四舍五入 保留 * 位小数"></a>round 四舍五入 保留 * 位小数</h3><p>输入</p><figure class="highlight clojure"><table><tbody><tr><td class="code"><pre><span class="line">{{<span class="number">1.4</span> | round}}</span><br><span class="line">{{<span class="number">1.5</span> | round}}</span><br><span class="line">{{<span class="number">3.1415926</span> | round: <span class="number">3</span>}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight angelscript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3.142</span></span><br></pre></td></tr></tbody></table></figure><h3 id="compact-删除数组中所有-nil-值"><a href="#compact-删除数组中所有-nil-值" class="headerlink" title="compact 删除数组中所有 nil 值"></a>compact 删除数组中所有 nil 值</h3><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="uniq-删除数组中所有-冗余项"><a href="#uniq-删除数组中所有-冗余项" class="headerlink" title="uniq 删除数组中所有 冗余项"></a>uniq 删除数组中所有 冗余项</h3><p>输入</p><figure class="highlight clojure"><table><tbody><tr><td class="code"><pre><span class="line">{{<span class="string">"1,2,3,4,5,6,8,5,4,2,3,1,7,9,5"</span> | split: ',' | uniq}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight angelscript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">9</span></span><br></pre></td></tr></tbody></table></figure><h3 id="concat-合并数组"><a href="#concat-合并数组" class="headerlink" title="concat 合并数组"></a>concat 合并数组</h3><p>输入</p><figure class="highlight smali"><table><tbody><tr><td class="code"><pre><span class="line">{%- assign array1 = <span class="string">"a,b,c"</span>| split: ',' -%}</span><br><span class="line">{%- assign array2 = <span class="string">"d,e,f"</span>| split: ',' -%}</span><br><span class="line">{%- assign<span class="built_in"> array </span>= array1 | concat: array2 -%}</span><br><span class="line">{%- for item in<span class="built_in"> array </span>|compact-%}</span><br><span class="line">  &lt;div&gt;{{item}}&lt;/div&gt;</span><br><span class="line">{%- endfor -%}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br><span class="line">e</span><br><span class="line">f</span><br></pre></td></tr></tbody></table></figure><h3 id="date-转换时间格式"><a href="#date-转换时间格式" class="headerlink" title="date 转换时间格式"></a>date 转换时间格式</h3><ul><li>%Y 年</li><li>%y 年（后两位）</li><li>%m 月</li><li>%b 月（英文单词）</li><li>%h 月（英文单词）</li><li>%d 日</li><li>%H 时</li><li>%M 分</li><li>%S 秒</li><li>%s 时间戳</li><li>%a 星期</li><li>%A 星期（全）</li></ul><p>输入</p><figure class="highlight perl"><table><tbody><tr><td class="code"><pre><span class="line">{{<span class="string">"now"</span> |date:<span class="string">"%Y-%m-%d %H:%M"</span>}}</span><br><span class="line">{{<span class="string">"today"</span> |date:<span class="string">"%Y-%m-%d %H:%M"</span>}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight angelscript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">2020</span><span class="number">-05</span><span class="number">-03</span> <span class="number">11</span>:<span class="number">56</span></span><br><span class="line"><span class="number">2020</span><span class="number">-05</span><span class="number">-03</span> <span class="number">11</span>:<span class="number">56</span></span><br></pre></td></tr></tbody></table></figure><h3 id="default-默认值"><a href="#default-默认值" class="headerlink" title="default 默认值"></a>default 默认值</h3><p>当变量未定义或为空时，输出默认值<br>输入</p><figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="template-variable">{{nub |<span class="name">default</span>:555 }}</span></span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight angelscript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">555</span></span><br></pre></td></tr></tbody></table></figure><p>输入</p><figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="template-tag">{%- <span class="name">assign</span> nub = 666 -%}</span></span><br><span class="line"><span class="template-variable">{{nub |<span class="name">default</span>:555 }}</span></span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight angelscript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">666</span></span><br></pre></td></tr></tbody></table></figure><h3 id="plus-将两数相加"><a href="#plus-将两数相加" class="headerlink" title="plus 将两数相加"></a>plus 将两数相加</h3><p>输入</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">{{</span> <span class="number">5</span> <span class="string">|</span> <span class="attr">plus:</span> <span class="number">6</span><span class="string">}}</span></span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight angelscript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">11</span></span><br></pre></td></tr></tbody></table></figure><h3 id="minus-将两数相减"><a href="#minus-将两数相减" class="headerlink" title="minus 将两数相减"></a>minus 将两数相减</h3><p>输入</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">{{</span> <span class="number">8</span> <span class="string">|</span> <span class="attr">minus:</span> <span class="number">5</span><span class="string">}}</span></span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight angelscript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></tbody></table></figure><h3 id="times-将两数相乘"><a href="#times-将两数相乘" class="headerlink" title="times 将两数相乘"></a>times 将两数相乘</h3><p>输入</p><figure class="highlight angelscript"><table><tbody><tr><td class="code"><pre><span class="line">{{<span class="number">8</span>   | times: <span class="number">6</span>}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight angelscript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">48</span></span><br></pre></td></tr></tbody></table></figure><h3 id="divided-by-将两数相除"><a href="#divided-by-将两数相除" class="headerlink" title="divided_by 将两数相除"></a>divided_by 将两数相除</h3><p>输入</p><figure class="highlight angelscript"><table><tbody><tr><td class="code"><pre><span class="line">{{<span class="number">17</span> | divided_by: <span class="number">4</span>}}</span><br><span class="line">{{<span class="number">17</span> | divided_by: <span class="number">4.0</span>}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight angelscript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">4.25</span></span><br><span class="line"><span class="number">4.25</span></span><br></pre></td></tr></tbody></table></figure><h3 id="modulo-求余"><a href="#modulo-求余" class="headerlink" title="modulo 求余"></a>modulo 求余</h3><p>输入</p><figure class="highlight angelscript"><table><tbody><tr><td class="code"><pre><span class="line">{{ <span class="number">10</span> | modulo:<span class="number">6</span>}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight angelscript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><h3 id="downcase-将字符串转为小写"><a href="#downcase-将字符串转为小写" class="headerlink" title="downcase 将字符串转为小写"></a>downcase 将字符串转为小写</h3><p>输入</p><figure class="highlight clojure"><table><tbody><tr><td class="code"><pre><span class="line">{{<span class="string">"ABCDEFG"</span> | downcase }}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">abcdefg</span></span><br></pre></td></tr></tbody></table></figure><h3 id="upcase-将字符串转为大写"><a href="#upcase-将字符串转为大写" class="headerlink" title="upcase 将字符串转为大写"></a>upcase 将字符串转为大写</h3><p>输入</p><figure class="highlight clojure"><table><tbody><tr><td class="code"><pre><span class="line">{{<span class="string">"abcdefg"</span> | upcase }}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">ABCDEFG</span></span><br></pre></td></tr></tbody></table></figure><h3 id="first-输出数组第一项"><a href="#first-输出数组第一项" class="headerlink" title="first 输出数组第一项"></a>first 输出数组第一项</h3><p>输入</p><figure class="highlight smali"><table><tbody><tr><td class="code"><pre><span class="line">{% assign<span class="built_in"> array </span>= <span class="string">"1,2,3,4,5,6"</span>  | split: ',' %}</span><br><span class="line">{{array|first }}</span><br><span class="line">{{array.first }}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="join-将数组连接成字符串"><a href="#join-将数组连接成字符串" class="headerlink" title="join 将数组连接成字符串"></a>join 将数组连接成字符串</h3><p>参数为连接符</p><p>输入</p><figure class="highlight smali"><table><tbody><tr><td class="code"><pre><span class="line">{% assign<span class="built_in"> array </span>= <span class="string">"a,b,c,d,e,f,g"</span> | split: ',' %}</span><br><span class="line">{{array | join: '-'}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">a-b-c<span class="_">-d</span><span class="_">-e</span><span class="_">-f</span>-g</span><br></pre></td></tr></tbody></table></figure><h3 id="lstrip-删除字符左侧-空格-制表符-换行符"><a href="#lstrip-删除字符左侧-空格-制表符-换行符" class="headerlink" title="lstrip  删除字符左侧 空格 制表符 换行符"></a>lstrip 删除字符左侧 空格 制表符 换行符</h3><p>输入</p><figure class="highlight clojure"><table><tbody><tr><td class="code"><pre><span class="line">{{<span class="string">"                s  t r i n g            "</span> | lstrip}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight excel"><table><tbody><tr><td class="code"><pre><span class="line">s <span class="built_in">t</span> r i <span class="built_in">n</span> g</span><br></pre></td></tr></tbody></table></figure><h3 id="rstrip-删除字符右侧-空格-制表符-换行符"><a href="#rstrip-删除字符右侧-空格-制表符-换行符" class="headerlink" title="rstrip  删除字符右侧 空格 制表符 换行符"></a>rstrip 删除字符右侧 空格 制表符 换行符</h3><p>输入</p><figure class="highlight clojure"><table><tbody><tr><td class="code"><pre><span class="line">{{<span class="string">"                s  t r i n g            "</span> | rstrip}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight excel"><table><tbody><tr><td class="code"><pre><span class="line">s  <span class="built_in">t</span> r i <span class="built_in">n</span> g</span><br></pre></td></tr></tbody></table></figure><h3 id="strip-删除字符串两侧-空格-制表符-换行符"><a href="#strip-删除字符串两侧-空格-制表符-换行符" class="headerlink" title="strip 删除字符串两侧 空格 制表符 换行符"></a>strip 删除字符串两侧 空格 制表符 换行符</h3><p>输入</p><figure class="highlight clojure"><table><tbody><tr><td class="code"><pre><span class="line">{{<span class="string">"                s  t r i n g            "</span> | rstrip}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight excel"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">t</span> r i <span class="built_in">n</span> g</span><br></pre></td></tr></tbody></table></figure><h3 id="strip-html-删除字符串内-html-标签"><a href="#strip-html-删除字符串内-html-标签" class="headerlink" title="strip_html 删除字符串内 html 标签"></a>strip_html 删除字符串内 html 标签</h3><p>输入</p><figure class="highlight applescript"><table><tbody><tr><td class="code"><pre><span class="line">Have you <span class="built_in">read</span> Ulysses?</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="strip-newlines-删除字符串内-换行-字符"><a href="#strip-newlines-删除字符串内-换行-字符" class="headerlink" title="strip_newlines 删除字符串内 换行 字符"></a>strip_newlines 删除字符串内 换行 字符</h3><p>输入</p><figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="template-tag">{% <span class="name">capture</span> string %}</span></span><br><span class="line"><span class="xml">Hello</span></span><br><span class="line"><span class="xml">there</span></span><br><span class="line"><span class="template-tag">{% <span class="name">endcapture</span> %}</span></span><br><span class="line"><span class="template-variable">{{string | strip_newlines }}</span></span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">Hellothere</span></span><br></pre></td></tr></tbody></table></figure><h3 id="newline-to-br-将换行符转为"><a href="#newline-to-br-将换行符转为" class="headerlink" title="newline_to_br 将换行符转为 "></a>newline_to_br 将换行符转为<br></h3><p>输入</p><figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="template-tag">{% <span class="name">capture</span> string %}</span></span><br><span class="line"><span class="xml">Hello</span></span><br><span class="line"><span class="xml">there</span></span><br><span class="line"><span class="template-tag">{% <span class="name">endcapture</span> %}</span></span><br><span class="line"><span class="template-variable">{{string | newline_to_br}}</span></span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">Hello<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">there<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="remove-删除字符串中出现的-子字符"><a href="#remove-删除字符串中出现的-子字符" class="headerlink" title="remove 删除字符串中出现的 子字符"></a>remove 删除字符串中出现的 子字符</h3><p>输入</p><figure class="highlight clojure"><table><tbody><tr><td class="code"><pre><span class="line">{{ <span class="string">"abcdefg"</span> | remove: 'cd'}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">abefg</span></span><br></pre></td></tr></tbody></table></figure><h3 id="remove-first-删除第一个匹配到的-子字符"><a href="#remove-first-删除第一个匹配到的-子字符" class="headerlink" title="remove_first 删除第一个匹配到的 子字符"></a>remove_first 删除第一个匹配到的 子字符</h3><p>输入</p><figure class="highlight clojure"><table><tbody><tr><td class="code"><pre><span class="line">{{ <span class="string">"abcdcdefg"</span> | remove_first: 'cd'}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">abcdefg</span></span><br></pre></td></tr></tbody></table></figure><h3 id="replace-替换字符"><a href="#replace-替换字符" class="headerlink" title="replace 替换字符"></a>replace 替换字符</h3><p>找到字符并替换掉</p><p>输入</p><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line">{{ <span class="string">"abcdcdefg"</span> | <span class="string">replace:</span> <span class="string">'c'</span>, <span class="string">'d'</span>}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">abddddefg</span></span><br></pre></td></tr></tbody></table></figure><h3 id="replace-first-替换字符"><a href="#replace-first-替换字符" class="headerlink" title="replace_first 替换字符"></a>replace_first 替换字符</h3><p>将字符串中出现的第一个参数替换为第二个参数<br>输入</p><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line">{{ <span class="string">"abcdcdefg"</span> | <span class="string">replace_first:</span> <span class="string">'c'</span>, <span class="string">'d'</span>}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">abddcdefg</span></span><br></pre></td></tr></tbody></table></figure><h3 id="reverse-翻转数组"><a href="#reverse-翻转数组" class="headerlink" title="reverse 翻转数组"></a>reverse 翻转数组</h3><p>输入</p><figure class="highlight smali"><table><tbody><tr><td class="code"><pre><span class="line">{% assign<span class="built_in"> array </span>= <span class="string">"1,2,3,4,5,6"</span> | split: ',' %}</span><br><span class="line">{{array | reverse }}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight angelscript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><h3 id="size-字符长度-大小"><a href="#size-字符长度-大小" class="headerlink" title="size 字符长度 大小"></a>size 字符长度 大小</h3><p>输入</p><figure class="highlight clojure"><table><tbody><tr><td class="code"><pre><span class="line">{{<span class="string">"s t r i n g"</span> |  size}}</span><br><span class="line">{% assign str = <span class="string">"s t r i n g"</span> %}</span><br><span class="line">{{str.size}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight angelscript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">11</span></span><br></pre></td></tr></tbody></table></figure><h3 id="slice-截取字符串"><a href="#slice-截取字符串" class="headerlink" title="slice 截取字符串"></a>slice 截取字符串</h3><p>输入</p><figure class="highlight clojure"><table><tbody><tr><td class="code"><pre><span class="line">{{<span class="string">"123456"</span>  | slice: <span class="number">0</span>}}</span><br><span class="line">{{<span class="string">"123456"</span>  | slice: <span class="number">2</span>,<span class="number">2</span>}}</span><br><span class="line">{{<span class="string">"123456"</span>  | slice: <span class="number">-1</span>}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight angelscript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">34</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></tbody></table></figure><h3 id="sort-排序-按照字母大小写"><a href="#sort-排序-按照字母大小写" class="headerlink" title="sort 排序 按照字母大小写"></a>sort 排序 按照字母大小写</h3><p>区分大小写<br>输入</p><figure class="highlight smali"><table><tbody><tr><td class="code"><pre><span class="line">{%- assign<span class="built_in"> array </span>= <span class="string">"a,f,r,S,d,g,O,y"</span> | split: ',' -%}</span><br><span class="line">{{-array| sort-}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight autohotkey"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">O,</span>S,a,d,f,g,r,y</span><br></pre></td></tr></tbody></table></figure><h3 id="sort-natural-排序-不按照字母大小写"><a href="#sort-natural-排序-不按照字母大小写" class="headerlink" title="sort_natural  排序 不按照字母大小写"></a>sort_natural 排序 不按照字母大小写</h3><p>不区分大小写<br>输入</p><figure class="highlight smali"><table><tbody><tr><td class="code"><pre><span class="line">{%- assign<span class="built_in"> array </span>= <span class="string">"a,f,r,S,d,g,O,y"</span> | split: ',' -%}</span><br><span class="line">{{-array| sort_natural -}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight autohotkey"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">a,</span>d,f,g,O,r,S,y</span><br></pre></td></tr></tbody></table></figure><h3 id="split-分割字符串为数组"><a href="#split-分割字符串为数组" class="headerlink" title="split 分割字符串为数组"></a>split 分割字符串为数组</h3><p>输入</p><figure class="highlight smali"><table><tbody><tr><td class="code"><pre><span class="line">{%- assign<span class="built_in"> array </span>= <span class="string">"a,f,r,S,d,g,O,y"</span> | split: ',' -%}</span><br><span class="line">{{array}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight autohotkey"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">a,</span>f,r,S,d,g,O,y</span><br></pre></td></tr></tbody></table></figure><h3 id="truncate-裁剪字符串（字符个数）-省略号"><a href="#truncate-裁剪字符串（字符个数）-省略号" class="headerlink" title="truncate 裁剪字符串（字符个数） 省略号"></a>truncate 裁剪字符串（字符个数） 省略号</h3><p>输入</p><figure class="highlight clojure"><table><tbody><tr><td class="code"><pre><span class="line">{{<span class="string">"abcdefghijk"</span> | truncate: <span class="number">8</span>}}</span><br><span class="line">{{<span class="string">"abcdefghijk"</span> | truncate: <span class="number">8</span>,'...'}}</span><br><span class="line">{{<span class="string">"abcdefghijk"</span> | truncate: <span class="number">8</span>,'省略'}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight gams"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">abcde</span></span>... </span><br><span class="line"><span class="function"><span class="title">abcde</span></span>... </span><br><span class="line">abcdef省略</span><br></pre></td></tr></tbody></table></figure><h3 id="truncatewords-裁剪字符串（单词个数）-省略号"><a href="#truncatewords-裁剪字符串（单词个数）-省略号" class="headerlink" title="truncatewords 裁剪字符串（单词个数） 省略号"></a>truncatewords 裁剪字符串（单词个数） 省略号</h3><p>输入</p><figure class="highlight vim"><table><tbody><tr><td class="code"><pre><span class="line">{{<span class="string">"a b c d e f g h ijk"</span> | truncateword<span class="variable">s:</span> <span class="number">8</span>}}&lt;<span class="keyword">br</span>/&gt;</span><br><span class="line">{{<span class="string">"a b c d e f g h ijk"</span> | truncateword<span class="variable">s:</span> <span class="number">8</span>,<span class="string">'...'</span>}}&lt;<span class="keyword">br</span>/&gt;</span><br><span class="line">{{<span class="string">"a b c d e f g h ijk"</span> | truncateword<span class="variable">s:</span> <span class="number">8</span>,<span class="string">'省略'</span>}}&lt;<span class="keyword">br</span>/&gt;</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> <span class="selector-tag">b</span> c d e f g h...</span><br><span class="line"><span class="selector-tag">a</span> <span class="selector-tag">b</span> c d e f g h...</span><br><span class="line"><span class="selector-tag">a</span> <span class="selector-tag">b</span> c d e f g h省略</span><br></pre></td></tr></tbody></table></figure><h3 id="url-encode-将字符中-非url安全字符转换为百分号编码的字符"><a href="#url-encode-将字符中-非url安全字符转换为百分号编码的字符" class="headerlink" title="url_encode 将字符中 非url安全字符转换为百分号编码的字符"></a>url_encode 将字符中 非url安全字符转换为百分号编码的字符</h3><p>输入</p><figure class="highlight clojure"><table><tbody><tr><td class="code"><pre><span class="line">{{<span class="string">"baidu.com?q=@qq.com&amp;w=sd"</span> | url_encode }}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight angelscript"><table><tbody><tr><td class="code"><pre><span class="line">baidu.com%<span class="number">3</span>Fq%<span class="number">3</span>D%<span class="number">40</span>qq.com%<span class="number">26</span>w%<span class="number">3</span>Dsd</span><br></pre></td></tr></tbody></table></figure><h3 id="url-decode-将字符中-百分号编码的字符-解码"><a href="#url-decode-将字符中-百分号编码的字符-解码" class="headerlink" title="url_decode 将字符中 百分号编码的字符  解码"></a>url_decode 将字符中 百分号编码的字符 解码</h3><p>输入</p><figure class="highlight perl"><table><tbody><tr><td class="code"><pre><span class="line">{{<span class="string">"baidu.com%3Fq%3D%40qq.com%26w%3Dsd"</span> | url_decode }}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">baidu.com?<span class="attribute">q</span>=@qq.com&amp;w=sd</span><br></pre></td></tr></tbody></table></figure><!-- rebuild by neat --><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>文档</category>
        <category>Liquid</category>
      </categories>
      <tags>
        <tag>Shopify</tag>
        <tag>Liquid</tag>
      </tags>
  </entry>
  <entry>
    <title>shopify 自定义应用开发</title>
    <url>/2020/06/13/Shopify-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/15100/</url>
    <content><![CDATA[<p>公司要求开发一个 shopify 嵌入式应用，说实话，实在是有些坎坷，主要是英文文档😭😭，在这里自己做下记录。<br>Shopify Inc.是加拿大的一家跨国电子商务公司.Shopify为在线零售商提供一整套服务“包括支付、市场营销、运输和客户契合工具，以简化小型商户开设在线商店的过程</p><a id="more"></a><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>在开发之前呢，首先你需要准备一个 <code>开发者账号</code>。 <a href="https://partners.shopify.com/signup" target="_blank" rel="noopener">创建一个 Shopify 合作伙伴账户</a></p><p>官方推荐使用 React Next 作为渲染框架 node 作为服务器后端开发 使用 GraphQL Apollo 作为查询语言 使用 Polaris 作为 UI组件库</p><h3 id="首先要确保自己安装了-Node-js"><a href="#首先要确保自己安装了-Node-js" class="headerlink" title="首先要确保自己安装了 Node.js"></a>首先要确保自己安装了 Node.js</h3><p>运行一下命令 检查 node 版本</p><figure class="highlight crmsh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">node</span> <span class="title">-v</span></span><br></pre></td></tr></tbody></table></figure><p>如果已经安装，请确保您使用的是8.1.0或更高版本。</p><h3 id="创建项目文件夹"><a href="#创建项目文件夹" class="headerlink" title="创建项目文件夹"></a>创建项目文件夹</h3><p>创建文件夹 shopify_app</p><p>进入到项目文件夹</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> shopify_app</span><br></pre></td></tr></tbody></table></figure><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><figure class="highlight coffeescript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> init -y</span><br></pre></td></tr></tbody></table></figure><h3 id="使用-Next-js-构建-React-支架"><a href="#使用-Next-js-构建-React-支架" class="headerlink" title="使用 Next.js 构建 React 支架"></a>使用 Next.js 构建 React 支架</h3><p>安装 Next React ReactDOM</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> react react-dom <span class="keyword">next</span> <span class="comment">--save</span></span><br></pre></td></tr></tbody></table></figure><p>在根目录中创建 pages 文件夹<br>在 pages 文件夹中添加 index.js</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Index = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;Sample app using React and Next.js&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Index;</span><br></pre></td></tr></tbody></table></figure><p>修改 package.json 文件</p><figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"scripts"</span>: {</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"next"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"next build"</span>,</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"next start"</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h4><figure class="highlight dockerfile"><table><tbody><tr><td class="code"><pre><span class="line">npm <span class="keyword">run</span><span class="bash"> dev</span></span><br></pre></td></tr></tbody></table></figure><h3 id="将应用嵌入-Shopify"><a href="#将应用嵌入-Shopify" class="headerlink" title="将应用嵌入 Shopify"></a>将应用嵌入 Shopify</h3><p>安装 ngrok koa @shopify/koa-shopify-auth dotenv koa-session isomorphic-fetch @zeit/next-css @shopify/polaris @shopify/app-bridge-react js-cookie</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> ngrok -g</span><br><span class="line">npm <span class="keyword">install</span> koa @shopify/koa-shopify-auth dotenv koa-<span class="keyword">session</span> isomorphic-<span class="keyword">fetch</span> <span class="comment">--save</span></span><br></pre></td></tr></tbody></table></figure><p>运行</p><figure class="highlight angelscript"><table><tbody><tr><td class="code"><pre><span class="line">ngrok http <span class="number">3000</span></span><br></pre></td></tr></tbody></table></figure><h4 id="获取-shopifyAPI秘钥-和-shopifyAPI秘密秘钥"><a href="#获取-shopifyAPI秘钥-和-shopifyAPI秘密秘钥" class="headerlink" title="获取 shopifyAPI秘钥 和 shopifyAPI秘密秘钥"></a>获取 shopifyAPI秘钥 和 shopifyAPI秘密秘钥</h4><p>通过登录 <a href="https://partners.shopify.com/signup" target="_blank" rel="noopener">Shopify 合作伙伴账户</a> 创建一个应用程序<br>获取。您可以创建： 公共应用程序 自定义应用程序 私人应用程序<br>这里我们创建 自定义应用程序</p><p>在 <code>应用程序URL</code> 中填入 ngrok转发URL的HTTPS版本<br>将相同的HTTPS转发URL粘贴到 <code>列入白名单的重定向URL</code> 字段中，并将 /auth/ allback 添加到路径的末尾<br>然后 创建应用</p><p>然后在根目录创建 .env 文件</p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">SHOPIFY_API_KEY = '您的来自SHOPIFY PARTNERS仪表板的API密钥' </span><br><span class="line">SHOPIFY_API_SECRET_KEY = '您的来自SHOPIFY PARTNERS仪表板的API密钥'</span><br></pre></td></tr></tbody></table></figure><h4 id="设置-Node-js-服务器-OAuth-授权认证"><a href="#设置-Node-js-服务器-OAuth-授权认证" class="headerlink" title="设置 Node.js 服务器 OAuth 授权认证"></a>设置 Node.js 服务器 OAuth 授权认证</h4><p>在项目根目录中 创建 server.js 文件</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'isomorphic-fetch'</span>)</span><br><span class="line"><span class="keyword">const</span> dotenv = <span class="built_in">require</span>(<span class="string">'dotenv'</span>)</span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> next = <span class="built_in">require</span>(<span class="string">'next'</span>)</span><br><span class="line"><span class="keyword">const</span> { <span class="attr">default</span>: createShopifyAuth } = <span class="built_in">require</span>(<span class="string">'@shopify/koa-shopify-auth'</span>)</span><br><span class="line"><span class="keyword">const</span> { verifyRequest } = <span class="built_in">require</span>(<span class="string">'@shopify/koa-shopify-auth'</span>)</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'koa-session'</span>)</span><br><span class="line">dotenv.config()</span><br><span class="line"><span class="comment">// graphql的相关中间件</span></span><br><span class="line"><span class="keyword">const</span> { <span class="attr">default</span>: graphQLProxy } = <span class="built_in">require</span>(<span class="string">'@shopify/koa-shopify-graphql-proxy'</span>)</span><br><span class="line"><span class="keyword">const</span> { ApiVersion } = <span class="built_in">require</span>(<span class="string">'@shopify/koa-shopify-graphql-proxy'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="built_in">parseInt</span>(process.env.PORT, <span class="number">10</span>) || <span class="number">3000</span></span><br><span class="line"><span class="keyword">const</span> dev = process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line"><span class="keyword">const</span> app = next({ dev })</span><br><span class="line"><span class="keyword">const</span> handle = app.getRequestHandler()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> { SHOPIFY_API_SECRET_KEY, SHOPIFY_API_KEY } = process.env <span class="comment">// 环境变量里读取 api-key与api-secret-key</span></span><br><span class="line"></span><br><span class="line">app.prepare().then(<span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">    <span class="keyword">const</span> server = <span class="keyword">new</span> Koa()</span><br><span class="line">    server.use(session(server))</span><br><span class="line">    server.keys = [SHOPIFY_API_SECRET_KEY]</span><br><span class="line">    server.use(</span><br><span class="line">        createShopifyAuth({</span><br><span class="line">        apiKey: SHOPIFY_API_KEY,</span><br><span class="line">            secret: SHOPIFY_API_SECRET_KEY,</span><br><span class="line">            scopes: [<span class="string">'read_products'</span>, <span class="string">'write_products'</span>,<span class="string">'read_orders'</span>], <span class="comment">//填写相关应用api相关请求的权限</span></span><br><span class="line">            afterAuth (ctx) {</span><br><span class="line">                <span class="keyword">const</span> { shop, accessToken } = ctx.session <span class="comment">// 通过session拿取相关商店地址以及请求api需要的accessToken</span></span><br><span class="line">                ctx.cookies.set(<span class="string">'shopOrigin'</span>, shop, { <span class="attr">httpOnly</span>: <span class="literal">false</span> })</span><br><span class="line">                ctx.redirect(<span class="string">'/'</span>) <span class="comment">// 重定向到index首页</span></span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    server.use(verifyRequest())</span><br><span class="line">    server.use(<span class="keyword">async</span> (ctx) =&gt; {</span><br><span class="line">        <span class="keyword">await</span> handle(ctx.req, ctx.res)</span><br><span class="line">        ctx.respond = <span class="literal">false</span></span><br><span class="line">        ctx.res.statusCode = <span class="number">200</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    })</span><br><span class="line"></span><br><span class="line">    server.use(graphQLProxy({ <span class="attr">version</span>: ApiVersion.October19 })) <span class="comment">// 这里填写相关api的版本</span></span><br><span class="line">    server.listen(port, () =&gt; {</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`&gt; Ready on http://localhost:<span class="subst">${port}</span>`</span>) <span class="comment">// 监听端口</span></span><br><span class="line">    })</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>修改 package.json 文件</p><figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"scripts"</span>: {</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"node server.js"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"next build"</span>,</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"NODE_ENV=production node server.js"</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>然后启动项目 将应用安装到自己的测试商店 就可以看到自己的应用已经成功运行了！</p><p>Shopify 官方文档<br><a href="https://shopify.dev/concepts/shopify-introduction" target="_blank" rel="noopener">Shopify developers</a></p><!-- rebuild by neat --><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Shopify</category>
      </categories>
      <tags>
        <tag>shopify</tag>
        <tag>next.js</tag>
        <tag>node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Redux 小试牛刀</title>
    <url>/2020/06/07/Redux-%E5%B0%8F%E8%AF%95%E7%89%9B%E5%88%80/37966/</url>
    <content><![CDATA[<p>在使用 Redux 之前，首先要了解为什么使用 Redux。</p><blockquote><p>随着 JavaScript 单页应用开发日趋复杂，JavaScript 需要管理比任何时候都要多的 state （状态）。 这些 state 可能包括服务器响应、缓存数据、本地生成尚未持久化到服务器的数据，也包括 UI 状态，如激活的路由，被选中的标签，是否显示加载动效或者分页器等等。</p></blockquote><a id="more"></a><h3 id="Redux-三要素"><a href="#Redux-三要素" class="headerlink" title="Redux 三要素"></a>Redux 三要素</h3><ul><li>Action（将要发生的操作）</li><li>Reducer（根据 action 更新 state，是一个纯函数）<ul><li>提供 combineReducers(reducers) 函数组合多个 reducer</li></ul></li><li>存放 state 数据的 Store（将 action 和 reducer 联系到一起的对象）<ul><li>提供 getState() 方法获取 state</li><li>提供 dispatch(action) 方法更新 state</li><li>通过 subsctibe(listener) 注册监听器</li><li>通过 subscribr(listener) 返回的函数注销监听器</li></ul></li></ul><h3 id="三大基本原则"><a href="#三大基本原则" class="headerlink" title="三大基本原则"></a>三大基本原则</h3><ol><li>单一数据源</li><li>state 是只读的，只能通过触发 action 修改 state</li><li>使用纯函数来执行修改</li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li>创建 reducer</li><li>创建 store 用于存储</li><li>绑定事件</li><li>定义 render 函数，更新视图</li><li>为 store 添加监听，每次状态发生变化即刻调用render函数渲染组件</li><li>初始化渲染默认数据</li></ol><p>我们用 Redux 来写一个计数器</p><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>编写 HTML 代码</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>计数器：<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"num"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"addNum()"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"minNum()"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"doubleness()"</span>&gt;</span>2倍<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"square()"</span>&gt;</span>平方<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="导入-redux-min-js"><a href="#导入-redux-min-js" class="headerlink" title="导入 redux.min.js"></a>导入 redux.min.js</h4><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">"./redux.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h4><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> addNum = <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">    <span class="keyword">let</span> action = {</span><br><span class="line">        type: <span class="string">'ADD_ONE'</span></span><br><span class="line">    }</span><br><span class="line">    store.dispatch(action)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> minNum = <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">    <span class="keyword">let</span> action = {</span><br><span class="line">        type: <span class="string">'MIN_ONE'</span></span><br><span class="line">    }</span><br><span class="line">    store.dispatch(action)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> doubleness = <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">    <span class="keyword">let</span> action = {</span><br><span class="line">        type: <span class="string">'DOUBLENESS'</span></span><br><span class="line">    }</span><br><span class="line">    store.dispatch(action)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> square = <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">    <span class="keyword">let</span> action = {</span><br><span class="line">        type: <span class="string">'SQUARE'</span></span><br><span class="line">    }</span><br><span class="line">    store.dispatch(action)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="创建纯函数"><a href="#创建纯函数" class="headerlink" title="创建纯函数"></a>创建纯函数</h4><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> counter = <span class="function">(<span class="params">state = <span class="number">0</span>, action</span>) =&gt;</span> {</span><br><span class="line">            <span class="keyword">switch</span> (action.type) {</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'ADD_ONE'</span>:</span><br><span class="line">                    <span class="keyword">return</span> state + <span class="number">1</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'MIN_ONE'</span>:</span><br><span class="line">                    <span class="keyword">return</span> state - <span class="number">1</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'DOUBLENESS'</span>:</span><br><span class="line">                    <span class="keyword">return</span> state * <span class="number">2</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'SQUARE'</span>:</span><br><span class="line">                    <span class="keyword">return</span> state * state</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">return</span> state</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br></pre></td></tr></tbody></table></figure><h4 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h4><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = Redux.createStore(counter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readen = <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'num'</span>).innerHTML = store.getState()</span><br><span class="line">    <span class="built_in">console</span>.log(store.getState());</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">readen()</span><br><span class="line">store.subscribe(readen)</span><br></pre></td></tr></tbody></table></figure><p><a href="https://www.redux.org.cn/" target="_blank" rel="noopener">Redux 中文文档</a></p><!-- rebuild by neat --><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Redux</category>
      </categories>
      <tags>
        <tag>Redux</tag>
      </tags>
  </entry>
  <entry>
    <title>OWL Carousel2</title>
    <url>/2020/05/24/OWL-Carousel2/13606/</url>
    <content><![CDATA[<p>Owl Carousel 是一个强大、实用但小巧的 jQuery 幻灯片插件，它具有一下特点：</p><ul><li>兼容所有浏览器</li><li>支持响应式</li><li>支持 CSS3 过度</li><li>支持触摸事件</li><li>支持 JSON 及自定义 JSON 格式</li><li>支持进度条</li><li>支持自定义事件</li><li>支持延迟加载</li><li>支持自适应高度</li></ul><p>Owl Carousel 提供了众多的参数、回调函数及自定义事件（具体请往下浏览），所以它几乎可以满足你的所有要求。</p><a id="more"></a><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><figure class="highlight gams"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built-in">div</span>#outer&gt;<span class="built-in">div</span>.item*<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">$</span>(<span class="string">'#outer'</span>).owlCarousel({</span><br><span class="line">  ...</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>作用</th></tr></thead><tbody><tr><td>items</td><td>Number</td><td>3</td><td>您想要在屏幕上看到的项目数。</td></tr><tr><td>margin</td><td>Number</td><td>0</td><td>项目上的margin-right（px）。</td></tr><tr><td>loop</td><td>Boolean</td><td>false</td><td>无限循环。复制最后一个和第一个项目以获得循环幻觉。</td></tr><tr><td>center</td><td>Boolean</td><td>false</td><td>中心项。适用于偶数个项目。</td></tr><tr><td>mouseDrag</td><td>Boolean</td><td>true</td><td>启用鼠标拖动。</td></tr><tr><td>touchDrag</td><td>Boolean</td><td>true</td><td>触摸拖动已启用</td></tr><tr><td>pullDrag</td><td>Boolean</td><td>true</td><td>舞台拉到边缘。</td></tr><tr><td>freeDrag</td><td>Boolean</td><td>false</td><td>项目拉到边缘。</td></tr><tr><td>stagePadding</td><td>Number</td><td>0</td><td>在舞台上左右滑动（可以看到邻居）。</td></tr><tr><td>merge</td><td>Boolean</td><td>false</td><td>合并项目。在项目内寻找data-merge =’{number}’。</td></tr><tr><td>mergeFit</td><td>Boolean</td><td>true</td><td>如果屏幕小于项目值，则适合合并的项目。</td></tr><tr><td>autoWidth</td><td>Boolean</td><td>false</td><td>设置非网格内容。尝试在div上使用宽度样式。</td></tr><tr><td>startPosition</td><td>Number/String</td><td>0</td><td>起始位置或URL哈希字符串，例如“ #id”。</td></tr><tr><td>URLhashListener</td><td>Boolean</td><td>false</td><td>监听网址哈希更改。项上的数据哈希是必需的。</td></tr><tr><td>nav</td><td>Boolean</td><td>false</td><td>显示下一个/上一个按钮。</td></tr><tr><td>rewind</td><td>Boolean</td><td>true</td><td>到达边界后向后走。</td></tr><tr><td>navText</td><td>Array</td><td>['next','prev']</td><td>允许HTML。</td></tr><tr><td>navElement</td><td>String</td><td>div</td><td>单个方向导航链接的DOM元素类型。</td></tr><tr><td>slideBy</td><td>Number/String</td><td>1</td><td>导航幻灯片x。可以将“page”字符串设置为逐页滑动。</td></tr><tr><td>slideTransition</td><td>String</td><td>``</td><td>您可以定义要使用的阶段的过渡，例如。线性的。</td></tr><tr><td>dots</td><td>Boolean</td><td>true</td><td>显示点导航。</td></tr><tr><td>dotsEach</td><td>Number/Boolean</td><td>false</td><td>每个x项目显示点。</td></tr><tr><td>dotsData</td><td>Boolean</td><td>false</td><td>由数据点内容使用。</td></tr><tr><td>lazyLoad</td><td>Boolean</td><td>false</td><td>延迟加载图像。data-src和data-src-retina用于高分辨率。如果元素不是<img>，也将图像加载为背景内联样式</td></tr><tr><td>lazyLoadEager</td><td>Number</td><td>0</td><td>根据要预加载的项目，将图像预先正确地预加载到右侧（启用循环时向左加载）。</td></tr><tr><td>autoplay</td><td>Boolean</td><td>false</td><td>自动播放。</td></tr><tr><td>autoplayTimeout</td><td>Number</td><td>5000</td><td>自动播放间隔超时。</td></tr><tr><td>autoplayHoverPause</td><td>Boolean</td><td>false</td><td>鼠标悬停时暂停。</td></tr><tr><td>smartSpeed</td><td>Number</td><td>250</td><td>速度计算。</td></tr><tr><td>fluidSpeed</td><td>Boolean</td><td>Number</td><td>速度计算</td></tr><tr><td>autoplaySpeed</td><td>Number/Boolean</td><td>false</td><td>自动播放速度。</td></tr><tr><td>navSpeed</td><td>Number/Boolean</td><td>false</td><td>导航速度。</td></tr><tr><td>dotsSpeed</td><td>Boolean</td><td>Number/Boolean</td><td>分页速度。</td></tr><tr><td>dragEndSpeed</td><td>Number/Boolean</td><td>false</td><td>拖动结束速度。</td></tr><tr><td>callbacks</td><td>Boolean</td><td>true</td><td>启用回调事件。</td></tr><tr><td>responsive</td><td>Object</td><td>empty object</td><td>包含响应选项的对象。可以设置为false以删除响应功能。</td></tr><tr><td>responsiveRefreshRate</td><td>Number</td><td>200</td><td>响应刷新率。</td></tr><tr><td>responsiveBaseElement</td><td>DOM element</td><td>window</td><td>在任何DOM元素上设置。如果您关心无响应的浏览器（例如ie8），请在主包装器上使用它。这将防止疯狂调整大小</td></tr><tr><td>video</td><td>Boolean</td><td>false</td><td>启用提取YouTube / Vimeo / Vzaar视频的功能。</td></tr><tr><td>videoHeight</td><td>Number/Boolean</td><td>false</td><td>设置视频的高度。</td></tr><tr><td>videoWidth</td><td>Number/Boolean</td><td>false</td><td>设置视频的宽度。</td></tr><tr><td>animateOut</td><td>String/Boolean</td><td>false</td><td>CSS3动画类。</td></tr><tr><td>animateIn</td><td>String/Boolean</td><td>false</td><td>输入CSS3动画的类。</td></tr><tr><td>fallbackEasing</td><td>String</td><td>swing</td><td>简化CSS2 $ .animate。</td></tr><tr><td>info</td><td>Function</td><td>false</td><td>回调以获取基本信息（当前项目/页面/宽度）。信息功能的第二个参数是Owl DOM对象引用。</td></tr><tr><td>nestedItemSelector</td><td>String/Class</td><td>false</td><td>如果猫头鹰项目深深嵌套在某些生成的内容中，请使用它。例如“ youritem”。在类名之前不要使用点号。</td></tr><tr><td>itemElement</td><td>String</td><td>div</td><td>用于owl-item的DOM元素类型。</td></tr><tr><td>stageElement</td><td>String</td><td>div</td><td>用于owl-item的DOM元素类型。</td></tr><tr><td>navContainer</td><td>String/Class/ID/Boolean</td><td>false</td><td>为nav设置自己的容器。</td></tr><tr><td>dotsContainer</td><td>String/Class/ID/Boolean</td><td>false</td><td>为nav设置自己的容器。</td></tr><tr><td>checkVisible</td><td>Boolean</td><td>true</td><td>如果您知道轮播总是可见的，则可以将checkVisibility设置为false，以防止昂贵的浏览器布局强制回流$ element.is（’：visible’）。</td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><p><a href="https://owlcarousel2.github.io/OwlCarousel2/docs/api-options.html" target="_blank" rel="noopener">OWL Carousel2官方文档</a></p><!-- rebuild by neat --><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>文档</category>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>jQuery插件</tag>
        <tag>jQuery轮播图</tag>
        <tag>OWL Carousel2</tag>
      </tags>
  </entry>
  <entry>
    <title>如何搭建React项目</title>
    <url>/2020/04/13/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BAReact%E9%A1%B9%E7%9B%AE/45936/</url>
    <content><![CDATA[<h2 id="React-是什么"><a href="#React-是什么" class="headerlink" title="React 是什么"></a>React 是什么</h2><p>React 是一个声明式，高效且灵活的用于构建用户界面的 JavaScript 库。使用 React 可以将一些简短、独立的代码片段组合成复杂的 UI 界面，这些代码片段被称作“组件”。</p><a id="more"></a><h2 id="React-项目搭建步骤"><a href="#React-项目搭建步骤" class="headerlink" title="React 项目搭建步骤"></a>React 项目搭建步骤</h2><ol><li>安装 Node npm 并检查其版本<figure class="highlight crmsh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">node</span> <span class="title">-v</span></span><br><span class="line">npm -v</span><br></pre></td></tr></tbody></table></figure></li><li>创建项目<figure class="highlight dsconfig"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">npx </span><span class="built_in">create-react-app</span> <span class="string">my-app</span></span><br></pre></td></tr></tbody></table></figure></li><li>打开项目<figure class="highlight dos"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> my-app</span><br><span class="line"></span><br><span class="line">npm <span class="built_in">start</span></span><br></pre></td></tr></tbody></table></figure></li></ol><!-- rebuild by neat --><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack（2）</title>
    <url>/2020/04/11/webpack%EF%BC%882%EF%BC%89/16618/</url>
    <content><![CDATA[<p>如何配置 webpack 转化器， webpack 插件， webpack 开发服务器呢？</p><a id="more"></a><h2 id="webpack-转化器"><a href="#webpack-转化器" class="headerlink" title="webpack 转化器"></a>webpack 转化器</h2><blockquote><p>loader 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。例如：less、sass等loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。test 属性，用于标识出应该被对应的 loader 进行转换的某个或某些文件。use 属性，表示进行转换时，应该使用哪个 loader。</p></blockquote><ul><li>例1 若要引用 css 样式，则要配置相应的配置</li></ul><ol><li>安装 style-loader css-loader<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="keyword">style</span>-loader css-loader</span><br></pre></td></tr></tbody></table></figure></li><li>在 module 下配置<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: {<span class="comment">// loladers 遵循module.rules规则</span></span><br><span class="line">    rules: [<span class="comment">// 规则</span></span><br><span class="line">        {<span class="comment">// 样式</span></span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]</span><br><span class="line">        }</span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><ul><li>例2 引用图片</li></ul><ol><li>安装 url-lolader file-loader<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="keyword">url</span>-lolader <span class="keyword">file</span>-loader</span><br></pre></td></tr></tbody></table></figure></li><li>在 module 下配置<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: {<span class="comment">// loladers 遵循module.rules规则</span></span><br><span class="line">        rules: [<span class="comment">// 规则</span></span><br><span class="line">            {<span class="comment">// 图片</span></span><br><span class="line">                test: <span class="regexp">/\.(gif|png|jpg)$/</span>,</span><br><span class="line">                use: [{</span><br><span class="line">                    loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                    options: {</span><br><span class="line">                        limit: <span class="number">500</span>,<span class="comment">// 限制文件大小 500kb</span></span><br><span class="line">                    }</span><br><span class="line">                }]</span><br><span class="line">            }</span><br><span class="line">        ]</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="webpack-插件"><a href="#webpack-插件" class="headerlink" title="webpack 插件"></a>webpack 插件</h2><blockquote><p>loader 被用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。插件接口功能极其强大，可以用来处理各种各样的任务。想要使用一个插件，你只需要 require() 它，然后把它添加到 plugins 数组中。多数插件可以通过选项(option)自定义。你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 new 操作符来创建它的一个实例。</p></blockquote><ul><li>配置模板，合并文件</li></ul><ol><li>安装 html-webpack-plugin<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> html-webpack-<span class="keyword">plugin</span></span><br></pre></td></tr></tbody></table></figure></li><li>配置<br>引入<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br></pre></td></tr></tbody></table></figure>在 plugins 下添加如下配置<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> HtmlWebpackPlugin({</span><br><span class="line">        filename: <span class="string">'index.html'</span>,<span class="comment">// 打包后的文件名字</span></span><br><span class="line">        chunks: [<span class="string">'index'</span>],<span class="comment">// 引入的文件,对应 entry 中的名字</span></span><br><span class="line">        title: <span class="string">'我是指定的标题'</span>,</span><br><span class="line">        template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">        hash: <span class="literal">true</span>,<span class="comment">// 防止浏览器缓存</span></span><br><span class="line">        minify: {<span class="comment">//压缩 html "" ''</span></span><br><span class="line">            collapseWhitespace: <span class="literal">true</span>,<span class="comment">// 折叠构成文档tr中的文本节点的空白</span></span><br><span class="line">            removeAttributeQuotes: <span class="literal">true</span>,<span class="comment">// 删除属性周围的引号</span></span><br><span class="line">        }</span><br><span class="line">    })</span><br></pre></td></tr></tbody></table></figure></li></ol><ul><li>为了避免每次手动删除 dist 文件夹 安装 clean-webpack-plugin 插件</li></ul><ol><li>安装<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> clean-webpack-<span class="keyword">plugin</span></span><br></pre></td></tr></tbody></table></figure></li><li>配置<br>引入<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> { CleanWebpackPlugin } = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>)</span><br></pre></td></tr></tbody></table></figure>在 plugins 下添加如下配置<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> CleanWebpackPlugin()<span class="comment">// 删除 dist 文件夹</span></span><br></pre></td></tr></tbody></table></figure></li></ol><ul><li>如果有静态文件，该怎么输出到 public 文件夹呢？可以安装 copy-webpack-plugin</li></ul><ol><li>安装<figure class="highlight dockerfile"><table><tbody><tr><td class="code"><pre><span class="line">npm install <span class="keyword">copy</span><span class="bash">-webpack-plugin</span></span><br></pre></td></tr></tbody></table></figure></li><li>配置<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">'copy-webpack-plugin'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> CopyWebpackPlugin([<span class="comment">// 静态资源输出</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">from</span>: path.relative(__dirname, <span class="string">'src/assets/'</span>),</span><br><span class="line">            to: <span class="string">'../public'</span></span><br><span class="line">        }</span><br><span class="line">    ])</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="webpack-开发服务器"><a href="#webpack-开发服务器" class="headerlink" title="webpack 开发服务器"></a>webpack 开发服务器</h2><ul><li>开发服务器的配置如下<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">devServer: {<span class="comment">// 开发服务器</span></span><br><span class="line">    contentBase: path.join(__dirname, <span class="string">"dist"</span>), <span class="comment">//设置服务器访问的基本目录</span></span><br><span class="line">    host: <span class="string">'localhost'</span>, <span class="comment">//服务器地址，localhost</span></span><br><span class="line">    port: <span class="number">9000</span>,<span class="comment">//端口号，如果deserver的配置没问题，但是项目启动失败了，需要注意该端口号是否被占用</span></span><br><span class="line">    compress: <span class="literal">true</span>,<span class="comment">//一切服务都启用 gzip 压缩</span></span><br><span class="line">    open: <span class="literal">true</span>,<span class="comment">//浏览器自动打开</span></span><br><span class="line">    <span class="comment">//hot:true,//webpack4之前的版本的配置：热更新，4以后被弱化不需要被配置会自动刷新</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>官网地址：<a href="https://www.webpackjs.com/configuration/dev-server/#devserver" target="_blank" rel="noopener">https://www.webpackjs.com/configuration/dev-server/#devserver</a></li></ul><!-- rebuild by neat --><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
        <tag>开发服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack入门</title>
    <url>/2020/03/30/webpack%E5%85%A5%E9%97%A8/23985/</url>
    <content><![CDATA[<p>webpack 是基于Node.js开发出来的一个前端项目构建工具。可以看做是模块打包机（bundler），通过分析项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Sass/less（css预处理器），TypeScript等），并将其打包为合适的格式以供浏览器使用。</p><a id="more"></a><h2 id="为什么使用-webpack"><a href="#为什么使用-webpack" class="headerlink" title="为什么使用 webpack"></a>为什么使用 webpack</h2><ol><li>解决 JavaScript 和 CSS 的依赖问题<ul><li>文件加载顺序的问题会造成 css 没作用或 js 中变量和方法找不到</li></ul></li><li>性能优化<ul><li>文件合并</li><li>文件压缩</li></ul></li><li>提高开发效率<ul><li>单元测试</li><li>vebdor 前缀</li><li>代码分析</li></ul></li><li>版本升级</li></ol><h2 id="webpack-的作用"><a href="#webpack-的作用" class="headerlink" title="webpack 的作用"></a>webpack 的作用</h2><ol><li>将sass/less 等预编译的css语言转换成浏览器识别的css文件</li><li>能够将多个预编译文件打包成一个文件</li><li>打包image/styles/assets/scrips/等前端常用的文件</li><li>搭建开发环境开启服务器</li><li>监视文件改动，热部署。</li><li>将单文件组件(*.vue)类型的文件，转化成浏览器识别的内容</li></ol><h2 id="使用-webpack-搭建项目"><a href="#使用-webpack-搭建项目" class="headerlink" title="使用 webpack 搭建项目"></a>使用 webpack 搭建项目</h2><ol><li><p>首先新建一个项目目录 domewebpack<br><br>在终端进入该目录,初始化项目</p><figure class="highlight coffeescript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> init -y</span><br></pre></td></tr></tbody></table></figure></li><li><p>安装 <code>webpack</code> &amp; <code>webpack-cli</code></p><figure class="highlight avrasm"><table><tbody><tr><td class="code"><pre><span class="line">npm i webpack webpack-<span class="keyword">cli</span> -D</span><br></pre></td></tr></tbody></table></figure></li><li><p>创建文件<br>在项目根目录下创建 src 文件夹（放置入口文件的地方，源码也放在这里）<br>在项目根目录下创建 dist 文件夹（出口文件方式的地方）</p></li><li><p>创建dist/index.html文件,包含id=root的元素，引入bundle.js</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>创建src/index.js，里面给root元素设置innerhtml</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'root'</span>).innerHTML=<span class="string">'webpack项目'</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>在项目根目录下创建 webpack.config.js 文件</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">    mode: <span class="string">'development'</span>,<span class="comment">// 发布版：production 开发板：development</span></span><br><span class="line">    entry: {<span class="comment">// 入口</span></span><br><span class="line">        entryKey: <span class="string">'./src/index.js'</span>,<span class="comment">// entryKey 是自定义的</span></span><br><span class="line">    },</span><br><span class="line">    <span class="comment">// module: {// loladers 遵循module.rules规则</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// },</span></span><br><span class="line">    <span class="comment">// plugins: [</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ],</span></span><br><span class="line">    output: {<span class="comment">// 出口</span></span><br><span class="line">        filename: <span class="string">'bundle.js'</span>,<span class="comment">// 打包后的文件名 filename是固定的</span></span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>),<span class="comment">// 路径必须是绝对路径</span></span><br><span class="line">    },</span><br><span class="line">    <span class="comment">// devServer: {// 开发服务器</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// }</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>在 package.json 文件 scripts 下配置 <code>"biuild": "npx webpack --config webpack.config.js"</code></p><figure class="highlight stata"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: {</span><br><span class="line">    <span class="string">"biuild"</span>: <span class="string">"npx webpack --config webpack.config.js"</span>,</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"</span><span class="keyword">Error</span>: <span class="keyword">no</span> <span class="keyword">test</span> specified\<span class="string">" &amp;&amp; exit 1"</span></span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure></li><li><p>在终端运行打包命令</p><figure class="highlight dockerfile"><table><tbody><tr><td class="code"><pre><span class="line">npm <span class="keyword">run</span><span class="bash"> build</span></span><br></pre></td></tr></tbody></table></figure><p>在浏览器打开 index.html 就可以看到 已经打印出 <code>webpack项目</code> 字体了。</p></li></ol><!-- rebuild by neat --><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>文章置顶</title>
    <url>/2020/03/26/%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6/36265/</url>
    <content><![CDATA[<p>有的时候，写好一篇文章，想要置顶，但 next 默认是按照时间来进行排序的，自己写的文章总不能靠修改创作时间来进行置顶吧。想要通过一个权重来进行排序，但苦苦没有办法，今天它来了</p><a id="more"></a><h2 id="设置文章置顶"><a href="#设置文章置顶" class="headerlink" title="设置文章置顶"></a>设置文章置顶</h2><ol><li>修改仓库配置，使其支持文章置顶功能<br>卸载 hexo-generator-index<figure class="highlight axapta"><table><tbody><tr><td class="code"><pre><span class="line">npm r hexo-generator-<span class="keyword">index</span></span><br></pre></td></tr></tbody></table></figure>安装 hexo-generator-index-pin-top<figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line">npm <span class="selector-tag">i</span> hexo-generator-index-pin-<span class="attribute">top</span> -S</span><br></pre></td></tr></tbody></table></figure></li><li>在文章中添加置顶信息<br>添加 top<figure class="highlight subunit"><table><tbody><tr><td class="code"><pre><span class="line">title: 文章置顶</span><br><span class="line"><span class="keyword">tags:</span></span><br><span class="line">  - 标签</span><br><span class="line">categories:</span><br><span class="line">  - 分类</span><br><span class="line">copyright: true</span><br><span class="line">date: 2020<span class="string">-03</span><span class="string">-26</span> 12:59:02</span><br><span class="line">top:10</span><br></pre></td></tr></tbody></table></figure>top 后数字越大，权限越高</li></ol><h2 id="添加置顶标志"><a href="#添加置顶标志" class="headerlink" title="添加置顶标志"></a>添加置顶标志</h2><p>打开：/bolg/themes/next/layout/_macro/post.swig 文件<br>在<code>&lt;span class='post-time'&gt;</code> 标签下，插入以下代码：</p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"> {% if post.top %}</span><br><span class="line">      &lt;span class="post-meta-item-icon"&gt;</span><br><span class="line">      &lt;i class="fa fa-thumb-tack"&gt;&lt;/i&gt;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">      &lt;font color=red&gt;置顶&lt;/font&gt;</span><br><span class="line">      &lt;span class="post-meta-divider"&gt;|&lt;/span&gt;</span><br><span class="line">{% endif %}</span><br></pre></td></tr></tbody></table></figure><!-- rebuild by neat --><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>next</tag>
        <tag>文章置顶</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇博客</title>
    <url>/2020/03/21/Hello/16108/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>欢迎来到我的第一篇博客，在闲暇之余，搭了个博客，用来记录一下自己的学习过程，俗话说得好，好记性不如烂笔头。还记得上学的时候，老师经常对我们说这句话。虽然当时也（被迫）养成了这个习惯，但是还是很抵触的（懒啊~）。</p><a id="more"></a><h2 id="为什么要写博客"><a href="#为什么要写博客" class="headerlink" title="为什么要写博客"></a>为什么要写博客</h2><ul><li><strong>积累</strong> 写博客主要是积累经验，记录生活中的收获，</li><li><strong>记录</strong> 把博客当做是日记，记录工作生活中的所见所闻，所思所想。</li><li><strong>交流</strong> 博客是一个很大的圈子。</li><li><strong>学习</strong> 在这里总会学到知识的，正如每天都会阅读。</li></ul><h2 id="写博客当然得先了解一下-Markdown"><a href="#写博客当然得先了解一下-Markdown" class="headerlink" title="写博客当然得先了解一下 Markdown"></a>写博客当然得先了解一下 Markdown</h2><blockquote><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。</p></blockquote><p>好啦，这就是我的第一篇博客了，先记录到这里，我的博客之路将从这里出发！</p><!-- rebuild by neat --><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>杂记</category>
      </categories>
  </entry>
</search>
