<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>天火流光</title>
  
  <subtitle>天火流光的小屋</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://guochen-thlg.github.io/"/>
  <updated>2021-02-23T03:14:24.755Z</updated>
  <id>https://guochen-thlg.github.io/</id>
  
  <author>
    <name>天火流光</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Nginx服务器实操</title>
    <link href="https://guochen-thlg.github.io/2021/02/23/Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E6%93%8D/35107/"/>
    <id>https://guochen-thlg.github.io/2021/02/23/Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E6%93%8D/35107/</id>
    <published>2021-02-23T02:42:47.000Z</published>
    <updated>2021-02-23T03:14:24.755Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Nginx是非同步框架的網頁伺服器，也可以用作反向代理、負載平衡器和HTTP快取。<br>总之 Nginx 非常🐮</p></blockquote><a id="more"></a><h3 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h3><p>首先在官网(<a href="http://nginx.org/)[http://nginx.org/]" target="_blank" rel="noopener">http://nginx.org/)[http://nginx.org/]</a> 下载压缩包,解压到文件夹即可</p><h3 id="启动Nginx"><a href="#启动Nginx" class="headerlink" title="启动Nginx"></a>启动Nginx</h3><p>在文件夹下打开控制台 执行命令 (千万不要启动 nginx.exe! 千万不要启动 nginx.exe! 千万不要启动 nginx.exe!)</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></tbody></table></figure><p>打开 (<a href="http://localhost)[http://localhost],如果可以看到">http://localhost)[http://localhost],如果可以看到</a> Welcome to nginx! 说明安装成功</p><h3 id="Nginx-命令"><a href="#Nginx-命令" class="headerlink" title="Nginx 命令"></a>Nginx 命令</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nginx            # 启动 nginx</span><br><span class="line">nginx -s stop    # 快速关机</span><br><span class="line">nginx -s quit    # 正常关机</span><br><span class="line">nginx -s reload  # 重新加载配置</span><br><span class="line">nginx -s reopen  # 重新打开日志文件</span><br></pre></td></tr></tbody></table></figure><h4 id="Nginx-配置文件"><a href="#Nginx-配置文件" class="headerlink" title="Nginx 配置文件"></a>Nginx 配置文件</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#user  nobody;</span><br><span class="line">#</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"># 进程的ID号</span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events {</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http {</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span><br><span class="line">    #                  '$status $body_bytes_sent "$http_referer" '</span><br><span class="line">    #                  '"$http_user_agent" "$http_x_forwarded_for"';</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line">    # 每个 server 相当于一个站点</span><br><span class="line">    # server {</span><br><span class="line">    # 监听端口</span><br><span class="line">    #     listen       80;</span><br><span class="line">    # 域名</span><br><span class="line">    #     server_name  localhost;</span><br><span class="line">    # 编码</span><br><span class="line">    #     #charset koi8-r;</span><br><span class="line">    # 日志存放路径</span><br><span class="line">    #     #access_log  logs/host.access.log  main;</span><br><span class="line">    # 路由</span><br><span class="line">    #     location / {</span><br><span class="line">    #         root   html;</span><br><span class="line">    #         index  index.html index.htm;</span><br><span class="line">    #     }</span><br><span class="line"></span><br><span class="line">    #     #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">    #     # redirect server error pages to the static page /50x.html</span><br><span class="line">    #     #</span><br><span class="line">    #     error_page   500 502 503 504  /50x.html;</span><br><span class="line">    #     location = /50x.html {</span><br><span class="line">    #         root   html;</span><br><span class="line">    #     }</span><br><span class="line"></span><br><span class="line">    #     # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">    #     #</span><br><span class="line">    #     #location ~ \.php$ {</span><br><span class="line">    #     #    proxy_pass   http://127.0.0.1;</span><br><span class="line">    #     #}</span><br><span class="line"></span><br><span class="line">    #     # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">    #     #</span><br><span class="line">    #     #location ~ \.php$ {</span><br><span class="line">    #     #    root           html;</span><br><span class="line">    #     #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">    #     #    fastcgi_index  index.php;</span><br><span class="line">    #     #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">    #     #    include        fastcgi_params;</span><br><span class="line">    #     #}</span><br><span class="line"></span><br><span class="line">    #     # deny access to .htaccess files, if Apache's document root</span><br><span class="line">    #     # concurs with nginx's one</span><br><span class="line">    #     #</span><br><span class="line">    #     #location ~ /\.ht {</span><br><span class="line">    #     #    deny  all;</span><br><span class="line">    #     #}</span><br><span class="line">    # }</span><br><span class="line">    #############################################################################</span><br><span class="line">    ################################# 代理 #######################################</span><br><span class="line">    server {</span><br><span class="line">        # 监听的端口</span><br><span class="line">        listen       80;</span><br><span class="line">        # 域名</span><br><span class="line">        server_name  a.localhost;</span><br><span class="line">        # 编码</span><br><span class="line">        charset utf-8;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / {</span><br><span class="line">            # root   html;</span><br><span class="line">            # index  index.html index.htm;</span><br><span class="line">            # 代理的 URL</span><br><span class="line">            proxy_pass   http://127.0.0.1:3001;</span><br><span class="line">            # 客户端真实域名和端口号</span><br><span class="line">            proxy_set_header Host $http_host;</span><br><span class="line">            # 客户端真实IP</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            # 包含代理IP 真实IP</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; </span><br><span class="line">            proxy_set_header X-NginX-Proxy true;</span><br><span class="line">            #给请求头中添加客户端的Cookie</span><br><span class="line">            proxy_set_header Cookie $http_cookie;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html {</span><br><span class="line">            root   html;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ {</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #}</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ {</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #}</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache's document root</span><br><span class="line">        # concurs with nginx's one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht {</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #}</span><br><span class="line">    }</span><br><span class="line">    server {</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  b.localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / {</span><br><span class="line">            # root   html;</span><br><span class="line">            # index  index.html index.htm;</span><br><span class="line">            proxy_pass   http://127.0.0.1:3002;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html {</span><br><span class="line">            root   html;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    server {</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  c.localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / {</span><br><span class="line">            # root   html;</span><br><span class="line">            # index  index.html index.htm;</span><br><span class="line">            proxy_pass   http://127.0.0.1:3003;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html {</span><br><span class="line">            root   html;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    server {</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  d.localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / {</span><br><span class="line">            # root   html;</span><br><span class="line">            # index  index.html index.htm;</span><br><span class="line">            proxy_pass   http://127.0.0.1:3004;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html {</span><br><span class="line">            root   html;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    ##################################负载均衡#######################################</span><br><span class="line">    upstream mysvr {</span><br><span class="line">        server 127.0.0.1:3001 weight=1;</span><br><span class="line">        server 127.0.0.1:3002 weight=2;</span><br><span class="line">        server 127.0.0.1:3003 weight=3;</span><br><span class="line">        server 127.0.0.1:3004 weight=4;</span><br><span class="line">    }</span><br><span class="line">    server {</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  e.localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / {</span><br><span class="line">            # root   html;</span><br><span class="line">            # index  index.html index.htm;</span><br><span class="line">            proxy_pass   http://mysvr;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html {</span><br><span class="line">            root   html;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    ##############################################################################</span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server {</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / {</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    }</span><br><span class="line">    #}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server {</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / {</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    }</span><br><span class="line">    #}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;Nginx是非同步框架的網頁伺服器，也可以用作反向代理、負載平衡器和HTTP快取。&lt;br&gt;总之 Nginx 非常🐮&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Nginx" scheme="https://GuoChen-thlg.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://GuoChen-thlg.github.io/tags/Nginx/"/>
    
      <category term="nginx 代理" scheme="https://GuoChen-thlg.github.io/tags/nginx-%E4%BB%A3%E7%90%86/"/>
    
      <category term="nginx 安装" scheme="https://GuoChen-thlg.github.io/tags/nginx-%E5%AE%89%E8%A3%85/"/>
    
      <category term="nginx 命令" scheme="https://GuoChen-thlg.github.io/tags/nginx-%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>浏览器如何获取本机ip地址</title>
    <link href="https://guochen-thlg.github.io/2021/02/20/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E6%9C%AC%E6%9C%BA%E5%85%AC%E7%BD%91ip%E5%9C%B0%E5%9D%80/30504/"/>
    <id>https://guochen-thlg.github.io/2021/02/20/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E6%9C%AC%E6%9C%BA%E5%85%AC%E7%BD%91ip%E5%9C%B0%E5%9D%80/30504/</id>
    <published>2021-02-20T07:19:53.000Z</published>
    <updated>2021-02-20T07:53:56.251Z</updated>
    
    <content type="html"><![CDATA[<p>浏览器如何获取本机的 IP 地址呢,方案有很多，简单的可以去 (<a href="https://ip.cn/)[https://ip.cn/]" target="_blank" rel="noopener">https://ip.cn/)[https://ip.cn/]</a> 获取本机 IP<br>但有时我们要在业务中拿到客户端 IP,该怎么办呢,也有相应的解决方案,例如一些三方接口：(搜狐)[<a href="http://pv.sohu.com/cityjson]、" target="_blank" rel="noopener">http://pv.sohu.com/cityjson]、</a> (淘宝)[<a href="https://www.taobao.com/help/getip.php]" target="_blank" rel="noopener">https://www.taobao.com/help/getip.php]</a></p><a id="more"></a><p>接下来，我们使用 WebRTC API 来获取本机 IP<br>具体操作如下：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IPQuery</span>(<span class="params">backcall</span>) </span>{</span><br><span class="line"><span class="comment">// 兼容性处理</span></span><br><span class="line"><span class="keyword">const</span> MyPeerConnection =</span><br><span class="line"><span class="built_in">window</span>.RTCPeerConnection ||</span><br><span class="line"><span class="built_in">window</span>.mozRTCPeerConnection ||</span><br><span class="line"><span class="built_in">window</span>.webkitRTCPeerConnection</span><br><span class="line"><span class="comment">// 创建实例</span></span><br><span class="line"><span class="keyword">const</span> pc = <span class="keyword">new</span> MyPeerConnection({</span><br><span class="line"><span class="comment">// 连接 STUN协议服务器</span></span><br><span class="line">iceServers: [{ <span class="attr">url</span>: <span class="string">'stun:stun.l.google.com:19302'</span> }],</span><br><span class="line">})</span><br><span class="line"><span class="keyword">let</span> localIPs = { <span class="string">'0.0.0.0'</span>: <span class="number">1</span> }</span><br><span class="line"><span class="keyword">let</span> noop = <span class="function"><span class="params">()</span> =&gt;</span> {}</span><br><span class="line"><span class="keyword">let</span> ipRegex = <span class="regexp">/([0-9]{1,3}(\.[0-9]{1,3}){3}|[a-f0-9]{1,4}(:[a-f0-9]{1,4}){7})/g</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ipIterate</span>(<span class="params">ip</span>) </span>{</span><br><span class="line"><span class="keyword">if</span> (!localIPs[ip]) backcall(ip)</span><br><span class="line">localIPs[ip] = <span class="literal">true</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">// 创建数据信道</span></span><br><span class="line">pc.createDataChannel(<span class="string">''</span>)</span><br><span class="line">pc.createOffer().then(<span class="function"><span class="keyword">function</span> (<span class="params">sdp</span>) </span>{</span><br><span class="line">sdp.sdp.split(<span class="string">'\n'</span>).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">line</span>) </span>{</span><br><span class="line"><span class="keyword">if</span> (line.indexOf(<span class="string">'candidate'</span>) &lt; <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">line.match(ipRegex).forEach(ipIterate)</span><br><span class="line">})</span><br><span class="line">pc.setLocalDescription(sdp, noop, noop)</span><br><span class="line">})</span><br><span class="line">  <span class="comment">// 聆听候选事件</span></span><br><span class="line">pc.onicecandidate = <span class="function"><span class="keyword">function</span> (<span class="params">ice</span>) </span>{</span><br><span class="line"><span class="built_in">console</span>.log(ice)</span><br><span class="line"><span class="keyword">if</span> (!ice ||!ice.candidate || !ice.candidate.candidate || !ice.candidate.candidate.match(ipRegex)) <span class="keyword">return</span>;</span><br><span class="line">ice.candidate.candidate.match(ipRegex).forEach(ipIterate)</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">IPQuery(<span class="function"><span class="params">ip</span> =&gt;</span> {</span><br><span class="line"><span class="built_in">console</span>.log(ip)</span><br><span class="line"><span class="comment">// xxx.xxx.xxx.xxx</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;浏览器如何获取本机的 IP 地址呢,方案有很多，简单的可以去 (&lt;a href=&quot;https://ip.cn/)[https://ip.cn/]&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ip.cn/)[https://ip.cn/]&lt;/a&gt; 获取本机 IP&lt;br&gt;但有时我们要在业务中拿到客户端 IP,该怎么办呢,也有相应的解决方案,例如一些三方接口：(搜狐)[&lt;a href=&quot;http://pv.sohu.com/cityjson]、&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://pv.sohu.com/cityjson]、&lt;/a&gt; (淘宝)[&lt;a href=&quot;https://www.taobao.com/help/getip.php]&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.taobao.com/help/getip.php]&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="JS" scheme="https://GuoChen-thlg.github.io/categories/JS/"/>
    
    
      <category term="获取IP" scheme="https://GuoChen-thlg.github.io/tags/%E8%8E%B7%E5%8F%96IP/"/>
    
      <category term="本机IP" scheme="https://GuoChen-thlg.github.io/tags/%E6%9C%AC%E6%9C%BAIP/"/>
    
  </entry>
  
  <entry>
    <title>如何使div垂直水平居中</title>
    <link href="https://guochen-thlg.github.io/2021/02/19/%E5%A6%82%E4%BD%95%E4%BD%BFdiv%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD/9230/"/>
    <id>https://guochen-thlg.github.io/2021/02/19/%E5%A6%82%E4%BD%95%E4%BD%BFdiv%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD/9230/</id>
    <published>2021-02-19T06:47:16.000Z</published>
    <updated>2021-02-19T06:58:44.686Z</updated>
    
    <content type="html"><![CDATA[<p>使 div 垂直水平居中</p><a id="more"></a><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.parent</span> {</span></span><br><span class="line">width: 600px;</span><br><span class="line">height: 600px;</span><br><span class="line">}</span><br><span class="line"><span class="css"><span class="selector-class">.child</span> {</span></span><br><span class="line">width: 200px;</span><br><span class="line">height: 200px;</span><br><span class="line">background-color: rebeccapurple;</span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.child</span> {</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> {</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">align-items</span>: center;</span><br><span class="line"><span class="attribute">justify-content</span>: center;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h3><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> {</span><br><span class="line"><span class="attribute">display</span>: grid;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.child</span> {</span><br><span class="line"><span class="attribute">align-self</span>: center;</span><br><span class="line"><span class="attribute">justify-self</span>: center;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="方案四"><a href="#方案四" class="headerlink" title="方案四"></a>方案四</h3><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> {</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.parent</span><span class="selector-pseudo">::before</span> {</span><br><span class="line"><span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line"><span class="attribute">display</span>: inline-block;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">vertical-align</span>: middle;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.child</span> {</span><br><span class="line"><span class="attribute">display</span>: inline-block;</span><br><span class="line"><span class="attribute">vertical-align</span>: middle;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使 div 垂直水平居中&lt;/p&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="https://GuoChen-thlg.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="https://GuoChen-thlg.github.io/tags/CSS/"/>
    
      <category term="css布局" scheme="https://GuoChen-thlg.github.io/tags/css%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>ssh远程登录服务器VSCode调试代码</title>
    <link href="https://guochen-thlg.github.io/2021/01/28/ssh%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E6%9C%8D%E5%8A%A1%E5%99%A8VSCode%E8%B0%83%E8%AF%95%E4%BB%A3%E7%A0%81/14742/"/>
    <id>https://guochen-thlg.github.io/2021/01/28/ssh%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E6%9C%8D%E5%8A%A1%E5%99%A8VSCode%E8%B0%83%E8%AF%95%E4%BB%A3%E7%A0%81/14742/</id>
    <published>2021-01-28T01:19:09.000Z</published>
    <updated>2021-01-28T01:38:42.362Z</updated>
    
    <content type="html"><![CDATA[<p>我们在开发中有时会遇到要使用公网进行开发，虽然可以使用一下映射工具 如 ngrok 等，但是，我就想用服务器，那在服务器上如何进行开发调试呢？</p><a id="more"></a><p>这里我使用 Romote SSH 插件。</p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>打开VSCode ，在插件商店中搜索 Romote SSH 即可安装</p><h3 id="生成秘钥公钥"><a href="#生成秘钥公钥" class="headerlink" title="生成秘钥公钥"></a>生成秘钥公钥</h3><p>打开命令窗口（win+R cmd）输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></tbody></table></figure><p>之后一路回车即可，当然，你也可以自定义文件名以及加密密码</p><p>会生成两个文件 id_rsa (秘钥) id_rsa.pub (公钥)，我们将公钥的内容加到服务器 <code>~/.ssh/authorized_keys</code> 文件中</p><p>设置权限 命令如下</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 700 ~/.ssh</span><br><span class="line">chmod 600 ~/.ssh/authorized_keys​</span><br></pre></td></tr></tbody></table></figure><h3 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h3><p>之后打开 Romote SSH 插件</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@***.**.**.**</span><br></pre></td></tr></tbody></table></figure><p>设置配置文件</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host 自定义</span><br><span class="line">  HostName IP </span><br><span class="line">  User root  用户名</span><br><span class="line">  Port 22 默认 22</span><br><span class="line">  IdentityFile "C:\Users\***\.ssh\id_rsa" 秘钥绝对路径</span><br></pre></td></tr></tbody></table></figure><p>之后就可以快乐的免密连接了</p><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在开发中有时会遇到要使用公网进行开发，虽然可以使用一下映射工具 如 ngrok 等，但是，我就想用服务器，那在服务器上如何进行开发调试呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://GuoChen-thlg.github.io/categories/Linux/"/>
    
    
      <category term="ssh" scheme="https://GuoChen-thlg.github.io/tags/ssh/"/>
    
      <category term="免密登录" scheme="https://GuoChen-thlg.github.io/tags/%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>koa-body实现上传文件 分别保存自定义文件夹</title>
    <link href="https://guochen-thlg.github.io/2021/01/22/koa-body%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/4437/"/>
    <id>https://guochen-thlg.github.io/2021/01/22/koa-body%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/4437/</id>
    <published>2021-01-22T13:53:58.000Z</published>
    <updated>2021-01-28T01:21:10.913Z</updated>
    
    <content type="html"><![CDATA[<p>如何使用ndoe实现上传文件，在使用koa 开发过程中，使用koa-body 不仅可以实现上传文件，还可以解析 POST 参数</p><a id="more"></a><p>配置如下</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">app.use(</span><br><span class="line">koaBody({</span><br><span class="line">multipart: <span class="literal">true</span>, <span class="comment">// 支持上传文件</span></span><br><span class="line">patchNode: <span class="literal">true</span>,</span><br><span class="line">formidable: {</span><br><span class="line">uploadDir: path.join(__dirname, <span class="string">'uploads/'</span>), <span class="comment">// 上传文件路径</span></span><br><span class="line">keepExtensi·  ons: <span class="literal">true</span>, <span class="comment">// 保持文件后缀</span></span><br><span class="line">maxFieldsSize: <span class="number">5</span> * <span class="number">1024</span> * <span class="number">1024</span>, <span class="comment">// 文件上传大小</span></span><br><span class="line">onFileBegin: <span class="function">(<span class="params">name, file</span>) =&gt;</span> {</span><br><span class="line"><span class="comment">// 文件上传前的设置</span></span><br><span class="line"><span class="keyword">let</span> shop = name.split(<span class="string">'|'</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">let</span> type = name.split(<span class="string">'|'</span>)[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">let</span> ext = file.name.split(<span class="string">'.'</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 判断保存路径是否存在，不存在则创建文件夹</span></span><br><span class="line"><span class="keyword">let</span> dir = path.join(__dirname, <span class="string">`uploads/<span class="subst">${shop}</span>`</span>)</span><br><span class="line">checkDirExist(dir)</span><br><span class="line">dir = path.join(__dirname, <span class="string">`uploads/<span class="subst">${shop}</span>/<span class="subst">${type}</span>`</span>)</span><br><span class="line">        checkDirExist(dir)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 图片保存的实际路径</span></span><br><span class="line">file.path = <span class="string">`<span class="subst">${dir}</span>\\<span class="subst">${file.name}</span>`</span></span><br><span class="line">},</span><br><span class="line">},</span><br><span class="line">})</span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkDirExist</span> (<span class="params">dir</span>) </span>{</span><br><span class="line"><span class="keyword">if</span> (!fs.existsSync(dir)) { fs.mkdirSync(dir) }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何使用ndoe实现上传文件，在使用koa 开发过程中，使用koa-body 不仅可以实现上传文件，还可以解析 POST 参数&lt;/p&gt;
    
    </summary>
    
    
      <category term="Koa" scheme="https://GuoChen-thlg.github.io/categories/Koa/"/>
    
    
      <category term="node" scheme="https://GuoChen-thlg.github.io/tags/node/"/>
    
      <category term="Koa-body" scheme="https://GuoChen-thlg.github.io/tags/Koa-body/"/>
    
      <category term="上传文件" scheme="https://GuoChen-thlg.github.io/tags/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>koa-body POST 方式出现 415 unsupported media type</title>
    <link href="https://guochen-thlg.github.io/2021/01/22/koa-body415/41372/"/>
    <id>https://guochen-thlg.github.io/2021/01/22/koa-body415/41372/</id>
    <published>2021-01-22T13:44:46.000Z</published>
    <updated>2021-01-28T01:21:19.876Z</updated>
    
    <content type="html"><![CDATA[<p>使用 Koa 写了个插件，要上传文件时 使用了 koa-body 在 POST 提交参数时，总是报错 415 unsupported media type 苦思不得其解<br>在痛苦了半天的结果下，最终找到了问题所在</p><a id="more"></a><p>主要是开启了 <code>encoding: 'gzip'</code> 这个配置，注释后发现可以运行，完美解决。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.use(</span><br><span class="line">koaBody({</span><br><span class="line">multipart: <span class="literal">true</span>, <span class="comment">// 支持上传文件</span></span><br><span class="line">patchNode: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">// encoding: 'gzip',</span></span><br><span class="line">})</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 Koa 写了个插件，要上传文件时 使用了 koa-body 在 POST 提交参数时，总是报错 415 unsupported media type 苦思不得其解&lt;br&gt;在痛苦了半天的结果下，最终找到了问题所在&lt;/p&gt;
    
    </summary>
    
    
      <category term="koa" scheme="https://GuoChen-thlg.github.io/categories/koa/"/>
    
    
      <category term="node" scheme="https://GuoChen-thlg.github.io/tags/node/"/>
    
      <category term="koa-body" scheme="https://GuoChen-thlg.github.io/tags/koa-body/"/>
    
      <category term="koa" scheme="https://GuoChen-thlg.github.io/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript函数工具整理</title>
    <link href="https://guochen-thlg.github.io/2021/01/17/JavaScript%E5%87%BD%E6%95%B0%E5%B7%A5%E5%85%B7%E6%95%B4%E7%90%86/43110/"/>
    <id>https://guochen-thlg.github.io/2021/01/17/JavaScript%E5%87%BD%E6%95%B0%E5%B7%A5%E5%85%B7%E6%95%B4%E7%90%86/43110/</id>
    <published>2021-01-17T08:58:16.000Z</published>
    <updated>2021-01-28T01:20:55.135Z</updated>
    
    <content type="html"><![CDATA[<p>日常函数总结</p><a id="more"></a><p>修改当前历史记录<br>静默修改浏览器 URL 不刷新页面</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.history.replaceState({ <span class="attr">path</span>: <span class="string">'url'</span> }, <span class="string">''</span>, url)</span><br></pre></td></tr></tbody></table></figure><p>解析 URL 参数</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">analysisURL</span>(<span class="params">string</span>) </span>{</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">JSON</span>.parse(</span><br><span class="line"><span class="string">`{ <span class="subst">${string</span></span></span><br><span class="line"><span class="string"><span class="subst">.slice(string.indexOf(<span class="string">'?'</span>) + <span class="number">1</span>)</span></span></span><br><span class="line"><span class="string"><span class="subst">.split(<span class="string">'&amp;'</span>)</span></span></span><br><span class="line"><span class="string"><span class="subst">.map(</span></span></span><br><span class="line"><span class="string"><span class="subst">o =&gt; <span class="string">`"<span class="subst">${o.slice(<span class="number">0</span>, o.indexOf(<span class="string">'='</span>))}</span>":"<span class="subst">${o.slice(o.indexOf(<span class="string">'='</span>) + <span class="number">1</span>)}</span>"`</span></span></span></span><br><span class="line"><span class="string"><span class="subst">)</span></span></span><br><span class="line"><span class="string"><span class="subst">.join(<span class="string">','</span>)}</span>}`</span></span><br><span class="line">)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;日常函数总结&lt;/p&gt;
    
    </summary>
    
    
      <category term="JS" scheme="https://GuoChen-thlg.github.io/categories/JS/"/>
    
    
      <category term="工具函数" scheme="https://GuoChen-thlg.github.io/tags/%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>浏览器如何读取本地文件</title>
    <link href="https://guochen-thlg.github.io/2021/01/12/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A6%82%E4%BD%95%E8%AF%BB%E5%8F%96%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6/20477/"/>
    <id>https://guochen-thlg.github.io/2021/01/12/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A6%82%E4%BD%95%E8%AF%BB%E5%8F%96%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6/20477/</id>
    <published>2021-01-12T06:24:27.000Z</published>
    <updated>2021-01-12T06:42:29.987Z</updated>
    
    <content type="html"><![CDATA[<p>在业务需求上，不免需要用户上传文件，我们来操作一些内容，但如何在前端代码中来完成这部分需求呢？</p><a id="more"></a><h3 id="封装函数"><a href="#封装函数" class="headerlink" title="封装函数"></a>封装函数</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件转为内容文本</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">readAsText</span>(<span class="params">file, callback</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> reader = <span class="keyword">new</span> FileReader()</span><br><span class="line">    reader.readAsText(file)</span><br><span class="line">    reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>{</span><br><span class="line">      callback(<span class="keyword">this</span>.result)</span><br><span class="line">    }</span><br><span class="line">    reader.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>{</span><br><span class="line">      callback(<span class="literal">null</span>, e)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 文件转为地址</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readAsDataURL</span>(<span class="params">file, callback</span>) </span>{</span><br><span class="line"><span class="keyword">let</span> reader = <span class="keyword">new</span> FileReader()</span><br><span class="line">reader.readAsDataURL(file)</span><br><span class="line">reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>{</span><br><span class="line">callback(<span class="keyword">this</span>.reader)</span><br><span class="line">}</span><br><span class="line">reader.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>{</span><br><span class="line">callback(<span class="literal">null</span>, e)</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 文件转为二进制</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readAsBinaryString</span>(<span class="params">file, callback</span>) </span>{</span><br><span class="line"><span class="keyword">let</span> reader = <span class="keyword">new</span> FileReader()</span><br><span class="line">reader.readAsBinaryString(file)</span><br><span class="line">reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>{</span><br><span class="line">callback(<span class="keyword">this</span>.reader)</span><br><span class="line">}</span><br><span class="line">reader.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>{</span><br><span class="line">callback(<span class="literal">null</span>, e)</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>当然 有时候也需要将文件Base64 编码转为文件类型</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Base64ToFile</span>(<span class="params">dataURL, fileName = <span class="string">'file'</span></span>) </span>{</span><br><span class="line"><span class="keyword">let</span> arr = dataURL.split(<span class="string">','</span>)</span><br><span class="line"><span class="keyword">let</span> mime = arr[<span class="number">0</span>].match(<span class="regexp">/:(.*?);/</span>)[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">let</span> suffix = mime.split(<span class="string">'/'</span>)[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">let</span> bstr = atob(arr[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">let</span> n = bstr.length</span><br><span class="line"><span class="keyword">let</span> u8arr = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(n)</span><br><span class="line"><span class="keyword">while</span> (n--) {</span><br><span class="line">u8arr[n] = bstr.charCodeAt(n)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> File([u8arr], <span class="string">`<span class="subst">${fileName}</span>.<span class="subst">${suffix}</span>`</span>, { <span class="attr">type</span>: mime })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在业务需求上，不免需要用户上传文件，我们来操作一些内容，但如何在前端代码中来完成这部分需求呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="JS" scheme="https://GuoChen-thlg.github.io/categories/JS/"/>
    
    
      <category term="js读取本地文件" scheme="https://GuoChen-thlg.github.io/tags/js%E8%AF%BB%E5%8F%96%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6/"/>
    
      <category term="读取文件" scheme="https://GuoChen-thlg.github.io/tags/%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>扁平数组与树状结构的转换</title>
    <link href="https://guochen-thlg.github.io/2020/09/22/%E6%89%81%E5%B9%B3%E6%95%B0%E7%BB%84%E4%B8%8E%E6%A0%91%E7%8A%B6%E7%BB%93%E6%9E%84%E7%9A%84%E8%BD%AC%E6%8D%A2/52305/"/>
    <id>https://guochen-thlg.github.io/2020/09/22/%E6%89%81%E5%B9%B3%E6%95%B0%E7%BB%84%E4%B8%8E%E6%A0%91%E7%8A%B6%E7%BB%93%E6%9E%84%E7%9A%84%E8%BD%AC%E6%8D%A2/52305/</id>
    <published>2020-09-22T11:36:01.000Z</published>
    <updated>2020-09-22T11:56:32.720Z</updated>
    
    <content type="html"><![CDATA[<p>我们在使用后台传过来的数据的时候，有时候我们会得到树状结构的数据，虽然有时候，后端会处理掉，但，毕竟我们也可以在前端给它处理一下，一方面也锻炼一下脑子，天天写页面都没思考能力了。</p><a id="more"></a><h2 id="树状结构转为扁平数组"><a href="#树状结构转为扁平数组" class="headerlink" title="树状结构转为扁平数组"></a>树状结构转为扁平数组</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tree = {</span><br><span class="line">id: <span class="string">'1'</span>,</span><br><span class="line">pid: <span class="string">'7'</span>,</span><br><span class="line">name: <span class="string">'aaaaa'</span>,</span><br><span class="line">children: [</span><br><span class="line">{</span><br><span class="line">id: <span class="string">'2'</span>,</span><br><span class="line">pid: <span class="string">'1'</span>,</span><br><span class="line">name: <span class="string">'bbbbbbb'</span>,</span><br><span class="line">children: [</span><br><span class="line">{</span><br><span class="line">id: <span class="string">'6'</span>,</span><br><span class="line">pid: <span class="string">'2'</span>,</span><br><span class="line">name: <span class="string">'ccccc'</span>,</span><br><span class="line">children: [{ <span class="attr">id</span>: <span class="string">'9'</span>, <span class="attr">pid</span>: <span class="string">'6'</span>, <span class="attr">name</span>: <span class="string">'dddd'</span> }],</span><br><span class="line">},</span><br><span class="line">],</span><br><span class="line">},</span><br><span class="line">],</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> toArray = <span class="function">(<span class="params">tree, children</span>) =&gt;</span> {</span><br><span class="line"><span class="keyword">let</span> arr = []</span><br><span class="line"><span class="keyword">const</span> a = <span class="function"><span class="params">ls</span> =&gt;</span> {</span><br><span class="line"><span class="keyword">if</span> (ls <span class="keyword">instanceof</span> <span class="built_in">Array</span>) {</span><br><span class="line">ls.forEach(<span class="function"><span class="params">o</span> =&gt;</span> {</span><br><span class="line"><span class="keyword">let</span> c = o[children]</span><br><span class="line"><span class="keyword">delete</span> o[children]</span><br><span class="line">arr.push(o)</span><br><span class="line">a(c)</span><br><span class="line">})</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">tree <span class="keyword">instanceof</span> <span class="built_in">Array</span> ? a(tree) : a([tree])</span><br><span class="line"><span class="keyword">return</span> arr</span><br><span class="line">}</span><br><span class="line">toArray(tree, <span class="string">'children'</span>)</span><br><span class="line"><span class="comment">/* [</span></span><br><span class="line"><span class="comment">  { id: '1', pid: '7', name: 'aaaaa' },</span></span><br><span class="line"><span class="comment">  { id: '2', pid: '1', name: 'bbbbbbb' },</span></span><br><span class="line"><span class="comment">  { id: '6', pid: '2', name: 'ccccc' },</span></span><br><span class="line"><span class="comment">  { id: '9', pid: '6', name: 'dddd' }</span></span><br><span class="line"><span class="comment">] */</span></span><br></pre></td></tr></tbody></table></figure><h2 id="扁平数组转为树状结构"><a href="#扁平数组转为树状结构" class="headerlink" title="扁平数组转为树状结构"></a>扁平数组转为树状结构</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array =  [</span><br><span class="line">  { <span class="attr">id</span>: <span class="string">'1'</span>, <span class="attr">pid</span>: <span class="string">'7'</span>, <span class="attr">name</span>: <span class="string">'aaaaa'</span> },</span><br><span class="line">  { <span class="attr">id</span>: <span class="string">'2'</span>, <span class="attr">pid</span>: <span class="string">'1'</span>, <span class="attr">name</span>: <span class="string">'bbbbbbb'</span> },</span><br><span class="line">  { <span class="attr">id</span>: <span class="string">'6'</span>, <span class="attr">pid</span>: <span class="string">'2'</span>, <span class="attr">name</span>: <span class="string">'ccccc'</span> },</span><br><span class="line">  { <span class="attr">id</span>: <span class="string">'9'</span>, <span class="attr">pid</span>: <span class="string">'6'</span>, <span class="attr">name</span>: <span class="string">'dddd'</span> }</span><br><span class="line">] </span><br><span class="line"><span class="keyword">const</span> arrayToTree = <span class="function">(<span class="params">arr, id, pid</span>) =&gt;</span> {</span><br><span class="line"><span class="keyword">if</span> (!id || id == <span class="string">''</span>) {</span><br><span class="line"><span class="keyword">return</span> []</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>) {</span><br><span class="line"><span class="keyword">let</span> tree = []</span><br><span class="line"><span class="keyword">let</span> treeMap = {}</span><br><span class="line">arr.forEach(<span class="function"><span class="params">o</span> =&gt;</span> {</span><br><span class="line">treeMap[o[id]] = o</span><br><span class="line">})</span><br><span class="line">arr.forEach(<span class="function"><span class="params">o</span> =&gt;</span> {</span><br><span class="line"><span class="keyword">let</span> parent = treeMap[o[pid]]</span><br><span class="line"><span class="keyword">if</span> (parent &amp;&amp; o[id] != o[pid]) {</span><br><span class="line"><span class="keyword">if</span> (!parent.children) {</span><br><span class="line">parent.children = []</span><br><span class="line">}</span><br><span class="line">parent.children.push(o)</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">tree.push(o)</span><br><span class="line">}</span><br><span class="line">})</span><br><span class="line"><span class="keyword">return</span> tree</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line"><span class="keyword">return</span> [arr]</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">arrayToTree(array, <span class="string">'id'</span>, <span class="string">'pid'</span>)</span><br><span class="line"><span class="comment">/* {</span></span><br><span class="line"><span class="comment">id: '1',</span></span><br><span class="line"><span class="comment">pid: '7',</span></span><br><span class="line"><span class="comment">name: 'aaaaa',</span></span><br><span class="line"><span class="comment">children: [</span></span><br><span class="line"><span class="comment">{</span></span><br><span class="line"><span class="comment">id: '2',</span></span><br><span class="line"><span class="comment">pid: '1',</span></span><br><span class="line"><span class="comment">name: 'bbbbbbb',</span></span><br><span class="line"><span class="comment">children: [</span></span><br><span class="line"><span class="comment">{</span></span><br><span class="line"><span class="comment">id: '6',</span></span><br><span class="line"><span class="comment">pid: '2',</span></span><br><span class="line"><span class="comment">name: 'ccccc',</span></span><br><span class="line"><span class="comment">children: [{ id: '9', pid: '6', name: 'dddd' }],</span></span><br><span class="line"><span class="comment">},</span></span><br><span class="line"><span class="comment">],</span></span><br><span class="line"><span class="comment">},</span></span><br><span class="line"><span class="comment">],</span></span><br><span class="line"><span class="comment">} */</span></span><br></pre></td></tr></tbody></table></figure><p>在这里记录是为了以防用的时候找不到，这脑子😝，万一忘了呢</p><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在使用后台传过来的数据的时候，有时候我们会得到树状结构的数据，虽然有时候，后端会处理掉，但，毕竟我们也可以在前端给它处理一下，一方面也锻炼一下脑子，天天写页面都没思考能力了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JS" scheme="https://GuoChen-thlg.github.io/categories/JS/"/>
    
    
      <category term="算法" scheme="https://GuoChen-thlg.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>axios 取消重复请求</title>
    <link href="https://guochen-thlg.github.io/2020/08/15/axios-%E5%8F%96%E6%B6%88%E9%87%8D%E5%A4%8D%E8%AF%B7%E6%B1%82/13208/"/>
    <id>https://guochen-thlg.github.io/2020/08/15/axios-%E5%8F%96%E6%B6%88%E9%87%8D%E5%A4%8D%E8%AF%B7%E6%B1%82/13208/</id>
    <published>2020-08-15T13:26:12.000Z</published>
    <updated>2020-08-17T13:19:03.374Z</updated>
    
    <content type="html"><![CDATA[<p>在开发单页面应用中，我们在使用 axios 做请求的时候，会遇到一些很不好的体验，当我们切换路由的时候，如果上个页面的请求还没结束，那么这个请求依旧会执行完，我们能不能在不需要的时候就取消掉你？</p><a id="more"></a><p>那么刚刚好， axios 可以实现这个需求。<br>有两种方法可以实现取消请求</p><p>方法一<br>官方示例</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CancelToken = axios.CancelToken</span><br><span class="line"><span class="keyword">const</span> source = CancelToken.source()</span><br><span class="line"></span><br><span class="line">axios</span><br><span class="line">.get(<span class="string">'/user/12345'</span>, {</span><br><span class="line">cancelToken: source.token,</span><br><span class="line">})</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span> (<span class="params">thrown</span>) </span>{</span><br><span class="line"><span class="keyword">if</span> (axios.isCancel(thrown)) {</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Request canceled'</span>, thrown.message)</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line"><span class="comment">// 处理错误</span></span><br><span class="line">}</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">axios.post(</span><br><span class="line"><span class="string">'/user/12345'</span>,</span><br><span class="line">{</span><br><span class="line">name: <span class="string">'new name'</span>,</span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">cancelToken: source.token,</span><br><span class="line">}</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消请求（message 参数是可选的）</span></span><br><span class="line">source.cancel(<span class="string">'Operation canceled by the user.'</span>)</span><br></pre></td></tr></tbody></table></figure><p>方法二<br>官方示例</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CancelToken = axios.CancelToken</span><br><span class="line"><span class="keyword">let</span> cancel</span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">'/user/12345'</span>, {</span><br><span class="line">cancelToken: <span class="keyword">new</span> CancelToken(<span class="function"><span class="keyword">function</span> <span class="title">executor</span>(<span class="params">c</span>) </span>{</span><br><span class="line"><span class="comment">// executor 函数接收一个 cancel 函数作为参数</span></span><br><span class="line">cancel = c</span><br><span class="line">}),</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">// cancel the request</span></span><br><span class="line">cancel()</span><br></pre></td></tr></tbody></table></figure><p>我们这里使用第二种方式</p><p>我们定义三个方法:</p><p>addPending</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pending = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description </span>添加请求</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{Object}</span> <span class="variable">config</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addPending</span>(<span class="params">config</span>) </span>{</span><br><span class="line"><span class="comment">// 唯一标识</span></span><br><span class="line"><span class="keyword">let</span> flag = config.flag || <span class="literal">false</span></span><br><span class="line"><span class="keyword">if</span> (flag) {</span><br><span class="line">config.cancelToken = <span class="keyword">new</span> axios.CancelToken(<span class="function"><span class="params">cancel</span> =&gt;</span> {</span><br><span class="line"><span class="keyword">if</span> (!pending.has(flag)) {</span><br><span class="line">pending.set(flag, cancel)</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line"><span class="keyword">const</span> oldCancel = pending.get(flag)</span><br><span class="line">oldCancel()</span><br><span class="line">pending.set(flag, cancel)</span><br><span class="line">}</span><br><span class="line">})</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> config</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>removePending</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description </span>移除请求</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{Object}</span> <span class="variable">config</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removePending</span>(<span class="params">config</span>) </span>{</span><br><span class="line"><span class="keyword">let</span> flag = config.flag || <span class="literal">false</span></span><br><span class="line"><span class="keyword">if</span> (flag &amp;&amp; pending.has(flag)) {</span><br><span class="line">pending.delete(flag)</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>clearPending 用于在路由跳转时，清空所有请求</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description </span>清空所有请求</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clearPending</span>(<span class="params"></span>) </span>{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [flag, oldCancel] <span class="keyword">of</span> pending) {</span><br><span class="line">oldCancel()</span><br><span class="line">}</span><br><span class="line">pending.clear()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>我们在请求体中，添加 <code>flag</code> 属性，来识别每一个唯一的 API</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">text</span>(<span class="params">data</span>) </span>{</span><br><span class="line"><span class="keyword">return</span> axios({</span><br><span class="line">flag: <span class="string">'text'</span>,</span><br><span class="line">url: <span class="string">'https://easydoc.xyz/mock/NX1XF1Cx/p/29538143/0I92pgNB'</span>,</span><br><span class="line">method: <span class="string">'GET'</span>,</span><br><span class="line">data,</span><br><span class="line">})</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这样我们的函数就写好了，只要在请求拦截中只用就可以实现了</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求拦截</span></span><br><span class="line">request.interceptors.request.use(</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">config</span>) </span>{</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">return</span> addPending(config)</span><br><span class="line">},</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>{</span><br><span class="line"><span class="comment">// 请求错误时的处理</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">}</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 响应拦截</span></span><br><span class="line">request.interceptors.response.use(</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>{</span><br><span class="line"><span class="comment">// 请求成功，移除</span></span><br><span class="line">removePending(response.config)</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">return</span> response.data</span><br><span class="line">},</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>{</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">}</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发单页面应用中，我们在使用 axios 做请求的时候，会遇到一些很不好的体验，当我们切换路由的时候，如果上个页面的请求还没结束，那么这个请求依旧会执行完，我们能不能在不需要的时候就取消掉你？&lt;/p&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="https://GuoChen-thlg.github.io/categories/Vue/"/>
    
    
      <category term="vue" scheme="https://GuoChen-thlg.github.io/tags/vue/"/>
    
      <category term="axios" scheme="https://GuoChen-thlg.github.io/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>vue 使用 elemen UI 导航菜单所遇到的问题</title>
    <link href="https://guochen-thlg.github.io/2020/08/14/vue-%E4%BD%BF%E7%94%A8-elemen-UI-%E5%AF%BC%E8%88%AA%E8%8F%9C%E5%8D%95%E6%89%80%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/23181/"/>
    <id>https://guochen-thlg.github.io/2020/08/14/vue-%E4%BD%BF%E7%94%A8-elemen-UI-%E5%AF%BC%E8%88%AA%E8%8F%9C%E5%8D%95%E6%89%80%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/23181/</id>
    <published>2020-08-14T11:24:48.000Z</published>
    <updated>2020-08-15T13:28:44.293Z</updated>
    
    <content type="html"><![CDATA[<p>我们常常在开发vue 项目中使用 elemen UI 开结合开发，但在单页面应用中，随着用户的操作而改变的状态，我们常常使用 VueX 来做状态管理，但是，如果用户刷新页面，之前的状态都会消失，那么，导航该如何准确给当前页面的导航按钮添加选中的样式呢？</p><a id="more"></a><p>直接上代码</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-menu router mode="horizontal" @select="selectMenu"&gt;</span><br><span class="line">    &lt;template v-for="(item,index) in navlist"&gt;</span><br><span class="line">      &lt;el-menu-item :index="item.path" :key="index" disabled&gt;{{item.name}}&lt;/el-menu-item&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/el-menu&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure><p>这样写的问题是，当用户刷新页面时，当前页面对应的导航并不会被添加选中样式，那该怎么办呢？</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-menu router :default-active="$route.path" mode="horizontal" @select="selectMenu"&gt;</span><br><span class="line">    &lt;template v-for="(item,index) in navlist"&gt;</span><br><span class="line">      &lt;el-menu-item :index="item.path" :key="index" disabled&gt;{{item.name}}&lt;/el-menu-item&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/el-menu&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure><p>当我们这样写，将当前路径时时绑定到导航上，就可以完美实现了.</p><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们常常在开发vue 项目中使用 elemen UI 开结合开发，但在单页面应用中，随着用户的操作而改变的状态，我们常常使用 VueX 来做状态管理，但是，如果用户刷新页面，之前的状态都会消失，那么，导航该如何准确给当前页面的导航按钮添加选中的样式呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="https://GuoChen-thlg.github.io/categories/Vue/"/>
    
    
      <category term="vue" scheme="https://GuoChen-thlg.github.io/tags/vue/"/>
    
      <category term="elemen-ui" scheme="https://GuoChen-thlg.github.io/tags/elemen-ui/"/>
    
      <category term="导航" scheme="https://GuoChen-thlg.github.io/tags/%E5%AF%BC%E8%88%AA/"/>
    
  </entry>
  
  <entry>
    <title>教你如何在本地开发 Shopify 主题</title>
    <link href="https://guochen-thlg.github.io/2020/07/05/%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E5%9C%A8%E6%9C%AC%E5%9C%B0%E5%BC%80%E5%8F%91-Shopify-%E4%B8%BB%E9%A2%98/37643/"/>
    <id>https://guochen-thlg.github.io/2020/07/05/%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E5%9C%A8%E6%9C%AC%E5%9C%B0%E5%BC%80%E5%8F%91-Shopify-%E4%B8%BB%E9%A2%98/37643/</id>
    <published>2020-07-05T05:51:43.000Z</published>
    <updated>2020-07-06T13:42:59.034Z</updated>
    
    <content type="html"><![CDATA[<p>我们在开发 Shopify 主题的时候，常常是在官方的线上编辑器上进行修改代码的，这样的编辑效果不是很好（不能格式化、不能智能提示），而且对于我们想使用自己喜欢的编辑器来编辑的人来说，很是不舒服，那么有没有什么方法可以实现在本地编辑器上进行开发呢？接下来就让我们在本地配置一下环境。</p><a id="more"></a><h3 id="下载-Shopify-主题套件"><a href="#下载-Shopify-主题套件" class="headerlink" title="下载 Shopify 主题套件"></a>下载 Shopify 主题套件</h3><p><a href="https://shopify-themekit.s3.amazonaws.com/v1.0.2/windows-amd64/theme.exe" target="_blank" rel="noopener">win10-64</a><br><br>如果下载速度较慢，也可以下载我百度网盘里的<br><a href="https://pan.baidu.com/s/1YMQ2adpGaBpiwDCYCvoPSA" target="_blank" rel="noopener">https://pan.baidu.com/s/1YMQ2adpGaBpiwDCYCvoPSA</a>提取码：pt8g</p><p>下载完成后，创建一个 Theme Kit 文件夹，将程序复制到文件夹中，然后将路径（D:\DevelopmentTool\Theme Kit）添加到 环境变量（Path）中</p><p>完成后 打开 cmd.exe 并输入 theme</p><h3 id="创建自定义-应用程序"><a href="#创建自定义-应用程序" class="headerlink" title="创建自定义 应用程序"></a>创建自定义 应用程序</h3><p>创建一个自定义应用程序 设置 Theme templates and theme assets 为 Read and write<br>得到 密码后 ，复制下来，保存到一个文件里</p><h3 id="下载主题模板"><a href="#下载主题模板" class="headerlink" title="下载主题模板"></a>下载主题模板</h3><ol><li>查看模板ID</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme new --password=[your-password] --store=[your-store.myshopify.com] --name=[theme name]</span><br></pre></td></tr></tbody></table></figure><p>记住主题 ID</p><p>创建一个文件夹，这将是存放你主题文件的项目模板，然后执行</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme get -p=[your-password] -s=[you-store.myshopify.com] -t=[your-theme-id]</span><br></pre></td></tr></tbody></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>下载配置文件中的主题</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme download</span><br></pre></td></tr></tbody></table></figure><p>打开将在浏览器中打开主题的预览页面，并打印出URL供您参考</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme open</span><br></pre></td></tr></tbody></table></figure><p>Watch将启动一个过程，该过程将监视您的目录中的更改并将其上载到Shopify。任何更改将被记录到终端，并且上传状态也将被记录。只需输入ctrl + C即可停止该程序</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme watch</span><br></pre></td></tr></tbody></table></figure><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在开发 Shopify 主题的时候，常常是在官方的线上编辑器上进行修改代码的，这样的编辑效果不是很好（不能格式化、不能智能提示），而且对于我们想使用自己喜欢的编辑器来编辑的人来说，很是不舒服，那么有没有什么方法可以实现在本地编辑器上进行开发呢？接下来就让我们在本地配置一下环境。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Shopify" scheme="https://GuoChen-thlg.github.io/categories/Shopify/"/>
    
    
      <category term="开发技巧" scheme="https://GuoChen-thlg.github.io/tags/%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Shopify本地开发" scheme="https://GuoChen-thlg.github.io/tags/Shopify%E6%9C%AC%E5%9C%B0%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Liquid</title>
    <link href="https://guochen-thlg.github.io/2020/06/16/Liquid/22647/"/>
    <id>https://guochen-thlg.github.io/2020/06/16/Liquid/22647/</id>
    <published>2020-06-16T11:01:48.000Z</published>
    <updated>2020-06-16T11:15:23.139Z</updated>
    
    <content type="html"><![CDATA[<p>开发 Shopify 商店，首先要熟悉 Liquid 的语法。Liquid 由 Shopify 创造并用 Ruby 实现。</p><a id="more"></a><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>==</td><td>相等</td></tr><tr><td>!=</td><td>不相等</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;=</td><td>大于或等于</td></tr><tr><td>&lt;=</td><td>小于或等于</td></tr><tr><td>or</td><td>逻辑或</td></tr><tr><td>and</td><td>逻辑与</td></tr></tbody></table><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li>Stting</li><li>Number</li><li>Bootlean<ul><li>除了 nil false 其余全都为 真</li></ul></li><li>Nil</li><li>Array</li></ul><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{% comment %}</span><br><span class="line"></span><br><span class="line">{% endcomment %}</span><br></pre></td></tr></tbody></table></figure><h3 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h3><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{% if  true %}</span><br><span class="line"></span><br><span class="line">{% endif %}</span><br></pre></td></tr></tbody></table></figure><p>如果为真就执行</p><h4 id="unless"><a href="#unless" class="headerlink" title="unless"></a>unless</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{% unless %}</span><br><span class="line"></span><br><span class="line">{% endunless %}</span><br></pre></td></tr></tbody></table></figure><p>若为假就执行</p><h4 id="elsif-else"><a href="#elsif-else" class="headerlink" title="elsif / else"></a>elsif / else</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{% elsif %}</span><br><span class="line"></span><br><span class="line">{% else %}</span><br></pre></td></tr></tbody></table></figure><p>否则 如果</p><p>否则</p><h4 id="case-when"><a href="#case-when" class="headerlink" title="case/when"></a>case/when</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">{% case 变量 %}</span><br><span class="line">...</span><br><span class="line">{% when '' %}</span><br><span class="line">...</span><br><span class="line">{% when '' %}</span><br><span class="line">...</span><br><span class="line">{% else %}</span><br><span class="line">...</span><br><span class="line">{% endcase %}</span><br></pre></td></tr></tbody></table></figure><p>类似于 switch</p><h3 id="迭代-循环"><a href="#迭代-循环" class="headerlink" title="迭代/循环"></a>迭代/循环</h3><ul><li><p>break</p><ul><li>循环过程中若干遇到 break 标记（tag）即停止循环</li></ul></li><li><p>continue</p><ul><li>循环过程中若遇到 continue 标记（tag）则跳出当前循环</li></ul></li><li><p>limit limit:5</p><ul><li>限定循环执行的次数</li></ul></li><li><p>offset offsetv:5</p><ul><li>从指定索引号开始执行循环。</li></ul></li><li><p>range (1..5)</p><ul><li>定义循环执行的范围。可利用数字或变量来定义此执行范围<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">{% for i in (3..5) %}</span><br><span class="line">  {{ i }}</span><br><span class="line">{% endfor %}</span><br><span class="line">{% assign num = 4 %}</span><br><span class="line">{% for i in (1..num) %}</span><br><span class="line">  {{ i }}</span><br><span class="line">{% endfor %}</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>reversed</p><ul><li>反转循环的执行顺序。注意和 reverse 过滤器（filter）的拼写是不同的<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{% cycle 'one', 'two', 'three' %}</span><br></pre></td></tr></tbody></table></figure></li></ul></li></ul><p>将 cycle 代码块放入 for 循环中 每次执行都会输出参数中的下一个</p><ul><li>tablerow<ul><li>生成一个 HTML 表格。必须用和<table></table>这两个 HTML 标签将其包裹起来</li><li>cols 定义表格应当有多少列</li><li>limit 在执行到指定的脚标（index）之后退出 tablerow</li><li>offset 在指定的脚标（index）之后开始执行 tablerow</li><li>range 定义循环执行的范围。可利用数字和变量来定义执行范围<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">{% tablerow product in collection.products %}</span><br><span class="line">  {{ product.title }}</span><br><span class="line">{% endtablerow %}</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></tbody></table></figure></li></ul></li></ul><h3 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h3><h4 id="assign-声明"><a href="#assign-声明" class="headerlink" title="assign 声明"></a>assign 声明</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{% assign 变量='' %}</span><br></pre></td></tr></tbody></table></figure><h4 id="capture-声明"><a href="#capture-声明" class="headerlink" title="capture 声明"></a>capture 声明</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{% capture 变量 %}</span><br><span class="line">I am being captured.</span><br><span class="line">{% endcapture %}</span><br></pre></td></tr></tbody></table></figure><h4 id="increment-声明数值变量-0"><a href="#increment-声明数值变量-0" class="headerlink" title="increment 声明数值变量 0"></a>increment 声明数值变量 0</h4><p>每次调用此变量 值 加1<br>初始值为 0</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{% increment my_counter %}</span><br><span class="line">{% increment my_counter %}</span><br><span class="line">{% increment my_counter %}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></tbody></table></figure><h4 id="decrement-声明数值变量-1"><a href="#decrement-声明数值变量-1" class="headerlink" title="decrement 声明数值变量 -1"></a>decrement 声明数值变量 -1</h4><p>每次调用此变量 值 减1<br>初始值为 -1</p><h3 id="原始内容"><a href="#原始内容" class="headerlink" title="原始内容"></a>原始内容</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">{% raw %}</span><br><span class="line">  In Handlebars, {{ this }} will be HTML-escaped, but</span><br><span class="line">  {{{ that }}} will not.</span><br><span class="line">{% endraw %}</span><br></pre></td></tr></tbody></table></figure><p>对代码块中的内容 不做任何处理</p><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><h3 id="abs-绝对值"><a href="#abs-绝对值" class="headerlink" title="abs 绝对值"></a>abs 绝对值</h3><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">{{-8 | abs}}</span><br><span class="line">{{8 | abs}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8 </span><br><span class="line">8</span><br></pre></td></tr></tbody></table></figure><h3 id="append-追加字符串"><a href="#append-追加字符串" class="headerlink" title="append 追加字符串"></a>append 追加字符串</h3><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{"hello" | append: ' word'}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello word</span><br></pre></td></tr></tbody></table></figure><h3 id="prepend-在字符前追加"><a href="#prepend-在字符前追加" class="headerlink" title="prepend 在字符前追加"></a>prepend 在字符前追加</h3><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{ "word" | prepend: 'hello '}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello word</span><br></pre></td></tr></tbody></table></figure><h3 id="at-least-限制数字最小值"><a href="#at-least-限制数字最小值" class="headerlink" title="at_least 限制数字最小值"></a>at_least 限制数字最小值</h3><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">{{ 5 | at_least:6}}</span><br><span class="line">{{ 7 | at_least:6}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">7</span><br></pre></td></tr></tbody></table></figure><h3 id="at-most-限制数字最大值"><a href="#at-most-限制数字最大值" class="headerlink" title="at_most 限制数字最大值"></a>at_most 限制数字最大值</h3><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">{{ 5 | at_most:6}}</span><br><span class="line">{{ 7 | at_most:6}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">6</span><br></pre></td></tr></tbody></table></figure><h3 id="capitalize-首字母大写"><a href="#capitalize-首字母大写" class="headerlink" title="capitalize 首字母大写"></a>capitalize 首字母大写</h3><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{"text" | capitalize}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Text</span><br></pre></td></tr></tbody></table></figure><h3 id="ceil-将浮点数向上取整"><a href="#ceil-将浮点数向上取整" class="headerlink" title="ceil 将浮点数向上取整"></a>ceil 将浮点数向上取整</h3><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{3.1415926 | ceil}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></tbody></table></figure><h3 id="floor-浮点数详向下取整"><a href="#floor-浮点数详向下取整" class="headerlink" title="floor 浮点数详向下取整"></a>floor 浮点数详向下取整</h3><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{9.9 | floor}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9</span><br></pre></td></tr></tbody></table></figure><h3 id="round-四舍五入-保留-位小数"><a href="#round-四舍五入-保留-位小数" class="headerlink" title="round 四舍五入 保留 * 位小数"></a>round 四舍五入 保留 * 位小数</h3><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{{1.4 | round}}</span><br><span class="line">{{1.5 | round}}</span><br><span class="line">{{3.1415926 | round: 3}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3.142</span><br></pre></td></tr></tbody></table></figure><h3 id="compact-删除数组中所有-nil-值"><a href="#compact-删除数组中所有-nil-值" class="headerlink" title="compact 删除数组中所有 nil 值"></a>compact 删除数组中所有 nil 值</h3><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="uniq-删除数组中所有-冗余项"><a href="#uniq-删除数组中所有-冗余项" class="headerlink" title="uniq 删除数组中所有 冗余项"></a>uniq 删除数组中所有 冗余项</h3><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{"1,2,3,4,5,6,8,5,4,2,3,1,7,9,5" | split: ',' | uniq}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1,2,3,4,5,6,8,7,9</span><br></pre></td></tr></tbody></table></figure><h3 id="concat-合并数组"><a href="#concat-合并数组" class="headerlink" title="concat 合并数组"></a>concat 合并数组</h3><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">{%- assign array1 = "a,b,c"| split: ',' -%}</span><br><span class="line">{%- assign array2 = "d,e,f"| split: ',' -%}</span><br><span class="line">{%- assign array = array1 | concat: array2 -%}</span><br><span class="line">{%- for item in array |compact-%}</span><br><span class="line">  &lt;div&gt;{{item}}&lt;/div&gt;</span><br><span class="line">{%- endfor -%}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br><span class="line">e</span><br><span class="line">f</span><br></pre></td></tr></tbody></table></figure><h3 id="date-转换时间格式"><a href="#date-转换时间格式" class="headerlink" title="date 转换时间格式"></a>date 转换时间格式</h3><ul><li>%Y 年</li><li>%y 年（后两位）</li><li>%m 月</li><li>%b 月（英文单词）</li><li>%h 月（英文单词）</li><li>%d 日</li><li>%H 时</li><li>%M 分</li><li>%S 秒</li><li>%s 时间戳</li><li>%a 星期</li><li>%A 星期（全）</li></ul><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">{{"now" |date:"%Y-%m-%d %H:%M"}}</span><br><span class="line">{{"today" |date:"%Y-%m-%d %H:%M"}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-05-03 11:56</span><br><span class="line">2020-05-03 11:56</span><br></pre></td></tr></tbody></table></figure><h3 id="default-默认值"><a href="#default-默认值" class="headerlink" title="default 默认值"></a>default 默认值</h3><p>当变量未定义或为空时，输出默认值<br>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{nub |default:555 }}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">555</span><br></pre></td></tr></tbody></table></figure><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">{%- assign nub = 666 -%}</span><br><span class="line">{{nub |default:555 }}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">666</span><br></pre></td></tr></tbody></table></figure><h3 id="plus-将两数相加"><a href="#plus-将两数相加" class="headerlink" title="plus 将两数相加"></a>plus 将两数相加</h3><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{ 5 | plus: 6}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11</span><br></pre></td></tr></tbody></table></figure><h3 id="minus-将两数相减"><a href="#minus-将两数相减" class="headerlink" title="minus 将两数相减"></a>minus 将两数相减</h3><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{ 8 | minus: 5}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></tbody></table></figure><h3 id="times-将两数相乘"><a href="#times-将两数相乘" class="headerlink" title="times 将两数相乘"></a>times 将两数相乘</h3><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{8   | times: 6}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">48</span><br></pre></td></tr></tbody></table></figure><h3 id="divided-by-将两数相除"><a href="#divided-by-将两数相除" class="headerlink" title="divided_by 将两数相除"></a>divided_by 将两数相除</h3><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">{{17 | divided_by: 4}}</span><br><span class="line">{{17 | divided_by: 4.0}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4.25</span><br><span class="line">4.25</span><br></pre></td></tr></tbody></table></figure><h3 id="modulo-求余"><a href="#modulo-求余" class="headerlink" title="modulo 求余"></a>modulo 求余</h3><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{ 10 | modulo:6}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></tbody></table></figure><h3 id="downcase-将字符串转为小写"><a href="#downcase-将字符串转为小写" class="headerlink" title="downcase 将字符串转为小写"></a>downcase 将字符串转为小写</h3><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{"ABCDEFG" | downcase }}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abcdefg</span><br></pre></td></tr></tbody></table></figure><h3 id="upcase-将字符串转为大写"><a href="#upcase-将字符串转为大写" class="headerlink" title="upcase 将字符串转为大写"></a>upcase 将字符串转为大写</h3><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{"abcdefg" | upcase }}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ABCDEFG</span><br></pre></td></tr></tbody></table></figure><h3 id="first-输出数组第一项"><a href="#first-输出数组第一项" class="headerlink" title="first 输出数组第一项"></a>first 输出数组第一项</h3><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{% assign array = "1,2,3,4,5,6"  | split: ',' %}</span><br><span class="line">{{array|first }}</span><br><span class="line">{{array.first }}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="join-将数组连接成字符串"><a href="#join-将数组连接成字符串" class="headerlink" title="join 将数组连接成字符串"></a>join 将数组连接成字符串</h3><p>参数为连接符</p><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">{% assign array = "a,b,c,d,e,f,g" | split: ',' %}</span><br><span class="line">{{array | join: '-'}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a-b-c-d-e-f-g</span><br></pre></td></tr></tbody></table></figure><h3 id="lstrip-删除字符左侧-空格-制表符-换行符"><a href="#lstrip-删除字符左侧-空格-制表符-换行符" class="headerlink" title="lstrip  删除字符左侧 空格 制表符 换行符"></a>lstrip 删除字符左侧 空格 制表符 换行符</h3><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{"                s  t r i n g            " | lstrip}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s t r i n g</span><br></pre></td></tr></tbody></table></figure><h3 id="rstrip-删除字符右侧-空格-制表符-换行符"><a href="#rstrip-删除字符右侧-空格-制表符-换行符" class="headerlink" title="rstrip  删除字符右侧 空格 制表符 换行符"></a>rstrip 删除字符右侧 空格 制表符 换行符</h3><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{"                s  t r i n g            " | rstrip}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s  t r i n g</span><br></pre></td></tr></tbody></table></figure><h3 id="strip-删除字符串两侧-空格-制表符-换行符"><a href="#strip-删除字符串两侧-空格-制表符-换行符" class="headerlink" title="strip 删除字符串两侧 空格 制表符 换行符"></a>strip 删除字符串两侧 空格 制表符 换行符</h3><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{"                s  t r i n g            " | rstrip}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t r i n g</span><br></pre></td></tr></tbody></table></figure><h3 id="strip-html-删除字符串内-html-标签"><a href="#strip-html-删除字符串内-html-标签" class="headerlink" title="strip_html 删除字符串内 html 标签"></a>strip_html 删除字符串内 html 标签</h3><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Have you read Ulysses?</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="strip-newlines-删除字符串内-换行-字符"><a href="#strip-newlines-删除字符串内-换行-字符" class="headerlink" title="strip_newlines 删除字符串内 换行 字符"></a>strip_newlines 删除字符串内 换行 字符</h3><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">{% capture string %}</span><br><span class="line">Hello</span><br><span class="line">there</span><br><span class="line">{% endcapture %}</span><br><span class="line">{{string | strip_newlines }}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hellothere</span><br></pre></td></tr></tbody></table></figure><h3 id="newline-to-br-将换行符转为"><a href="#newline-to-br-将换行符转为" class="headerlink" title="newline_to_br 将换行符转为 "></a>newline_to_br 将换行符转为<br></h3><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">{% capture string %}</span><br><span class="line">Hello</span><br><span class="line">there</span><br><span class="line">{% endcapture %}</span><br><span class="line">{{string | newline_to_br}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;br/&gt;</span><br><span class="line">Hello&lt;br/&gt;</span><br><span class="line">there&lt;br/&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="remove-删除字符串中出现的-子字符"><a href="#remove-删除字符串中出现的-子字符" class="headerlink" title="remove 删除字符串中出现的 子字符"></a>remove 删除字符串中出现的 子字符</h3><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{ "abcdefg" | remove: 'cd'}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abefg</span><br></pre></td></tr></tbody></table></figure><h3 id="remove-first-删除第一个匹配到的-子字符"><a href="#remove-first-删除第一个匹配到的-子字符" class="headerlink" title="remove_first 删除第一个匹配到的 子字符"></a>remove_first 删除第一个匹配到的 子字符</h3><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{ "abcdcdefg" | remove_first: 'cd'}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abcdefg</span><br></pre></td></tr></tbody></table></figure><h3 id="replace-替换字符"><a href="#replace-替换字符" class="headerlink" title="replace 替换字符"></a>replace 替换字符</h3><p>找到字符并替换掉</p><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{ "abcdcdefg" | replace: 'c', 'd'}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abddddefg</span><br></pre></td></tr></tbody></table></figure><h3 id="replace-first-替换字符"><a href="#replace-first-替换字符" class="headerlink" title="replace_first 替换字符"></a>replace_first 替换字符</h3><p>将字符串中出现的第一个参数替换为第二个参数<br>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{ "abcdcdefg" | replace_first: 'c', 'd'}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abddcdefg</span><br></pre></td></tr></tbody></table></figure><h3 id="reverse-翻转数组"><a href="#reverse-翻转数组" class="headerlink" title="reverse 翻转数组"></a>reverse 翻转数组</h3><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">{% assign array = "1,2,3,4,5,6" | split: ',' %}</span><br><span class="line">{{array | reverse }}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6, 5, 4, 3, 2, 1</span><br></pre></td></tr></tbody></table></figure><h3 id="size-字符长度-大小"><a href="#size-字符长度-大小" class="headerlink" title="size 字符长度 大小"></a>size 字符长度 大小</h3><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{{"s t r i n g" |  size}}</span><br><span class="line">{% assign str = "s t r i n g" %}</span><br><span class="line">{{str.size}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">11</span><br><span class="line">11</span><br></pre></td></tr></tbody></table></figure><h3 id="slice-截取字符串"><a href="#slice-截取字符串" class="headerlink" title="slice 截取字符串"></a>slice 截取字符串</h3><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{{"123456"  | slice: 0}}</span><br><span class="line">{{"123456"  | slice: 2,2}}</span><br><span class="line">{{"123456"  | slice: -1}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">34</span><br><span class="line">6</span><br></pre></td></tr></tbody></table></figure><h3 id="sort-排序-按照字母大小写"><a href="#sort-排序-按照字母大小写" class="headerlink" title="sort 排序 按照字母大小写"></a>sort 排序 按照字母大小写</h3><p>区分大小写<br>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">{%- assign array = "a,f,r,S,d,g,O,y" | split: ',' -%}</span><br><span class="line">{{-array| sort-}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O,S,a,d,f,g,r,y</span><br></pre></td></tr></tbody></table></figure><h3 id="sort-natural-排序-不按照字母大小写"><a href="#sort-natural-排序-不按照字母大小写" class="headerlink" title="sort_natural  排序 不按照字母大小写"></a>sort_natural 排序 不按照字母大小写</h3><p>不区分大小写<br>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">{%- assign array = "a,f,r,S,d,g,O,y" | split: ',' -%}</span><br><span class="line">{{-array| sort_natural -}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a,d,f,g,O,r,S,y</span><br></pre></td></tr></tbody></table></figure><h3 id="split-分割字符串为数组"><a href="#split-分割字符串为数组" class="headerlink" title="split 分割字符串为数组"></a>split 分割字符串为数组</h3><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">{%- assign array = "a,f,r,S,d,g,O,y" | split: ',' -%}</span><br><span class="line">{{array}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a,f,r,S,d,g,O,y</span><br></pre></td></tr></tbody></table></figure><h3 id="truncate-裁剪字符串（字符个数）-省略号"><a href="#truncate-裁剪字符串（字符个数）-省略号" class="headerlink" title="truncate 裁剪字符串（字符个数） 省略号"></a>truncate 裁剪字符串（字符个数） 省略号</h3><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{{"abcdefghijk" | truncate: 8}}</span><br><span class="line">{{"abcdefghijk" | truncate: 8,'...'}}</span><br><span class="line">{{"abcdefghijk" | truncate: 8,'省略'}}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">abcde... </span><br><span class="line">abcde... </span><br><span class="line">abcdef省略</span><br></pre></td></tr></tbody></table></figure><h3 id="truncatewords-裁剪字符串（单词个数）-省略号"><a href="#truncatewords-裁剪字符串（单词个数）-省略号" class="headerlink" title="truncatewords 裁剪字符串（单词个数） 省略号"></a>truncatewords 裁剪字符串（单词个数） 省略号</h3><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{{"a b c d e f g h ijk" | truncatewords: 8}}&lt;br/&gt;</span><br><span class="line">{{"a b c d e f g h ijk" | truncatewords: 8,'...'}}&lt;br/&gt;</span><br><span class="line">{{"a b c d e f g h ijk" | truncatewords: 8,'省略'}}&lt;br/&gt;</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a b c d e f g h...</span><br><span class="line">a b c d e f g h...</span><br><span class="line">a b c d e f g h省略</span><br></pre></td></tr></tbody></table></figure><h3 id="url-encode-将字符中-非url安全字符转换为百分号编码的字符"><a href="#url-encode-将字符中-非url安全字符转换为百分号编码的字符" class="headerlink" title="url_encode 将字符中 非url安全字符转换为百分号编码的字符"></a>url_encode 将字符中 非url安全字符转换为百分号编码的字符</h3><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{"baidu.com?q=@qq.com&amp;w=sd" | url_encode }}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">baidu.com%3Fq%3D%40qq.com%26w%3Dsd</span><br></pre></td></tr></tbody></table></figure><h3 id="url-decode-将字符中-百分号编码的字符-解码"><a href="#url-decode-将字符中-百分号编码的字符-解码" class="headerlink" title="url_decode 将字符中 百分号编码的字符  解码"></a>url_decode 将字符中 百分号编码的字符 解码</h3><p>输入</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{{"baidu.com%3Fq%3D%40qq.com%26w%3Dsd" | url_decode }}</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">baidu.com?q=@qq.com&amp;w=sd</span><br></pre></td></tr></tbody></table></figure><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发 Shopify 商店，首先要熟悉 Liquid 的语法。Liquid 由 Shopify 创造并用 Ruby 实现。&lt;/p&gt;
    
    </summary>
    
    
      <category term="文档" scheme="https://GuoChen-thlg.github.io/categories/%E6%96%87%E6%A1%A3/"/>
    
      <category term="Liquid" scheme="https://GuoChen-thlg.github.io/categories/%E6%96%87%E6%A1%A3/Liquid/"/>
    
    
      <category term="Shopify" scheme="https://GuoChen-thlg.github.io/tags/Shopify/"/>
    
      <category term="Liquid" scheme="https://GuoChen-thlg.github.io/tags/Liquid/"/>
    
  </entry>
  
  <entry>
    <title>shopify 自定义应用开发</title>
    <link href="https://guochen-thlg.github.io/2020/06/13/shopify-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/15100/"/>
    <id>https://guochen-thlg.github.io/2020/06/13/shopify-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/15100/</id>
    <published>2020-06-13T11:36:18.000Z</published>
    <updated>2020-07-05T07:13:29.972Z</updated>
    
    <content type="html"><![CDATA[<p>公司要求开发一个 shopify 嵌入式应用，说实话，实在是有些坎坷，主要是英文文档😭😭，在这里自己做下记录。<br>Shopify Inc.是加拿大的一家跨国电子商务公司.Shopify为在线零售商提供一整套服务“包括支付、市场营销、运输和客户契合工具，以简化小型商户开设在线商店的过程</p><a id="more"></a><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>在开发之前呢，首先你需要准备一个 <code>开发者账号</code>。 <a href="https://partners.shopify.com/signup" target="_blank" rel="noopener">创建一个 Shopify 合作伙伴账户</a></p><p>官方推荐使用 React Next 作为渲染框架 node 作为服务器后端开发 使用 GraphQL Apollo 作为查询语言 使用 Polaris 作为 UI组件库</p><h3 id="首先要确保自己安装了-Node-js"><a href="#首先要确保自己安装了-Node-js" class="headerlink" title="首先要确保自己安装了 Node.js"></a>首先要确保自己安装了 Node.js</h3><p>运行一下命令 检查 node 版本</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></tbody></table></figure><p>如果已经安装，请确保您使用的是8.1.0或更高版本。</p><h3 id="创建项目文件夹"><a href="#创建项目文件夹" class="headerlink" title="创建项目文件夹"></a>创建项目文件夹</h3><p>创建文件夹 shopify_app</p><p>进入到项目文件夹</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd shopify_app</span><br></pre></td></tr></tbody></table></figure><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></tbody></table></figure><h3 id="使用-Next-js-构建-React-支架"><a href="#使用-Next-js-构建-React-支架" class="headerlink" title="使用 Next.js 构建 React 支架"></a>使用 Next.js 构建 React 支架</h3><p>安装 Next React ReactDOM</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install react react-dom next --save</span><br></pre></td></tr></tbody></table></figure><p>在根目录中创建 pages 文件夹<br>在 pages 文件夹中添加 index.js</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Index = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;Sample app using React and Next.js&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Index;</span><br></pre></td></tr></tbody></table></figure><p>修改 package.json 文件</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"scripts"</span>: {</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"next"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"next build"</span>,</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"next start"</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></tbody></table></figure><h3 id="将应用嵌入-Shopify"><a href="#将应用嵌入-Shopify" class="headerlink" title="将应用嵌入 Shopify"></a>将应用嵌入 Shopify</h3><p>安装 ngrok koa @shopify/koa-shopify-auth dotenv koa-session isomorphic-fetch @zeit/next-css @shopify/polaris @shopify/app-bridge-react js-cookie</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install ngrok -g</span><br><span class="line">npm install koa @shopify/koa-shopify-auth dotenv koa-session isomorphic-fetch --save</span><br></pre></td></tr></tbody></table></figure><p>运行</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngrok http 3000</span><br></pre></td></tr></tbody></table></figure><h4 id="获取-shopifyAPI秘钥-和-shopifyAPI秘密秘钥"><a href="#获取-shopifyAPI秘钥-和-shopifyAPI秘密秘钥" class="headerlink" title="获取 shopifyAPI秘钥 和 shopifyAPI秘密秘钥"></a>获取 shopifyAPI秘钥 和 shopifyAPI秘密秘钥</h4><p>通过登录 <a href="https://partners.shopify.com/signup" target="_blank" rel="noopener">Shopify 合作伙伴账户</a> 创建一个应用程序<br>获取。您可以创建： 公共应用程序 自定义应用程序 私人应用程序<br>这里我们创建 自定义应用程序</p><p>在 <code>应用程序URL</code> 中填入 ngrok转发URL的HTTPS版本<br>将相同的HTTPS转发URL粘贴到 <code>列入白名单的重定向URL</code> 字段中，并将 /auth/ allback 添加到路径的末尾<br>然后 创建应用</p><p>然后在根目录创建 .env 文件</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHOPIFY_API_KEY = '您的来自SHOPIFY PARTNERS仪表板的API密钥' </span><br><span class="line">SHOPIFY_API_SECRET_KEY = '您的来自SHOPIFY PARTNERS仪表板的API密钥'</span><br></pre></td></tr></tbody></table></figure><h4 id="设置-Node-js-服务器-OAuth-授权认证"><a href="#设置-Node-js-服务器-OAuth-授权认证" class="headerlink" title="设置 Node.js 服务器 OAuth 授权认证"></a>设置 Node.js 服务器 OAuth 授权认证</h4><p>在项目根目录中 创建 server.js 文件</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'isomorphic-fetch'</span>)</span><br><span class="line"><span class="keyword">const</span> dotenv = <span class="built_in">require</span>(<span class="string">'dotenv'</span>)</span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> next = <span class="built_in">require</span>(<span class="string">'next'</span>)</span><br><span class="line"><span class="keyword">const</span> { <span class="attr">default</span>: createShopifyAuth } = <span class="built_in">require</span>(<span class="string">'@shopify/koa-shopify-auth'</span>)</span><br><span class="line"><span class="keyword">const</span> { verifyRequest } = <span class="built_in">require</span>(<span class="string">'@shopify/koa-shopify-auth'</span>)</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'koa-session'</span>)</span><br><span class="line">dotenv.config()</span><br><span class="line"><span class="comment">// graphql的相关中间件</span></span><br><span class="line"><span class="keyword">const</span> { <span class="attr">default</span>: graphQLProxy } = <span class="built_in">require</span>(<span class="string">'@shopify/koa-shopify-graphql-proxy'</span>)</span><br><span class="line"><span class="keyword">const</span> { ApiVersion } = <span class="built_in">require</span>(<span class="string">'@shopify/koa-shopify-graphql-proxy'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="built_in">parseInt</span>(process.env.PORT, <span class="number">10</span>) || <span class="number">3000</span></span><br><span class="line"><span class="keyword">const</span> dev = process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line"><span class="keyword">const</span> app = next({ dev })</span><br><span class="line"><span class="keyword">const</span> handle = app.getRequestHandler()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> { SHOPIFY_API_SECRET_KEY, SHOPIFY_API_KEY } = process.env <span class="comment">// 环境变量里读取 api-key与api-secret-key</span></span><br><span class="line"></span><br><span class="line">app.prepare().then(<span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">    <span class="keyword">const</span> server = <span class="keyword">new</span> Koa()</span><br><span class="line">    server.use(session(server))</span><br><span class="line">    server.keys = [SHOPIFY_API_SECRET_KEY]</span><br><span class="line">    server.use(</span><br><span class="line">        createShopifyAuth({</span><br><span class="line">        apiKey: SHOPIFY_API_KEY,</span><br><span class="line">            secret: SHOPIFY_API_SECRET_KEY,</span><br><span class="line">            scopes: [<span class="string">'read_products'</span>, <span class="string">'write_products'</span>,<span class="string">'read_orders'</span>], <span class="comment">//填写相关应用api相关请求的权限</span></span><br><span class="line">            afterAuth (ctx) {</span><br><span class="line">                <span class="keyword">const</span> { shop, accessToken } = ctx.session <span class="comment">// 通过session拿取相关商店地址以及请求api需要的accessToken</span></span><br><span class="line">                ctx.cookies.set(<span class="string">'shopOrigin'</span>, shop, { <span class="attr">httpOnly</span>: <span class="literal">false</span> })</span><br><span class="line">                ctx.redirect(<span class="string">'/'</span>) <span class="comment">// 重定向到index首页</span></span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    server.use(verifyRequest())</span><br><span class="line">    server.use(<span class="keyword">async</span> (ctx) =&gt; {</span><br><span class="line">        <span class="keyword">await</span> handle(ctx.req, ctx.res)</span><br><span class="line">        ctx.respond = <span class="literal">false</span></span><br><span class="line">        ctx.res.statusCode = <span class="number">200</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    })</span><br><span class="line"></span><br><span class="line">    server.use(graphQLProxy({ <span class="attr">version</span>: ApiVersion.October19 })) <span class="comment">// 这里填写相关api的版本</span></span><br><span class="line">    server.listen(port, () =&gt; {</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`&gt; Ready on http://localhost:<span class="subst">${port}</span>`</span>) <span class="comment">// 监听端口</span></span><br><span class="line">    })</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>修改 package.json 文件</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"scripts"</span>: {</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"node server.js"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"next build"</span>,</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"NODE_ENV=production node server.js"</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>然后启动项目 将应用安装到自己的测试商店 就可以看到自己的应用已经成功运行了！</p><p>Shopify 官方文档<br><a href="https://shopify.dev/concepts/shopify-introduction" target="_blank" rel="noopener">Shopify developers</a></p><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司要求开发一个 shopify 嵌入式应用，说实话，实在是有些坎坷，主要是英文文档😭😭，在这里自己做下记录。&lt;br&gt;Shopify Inc.是加拿大的一家跨国电子商务公司.Shopify为在线零售商提供一整套服务“包括支付、市场营销、运输和客户契合工具，以简化小型商户开设在线商店的过程&lt;/p&gt;
    
    </summary>
    
    
      <category term="开发" scheme="https://GuoChen-thlg.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="shopify" scheme="https://GuoChen-thlg.github.io/tags/shopify/"/>
    
      <category term="next.js" scheme="https://GuoChen-thlg.github.io/tags/next-js/"/>
    
      <category term="node.js" scheme="https://GuoChen-thlg.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>Redux 小试牛刀</title>
    <link href="https://guochen-thlg.github.io/2020/06/07/Redux-%E5%B0%8F%E8%AF%95%E7%89%9B%E5%88%80/37966/"/>
    <id>https://guochen-thlg.github.io/2020/06/07/Redux-%E5%B0%8F%E8%AF%95%E7%89%9B%E5%88%80/37966/</id>
    <published>2020-06-07T05:38:00.000Z</published>
    <updated>2020-06-07T08:07:48.268Z</updated>
    
    <content type="html"><![CDATA[<p>在使用 Redux 之前，首先要了解为什么使用 Redux。</p><blockquote><p>随着 JavaScript 单页应用开发日趋复杂，JavaScript 需要管理比任何时候都要多的 state （状态）。 这些 state 可能包括服务器响应、缓存数据、本地生成尚未持久化到服务器的数据，也包括 UI 状态，如激活的路由，被选中的标签，是否显示加载动效或者分页器等等。</p></blockquote><a id="more"></a><h3 id="Redux-三要素"><a href="#Redux-三要素" class="headerlink" title="Redux 三要素"></a>Redux 三要素</h3><ul><li>Action（将要发生的操作）</li><li>Reducer（根据 action 更新 state，是一个纯函数）<ul><li>提供 combineReducers(reducers) 函数组合多个 reducer</li></ul></li><li>存放 state 数据的 Store（将 action 和 reducer 联系到一起的对象）<ul><li>提供 getState() 方法获取 state</li><li>提供 dispatch(action) 方法更新 state</li><li>通过 subsctibe(listener) 注册监听器</li><li>通过 subscribr(listener) 返回的函数注销监听器</li></ul></li></ul><h3 id="三大基本原则"><a href="#三大基本原则" class="headerlink" title="三大基本原则"></a>三大基本原则</h3><ol><li>单一数据源</li><li>state 是只读的，只能通过触发 action 修改 state</li><li>使用纯函数来执行修改</li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li>创建 reducer</li><li>创建 store 用于存储</li><li>绑定事件</li><li>定义 render 函数，更新视图</li><li>为 store 添加监听，每次状态发生变化即刻调用render函数渲染组件</li><li>初始化渲染默认数据</li></ol><p>我们用 Redux 来写一个计数器</p><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>编写 HTML 代码</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>计数器：<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"num"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"addNum()"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"minNum()"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"doubleness()"</span>&gt;</span>2倍<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"square()"</span>&gt;</span>平方<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="导入-redux-min-js"><a href="#导入-redux-min-js" class="headerlink" title="导入 redux.min.js"></a>导入 redux.min.js</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"./redux.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> addNum = <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">    <span class="keyword">let</span> action = {</span><br><span class="line">        type: <span class="string">'ADD_ONE'</span></span><br><span class="line">    }</span><br><span class="line">    store.dispatch(action)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> minNum = <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">    <span class="keyword">let</span> action = {</span><br><span class="line">        type: <span class="string">'MIN_ONE'</span></span><br><span class="line">    }</span><br><span class="line">    store.dispatch(action)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> doubleness = <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">    <span class="keyword">let</span> action = {</span><br><span class="line">        type: <span class="string">'DOUBLENESS'</span></span><br><span class="line">    }</span><br><span class="line">    store.dispatch(action)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> square = <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">    <span class="keyword">let</span> action = {</span><br><span class="line">        type: <span class="string">'SQUARE'</span></span><br><span class="line">    }</span><br><span class="line">    store.dispatch(action)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="创建纯函数"><a href="#创建纯函数" class="headerlink" title="创建纯函数"></a>创建纯函数</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> counter = <span class="function">(<span class="params">state = <span class="number">0</span>, action</span>) =&gt;</span> {</span><br><span class="line">            <span class="keyword">switch</span> (action.type) {</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'ADD_ONE'</span>:</span><br><span class="line">                    <span class="keyword">return</span> state + <span class="number">1</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'MIN_ONE'</span>:</span><br><span class="line">                    <span class="keyword">return</span> state - <span class="number">1</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'DOUBLENESS'</span>:</span><br><span class="line">                    <span class="keyword">return</span> state * <span class="number">2</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'SQUARE'</span>:</span><br><span class="line">                    <span class="keyword">return</span> state * state</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">return</span> state</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br></pre></td></tr></tbody></table></figure><h4 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = Redux.createStore(counter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readen = <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'num'</span>).innerHTML = store.getState()</span><br><span class="line">    <span class="built_in">console</span>.log(store.getState());</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">readen()</span><br><span class="line">store.subscribe(readen)</span><br></pre></td></tr></tbody></table></figure><p><a href="https://www.redux.org.cn/" target="_blank" rel="noopener">Redux 中文文档</a></p><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用 Redux 之前，首先要了解为什么使用 Redux。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;随着 JavaScript 单页应用开发日趋复杂，JavaScript 需要管理比任何时候都要多的 state （状态）。 这些 state 可能包括服务器响应、缓存数据、本地生成尚未持久化到服务器的数据，也包括 UI 状态，如激活的路由，被选中的标签，是否显示加载动效或者分页器等等。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Redux" scheme="https://GuoChen-thlg.github.io/categories/Redux/"/>
    
    
      <category term="Redux" scheme="https://GuoChen-thlg.github.io/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>OWL Carousel2</title>
    <link href="https://guochen-thlg.github.io/2020/05/24/OWL-Carousel2/13606/"/>
    <id>https://guochen-thlg.github.io/2020/05/24/OWL-Carousel2/13606/</id>
    <published>2020-05-24T01:34:07.000Z</published>
    <updated>2020-12-26T11:24:25.245Z</updated>
    
    <content type="html"><![CDATA[<p>Owl Carousel 是一个强大、实用但小巧的 jQuery 幻灯片插件，它具有一下特点：</p><ul><li>兼容所有浏览器</li><li>支持响应式</li><li>支持 CSS3 过度</li><li>支持触摸事件</li><li>支持 JSON 及自定义 JSON 格式</li><li>支持进度条</li><li>支持自定义事件</li><li>支持延迟加载</li><li>支持自适应高度</li></ul><p>Owl Carousel 提供了众多的参数、回调函数及自定义事件（具体请往下浏览），所以它几乎可以满足你的所有要求。</p><a id="more"></a><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">div#outer&gt;div.item*3</span><br><span class="line"></span><br><span class="line">$('#outer').owlCarousel({</span><br><span class="line">  ...</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>作用</th></tr></thead><tbody><tr><td>items</td><td>Number</td><td>3</td><td>您想要在屏幕上看到的项目数。</td></tr><tr><td>margin</td><td>Number</td><td>0</td><td>项目上的margin-right（px）。</td></tr><tr><td>loop</td><td>Boolean</td><td>false</td><td>无限循环。复制最后一个和第一个项目以获得循环幻觉。</td></tr><tr><td>center</td><td>Boolean</td><td>false</td><td>中心项。适用于偶数个项目。</td></tr><tr><td>mouseDrag</td><td>Boolean</td><td>true</td><td>启用鼠标拖动。</td></tr><tr><td>touchDrag</td><td>Boolean</td><td>true</td><td>触摸拖动已启用</td></tr><tr><td>pullDrag</td><td>Boolean</td><td>true</td><td>舞台拉到边缘。</td></tr><tr><td>freeDrag</td><td>Boolean</td><td>false</td><td>项目拉到边缘。</td></tr><tr><td>stagePadding</td><td>Number</td><td>0</td><td>在舞台上左右滑动（可以看到邻居）。</td></tr><tr><td>merge</td><td>Boolean</td><td>false</td><td>合并项目。在项目内寻找data-merge =’{number}’。</td></tr><tr><td>mergeFit</td><td>Boolean</td><td>true</td><td>如果屏幕小于项目值，则适合合并的项目。</td></tr><tr><td>autoWidth</td><td>Boolean</td><td>false</td><td>设置非网格内容。尝试在div上使用宽度样式。</td></tr><tr><td>startPosition</td><td>Number/String</td><td>0</td><td>起始位置或URL哈希字符串，例如“ #id”。</td></tr><tr><td>URLhashListener</td><td>Boolean</td><td>false</td><td>监听网址哈希更改。项上的数据哈希是必需的。</td></tr><tr><td>nav</td><td>Boolean</td><td>false</td><td>显示下一个/上一个按钮。</td></tr><tr><td>rewind</td><td>Boolean</td><td>true</td><td>到达边界后向后走。</td></tr><tr><td>navText</td><td>Array</td><td>['next','prev']</td><td>允许HTML。</td></tr><tr><td>navElement</td><td>String</td><td>div</td><td>单个方向导航链接的DOM元素类型。</td></tr><tr><td>slideBy</td><td>Number/String</td><td>1</td><td>导航幻灯片x。可以将“page”字符串设置为逐页滑动。</td></tr><tr><td>slideTransition</td><td>String</td><td>``</td><td>您可以定义要使用的阶段的过渡，例如。线性的。</td></tr><tr><td>dots</td><td>Boolean</td><td>true</td><td>显示点导航。</td></tr><tr><td>dotsEach</td><td>Number/Boolean</td><td>false</td><td>每个x项目显示点。</td></tr><tr><td>dotsData</td><td>Boolean</td><td>false</td><td>由数据点内容使用。</td></tr><tr><td>lazyLoad</td><td>Boolean</td><td>false</td><td>延迟加载图像。data-src和data-src-retina用于高分辨率。如果元素不是<img>，也将图像加载为背景内联样式</td></tr><tr><td>lazyLoadEager</td><td>Number</td><td>0</td><td>根据要预加载的项目，将图像预先正确地预加载到右侧（启用循环时向左加载）。</td></tr><tr><td>autoplay</td><td>Boolean</td><td>false</td><td>自动播放。</td></tr><tr><td>autoplayTimeout</td><td>Number</td><td>5000</td><td>自动播放间隔超时。</td></tr><tr><td>autoplayHoverPause</td><td>Boolean</td><td>false</td><td>鼠标悬停时暂停。</td></tr><tr><td>smartSpeed</td><td>Number</td><td>250</td><td>速度计算。</td></tr><tr><td>fluidSpeed</td><td>Boolean</td><td>Number</td><td>速度计算</td></tr><tr><td>autoplaySpeed</td><td>Number/Boolean</td><td>false</td><td>自动播放速度。</td></tr><tr><td>navSpeed</td><td>Number/Boolean</td><td>false</td><td>导航速度。</td></tr><tr><td>dotsSpeed</td><td>Boolean</td><td>Number/Boolean</td><td>分页速度。</td></tr><tr><td>dragEndSpeed</td><td>Number/Boolean</td><td>false</td><td>拖动结束速度。</td></tr><tr><td>callbacks</td><td>Boolean</td><td>true</td><td>启用回调事件。</td></tr><tr><td>responsive</td><td>Object</td><td>empty object</td><td>包含响应选项的对象。可以设置为false以删除响应功能。</td></tr><tr><td>responsiveRefreshRate</td><td>Number</td><td>200</td><td>响应刷新率。</td></tr><tr><td>responsiveBaseElement</td><td>DOM element</td><td>window</td><td>在任何DOM元素上设置。如果您关心无响应的浏览器（例如ie8），请在主包装器上使用它。这将防止疯狂调整大小</td></tr><tr><td>video</td><td>Boolean</td><td>false</td><td>启用提取YouTube / Vimeo / Vzaar视频的功能。</td></tr><tr><td>videoHeight</td><td>Number/Boolean</td><td>false</td><td>设置视频的高度。</td></tr><tr><td>videoWidth</td><td>Number/Boolean</td><td>false</td><td>设置视频的宽度。</td></tr><tr><td>animateOut</td><td>String/Boolean</td><td>false</td><td>CSS3动画类。</td></tr><tr><td>animateIn</td><td>String/Boolean</td><td>false</td><td>输入CSS3动画的类。</td></tr><tr><td>fallbackEasing</td><td>String</td><td>swing</td><td>简化CSS2 $ .animate。</td></tr><tr><td>info</td><td>Function</td><td>false</td><td>回调以获取基本信息（当前项目/页面/宽度）。信息功能的第二个参数是Owl DOM对象引用。</td></tr><tr><td>nestedItemSelector</td><td>String/Class</td><td>false</td><td>如果猫头鹰项目深深嵌套在某些生成的内容中，请使用它。例如“ youritem”。在类名之前不要使用点号。</td></tr><tr><td>itemElement</td><td>String</td><td>div</td><td>用于owl-item的DOM元素类型。</td></tr><tr><td>stageElement</td><td>String</td><td>div</td><td>用于owl-item的DOM元素类型。</td></tr><tr><td>navContainer</td><td>String/Class/ID/Boolean</td><td>false</td><td>为nav设置自己的容器。</td></tr><tr><td>dotsContainer</td><td>String/Class/ID/Boolean</td><td>false</td><td>为nav设置自己的容器。</td></tr><tr><td>checkVisible</td><td>Boolean</td><td>true</td><td>如果您知道轮播总是可见的，则可以将checkVisibility设置为false，以防止昂贵的浏览器布局强制回流$ element.is（’：visible’）。</td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><p><a href="https://owlcarousel2.github.io/OwlCarousel2/docs/api-options.html" target="_blank" rel="noopener">OWL Carousel2官方文档</a></p><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Owl Carousel 是一个强大、实用但小巧的 jQuery 幻灯片插件，它具有一下特点：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;兼容所有浏览器&lt;/li&gt;&lt;li&gt;支持响应式&lt;/li&gt;&lt;li&gt;支持 CSS3 过度&lt;/li&gt;&lt;li&gt;支持触摸事件&lt;/li&gt;&lt;li&gt;支持 JSON 及自定义 JSON 格式&lt;/li&gt;&lt;li&gt;支持进度条&lt;/li&gt;&lt;li&gt;支持自定义事件&lt;/li&gt;&lt;li&gt;支持延迟加载&lt;/li&gt;&lt;li&gt;支持自适应高度&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Owl Carousel 提供了众多的参数、回调函数及自定义事件（具体请往下浏览），所以它几乎可以满足你的所有要求。&lt;/p&gt;
    
    </summary>
    
    
      <category term="文档" scheme="https://GuoChen-thlg.github.io/categories/%E6%96%87%E6%A1%A3/"/>
    
      <category term="jQuery" scheme="https://GuoChen-thlg.github.io/categories/%E6%96%87%E6%A1%A3/jQuery/"/>
    
    
      <category term="jQuery插件" scheme="https://GuoChen-thlg.github.io/tags/jQuery%E6%8F%92%E4%BB%B6/"/>
    
      <category term="jQuery轮播图" scheme="https://GuoChen-thlg.github.io/tags/jQuery%E8%BD%AE%E6%92%AD%E5%9B%BE/"/>
    
      <category term="OWL Carousel2" scheme="https://GuoChen-thlg.github.io/tags/OWL-Carousel2/"/>
    
  </entry>
  
  <entry>
    <title>如何搭建React项目</title>
    <link href="https://guochen-thlg.github.io/2020/04/13/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BAReact%E9%A1%B9%E7%9B%AE/45936/"/>
    <id>https://guochen-thlg.github.io/2020/04/13/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BAReact%E9%A1%B9%E7%9B%AE/45936/</id>
    <published>2020-04-13T05:58:19.000Z</published>
    <updated>2020-07-05T06:58:56.417Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React-是什么"><a href="#React-是什么" class="headerlink" title="React 是什么"></a>React 是什么</h2><p>React 是一个声明式，高效且灵活的用于构建用户界面的 JavaScript 库。使用 React 可以将一些简短、独立的代码片段组合成复杂的 UI 界面，这些代码片段被称作“组件”。</p><a id="more"></a><h2 id="React-项目搭建步骤"><a href="#React-项目搭建步骤" class="headerlink" title="React 项目搭建步骤"></a>React 项目搭建步骤</h2><ol><li>安装 Node npm 并检查其版本<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></tbody></table></figure></li><li>创建项目<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app my-app</span><br></pre></td></tr></tbody></table></figure></li><li>打开项目<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd my-app</span><br><span class="line"></span><br><span class="line">npm start</span><br></pre></td></tr></tbody></table></figure></li></ol><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;React-是什么&quot;&gt;&lt;a href=&quot;#React-是什么&quot; class=&quot;headerlink&quot; title=&quot;React 是什么&quot;&gt;&lt;/a&gt;React 是什么&lt;/h2&gt;&lt;p&gt;React 是一个声明式，高效且灵活的用于构建用户界面的 JavaScript 库。使用 React 可以将一些简短、独立的代码片段组合成复杂的 UI 界面，这些代码片段被称作“组件”。&lt;/p&gt;
    
    </summary>
    
    
      <category term="React" scheme="https://GuoChen-thlg.github.io/categories/React/"/>
    
    
      <category term="React" scheme="https://GuoChen-thlg.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>webpack（2）</title>
    <link href="https://guochen-thlg.github.io/2020/04/11/webpack%EF%BC%882%EF%BC%89/16618/"/>
    <id>https://guochen-thlg.github.io/2020/04/11/webpack%EF%BC%882%EF%BC%89/16618/</id>
    <published>2020-04-11T07:07:29.000Z</published>
    <updated>2020-04-21T10:06:06.991Z</updated>
    
    <content type="html"><![CDATA[<p>如何配置 webpack 转化器， webpack 插件， webpack 开发服务器呢？</p><a id="more"></a><h2 id="webpack-转化器"><a href="#webpack-转化器" class="headerlink" title="webpack 转化器"></a>webpack 转化器</h2><blockquote><p>loader 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。例如：less、sass等loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。test 属性，用于标识出应该被对应的 loader 进行转换的某个或某些文件。use 属性，表示进行转换时，应该使用哪个 loader。</p></blockquote><ul><li>例1 若要引用 css 样式，则要配置相应的配置</li></ul><ol><li>安装 style-loader css-loader<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install style-loader css-loader</span><br></pre></td></tr></tbody></table></figure></li><li>在 module 下配置<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: {<span class="comment">// loladers 遵循module.rules规则</span></span><br><span class="line">    rules: [<span class="comment">// 规则</span></span><br><span class="line">        {<span class="comment">// 样式</span></span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]</span><br><span class="line">        }</span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><ul><li>例2 引用图片</li></ul><ol><li>安装 url-lolader file-loader<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install url-lolader file-loader</span><br></pre></td></tr></tbody></table></figure></li><li>在 module 下配置<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: {<span class="comment">// loladers 遵循module.rules规则</span></span><br><span class="line">        rules: [<span class="comment">// 规则</span></span><br><span class="line">            {<span class="comment">// 图片</span></span><br><span class="line">                test: <span class="regexp">/\.(gif|png|jpg)$/</span>,</span><br><span class="line">                use: [{</span><br><span class="line">                    loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                    options: {</span><br><span class="line">                        limit: <span class="number">500</span>,<span class="comment">// 限制文件大小 500kb</span></span><br><span class="line">                    }</span><br><span class="line">                }]</span><br><span class="line">            }</span><br><span class="line">        ]</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="webpack-插件"><a href="#webpack-插件" class="headerlink" title="webpack 插件"></a>webpack 插件</h2><blockquote><p>loader 被用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。插件接口功能极其强大，可以用来处理各种各样的任务。想要使用一个插件，你只需要 require() 它，然后把它添加到 plugins 数组中。多数插件可以通过选项(option)自定义。你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 new 操作符来创建它的一个实例。</p></blockquote><ul><li>配置模板，合并文件</li></ul><ol><li>安装 html-webpack-plugin<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install html-webpack-plugin</span><br></pre></td></tr></tbody></table></figure></li><li>配置<br>引入<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br></pre></td></tr></tbody></table></figure>在 plugins 下添加如下配置<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> HtmlWebpackPlugin({</span><br><span class="line">        filename: <span class="string">'index.html'</span>,<span class="comment">// 打包后的文件名字</span></span><br><span class="line">        chunks: [<span class="string">'index'</span>],<span class="comment">// 引入的文件,对应 entry 中的名字</span></span><br><span class="line">        title: <span class="string">'我是指定的标题'</span>,</span><br><span class="line">        template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">        hash: <span class="literal">true</span>,<span class="comment">// 防止浏览器缓存</span></span><br><span class="line">        minify: {<span class="comment">//压缩 html "" ''</span></span><br><span class="line">            collapseWhitespace: <span class="literal">true</span>,<span class="comment">// 折叠构成文档tr中的文本节点的空白</span></span><br><span class="line">            removeAttributeQuotes: <span class="literal">true</span>,<span class="comment">// 删除属性周围的引号</span></span><br><span class="line">        }</span><br><span class="line">    })</span><br></pre></td></tr></tbody></table></figure></li></ol><ul><li>为了避免每次手动删除 dist 文件夹 安装 clean-webpack-plugin 插件</li></ul><ol><li>安装<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install clean-webpack-plugin</span><br></pre></td></tr></tbody></table></figure></li><li>配置<br>引入<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> { CleanWebpackPlugin } = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>)</span><br></pre></td></tr></tbody></table></figure>在 plugins 下添加如下配置<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> CleanWebpackPlugin()<span class="comment">// 删除 dist 文件夹</span></span><br></pre></td></tr></tbody></table></figure></li></ol><ul><li>如果有静态文件，该怎么输出到 public 文件夹呢？可以安装 copy-webpack-plugin</li></ul><ol><li>安装<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install copy-webpack-plugin</span><br></pre></td></tr></tbody></table></figure></li><li>配置<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">'copy-webpack-plugin'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> CopyWebpackPlugin([<span class="comment">// 静态资源输出</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">from</span>: path.relative(__dirname, <span class="string">'src/assets/'</span>),</span><br><span class="line">            to: <span class="string">'../public'</span></span><br><span class="line">        }</span><br><span class="line">    ])</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="webpack-开发服务器"><a href="#webpack-开发服务器" class="headerlink" title="webpack 开发服务器"></a>webpack 开发服务器</h2><ul><li>开发服务器的配置如下<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">devServer: {<span class="comment">// 开发服务器</span></span><br><span class="line">    contentBase: path.join(__dirname, <span class="string">"dist"</span>), <span class="comment">//设置服务器访问的基本目录</span></span><br><span class="line">    host: <span class="string">'localhost'</span>, <span class="comment">//服务器地址，localhost</span></span><br><span class="line">    port: <span class="number">9000</span>,<span class="comment">//端口号，如果deserver的配置没问题，但是项目启动失败了，需要注意该端口号是否被占用</span></span><br><span class="line">    compress: <span class="literal">true</span>,<span class="comment">//一切服务都启用 gzip 压缩</span></span><br><span class="line">    open: <span class="literal">true</span>,<span class="comment">//浏览器自动打开</span></span><br><span class="line">    <span class="comment">//hot:true,//webpack4之前的版本的配置：热更新，4以后被弱化不需要被配置会自动刷新</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>官网地址：<a href="https://www.webpackjs.com/configuration/dev-server/#devserver" target="_blank" rel="noopener">https://www.webpackjs.com/configuration/dev-server/#devserver</a></li></ul><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何配置 webpack 转化器， webpack 插件， webpack 开发服务器呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="https://GuoChen-thlg.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="https://GuoChen-thlg.github.io/tags/webpack/"/>
    
      <category term="开发服务器" scheme="https://GuoChen-thlg.github.io/tags/%E5%BC%80%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>webpack入门</title>
    <link href="https://guochen-thlg.github.io/2020/03/30/webpack%E5%85%A5%E9%97%A8/23985/"/>
    <id>https://guochen-thlg.github.io/2020/03/30/webpack%E5%85%A5%E9%97%A8/23985/</id>
    <published>2020-03-30T04:36:41.000Z</published>
    <updated>2020-04-02T01:19:54.045Z</updated>
    
    <content type="html"><![CDATA[<p>webpack 是基于Node.js开发出来的一个前端项目构建工具。可以看做是模块打包机（bundler），通过分析项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Sass/less（css预处理器），TypeScript等），并将其打包为合适的格式以供浏览器使用。</p><a id="more"></a><h2 id="为什么使用-webpack"><a href="#为什么使用-webpack" class="headerlink" title="为什么使用 webpack"></a>为什么使用 webpack</h2><ol><li>解决 JavaScript 和 CSS 的依赖问题<ul><li>文件加载顺序的问题会造成 css 没作用或 js 中变量和方法找不到</li></ul></li><li>性能优化<ul><li>文件合并</li><li>文件压缩</li></ul></li><li>提高开发效率<ul><li>单元测试</li><li>vebdor 前缀</li><li>代码分析</li></ul></li><li>版本升级</li></ol><h2 id="webpack-的作用"><a href="#webpack-的作用" class="headerlink" title="webpack 的作用"></a>webpack 的作用</h2><ol><li>将sass/less 等预编译的css语言转换成浏览器识别的css文件</li><li>能够将多个预编译文件打包成一个文件</li><li>打包image/styles/assets/scrips/等前端常用的文件</li><li>搭建开发环境开启服务器</li><li>监视文件改动，热部署。</li><li>将单文件组件(*.vue)类型的文件，转化成浏览器识别的内容</li></ol><h2 id="使用-webpack-搭建项目"><a href="#使用-webpack-搭建项目" class="headerlink" title="使用 webpack 搭建项目"></a>使用 webpack 搭建项目</h2><ol><li><p>首先新建一个项目目录 domewebpack<br><br>在终端进入该目录,初始化项目</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></tbody></table></figure></li><li><p>安装 <code>webpack</code> &amp; <code>webpack-cli</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack webpack-cli -D</span><br></pre></td></tr></tbody></table></figure></li><li><p>创建文件<br>在项目根目录下创建 src 文件夹（放置入口文件的地方，源码也放在这里）<br>在项目根目录下创建 dist 文件夹（出口文件方式的地方）</p></li><li><p>创建dist/index.html文件,包含id=root的元素，引入bundle.js</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>创建src/index.js，里面给root元素设置innerhtml</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'root'</span>).innerHTML=<span class="string">'webpack项目'</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>在项目根目录下创建 webpack.config.js 文件</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">    mode: <span class="string">'development'</span>,<span class="comment">// 发布版：production 开发板：development</span></span><br><span class="line">    entry: {<span class="comment">// 入口</span></span><br><span class="line">        entryKey: <span class="string">'./src/index.js'</span>,<span class="comment">// entryKey 是自定义的</span></span><br><span class="line">    },</span><br><span class="line">    <span class="comment">// module: {// loladers 遵循module.rules规则</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// },</span></span><br><span class="line">    <span class="comment">// plugins: [</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ],</span></span><br><span class="line">    output: {<span class="comment">// 出口</span></span><br><span class="line">        filename: <span class="string">'bundle.js'</span>,<span class="comment">// 打包后的文件名 filename是固定的</span></span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>),<span class="comment">// 路径必须是绝对路径</span></span><br><span class="line">    },</span><br><span class="line">    <span class="comment">// devServer: {// 开发服务器</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// }</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>在 package.json 文件 scripts 下配置 <code>"biuild": "npx webpack --config webpack.config.js"</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": {</span><br><span class="line">    "biuild": "npx webpack --config webpack.config.js",</span><br><span class="line">    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1"</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure></li><li><p>在终端运行打包命令</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></tbody></table></figure><p>在浏览器打开 index.html 就可以看到 已经打印出 <code>webpack项目</code> 字体了。</p></li></ol><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;webpack 是基于Node.js开发出来的一个前端项目构建工具。可以看做是模块打包机（bundler），通过分析项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Sass/less（css预处理器），TypeScript等），并将其打包为合适的格式以供浏览器使用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="https://GuoChen-thlg.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="https://GuoChen-thlg.github.io/tags/webpack/"/>
    
      <category term="入门" scheme="https://GuoChen-thlg.github.io/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>文章置顶</title>
    <link href="https://guochen-thlg.github.io/2020/03/26/%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6/36265/"/>
    <id>https://guochen-thlg.github.io/2020/03/26/%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6/36265/</id>
    <published>2020-03-26T04:59:02.000Z</published>
    <updated>2020-06-13T15:46:29.398Z</updated>
    
    <content type="html"><![CDATA[<p>有的时候，写好一篇文章，想要置顶，但 next 默认是按照时间来进行排序的，自己写的文章总不能靠修改创作时间来进行置顶吧。想要通过一个权重来进行排序，但苦苦没有办法，今天它来了</p><a id="more"></a><h2 id="设置文章置顶"><a href="#设置文章置顶" class="headerlink" title="设置文章置顶"></a>设置文章置顶</h2><ol><li>修改仓库配置，使其支持文章置顶功能<br>卸载 hexo-generator-index<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm r hexo-generator-index</span><br></pre></td></tr></tbody></table></figure>安装 hexo-generator-index-pin-top<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-generator-index-pin-top -S</span><br></pre></td></tr></tbody></table></figure></li><li>在文章中添加置顶信息<br>添加 top<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title: 文章置顶</span><br><span class="line">tags:</span><br><span class="line">  - 标签</span><br><span class="line">categories:</span><br><span class="line">  - 分类</span><br><span class="line">copyright: true</span><br><span class="line">date: 2020-03-26 12:59:02</span><br><span class="line">top:10</span><br></pre></td></tr></tbody></table></figure>top 后数字越大，权限越高</li></ol><h2 id="添加置顶标志"><a href="#添加置顶标志" class="headerlink" title="添加置顶标志"></a>添加置顶标志</h2><p>打开：/bolg/themes/next/layout/_macro/post.swig 文件<br>在<code>&lt;span class='post-time'&gt;</code> 标签下，插入以下代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> {% if post.top %}</span><br><span class="line">      &lt;span class="post-meta-item-icon"&gt;</span><br><span class="line">      &lt;i class="fa fa-thumb-tack"&gt;&lt;/i&gt;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">      &lt;font color=red&gt;置顶&lt;/font&gt;</span><br><span class="line">      &lt;span class="post-meta-divider"&gt;|&lt;/span&gt;</span><br><span class="line">{% endif %}</span><br></pre></td></tr></tbody></table></figure><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有的时候，写好一篇文章，想要置顶，但 next 默认是按照时间来进行排序的，自己写的文章总不能靠修改创作时间来进行置顶吧。想要通过一个权重来进行排序，但苦苦没有办法，今天它来了&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="https://GuoChen-thlg.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://GuoChen-thlg.github.io/tags/Hexo/"/>
    
      <category term="next" scheme="https://GuoChen-thlg.github.io/tags/next/"/>
    
      <category term="文章置顶" scheme="https://GuoChen-thlg.github.io/tags/%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6/"/>
    
  </entry>
  
  <entry>
    <title>第一篇博客</title>
    <link href="https://guochen-thlg.github.io/2020/03/21/Hello/16108/"/>
    <id>https://guochen-thlg.github.io/2020/03/21/Hello/16108/</id>
    <published>2020-03-20T16:00:00.000Z</published>
    <updated>2020-07-05T06:56:35.085Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>欢迎来到我的第一篇博客，在闲暇之余，搭了个博客，用来记录一下自己的学习过程，俗话说得好，好记性不如烂笔头。还记得上学的时候，老师经常对我们说这句话。虽然当时也（被迫）养成了这个习惯，但是还是很抵触的（懒啊~）。</p><a id="more"></a><h2 id="为什么要写博客"><a href="#为什么要写博客" class="headerlink" title="为什么要写博客"></a>为什么要写博客</h2><ul><li><strong>积累</strong> 写博客主要是积累经验，记录生活中的收获，</li><li><strong>记录</strong> 把博客当做是日记，记录工作生活中的所见所闻，所思所想。</li><li><strong>交流</strong> 博客是一个很大的圈子。</li><li><strong>学习</strong> 在这里总会学到知识的，正如每天都会阅读。</li></ul><h2 id="写博客当然得先了解一下-Markdown"><a href="#写博客当然得先了解一下-Markdown" class="headerlink" title="写博客当然得先了解一下 Markdown"></a>写博客当然得先了解一下 Markdown</h2><blockquote><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。</p></blockquote><p>好啦，这就是我的第一篇博客了，先记录到这里，我的博客之路将从这里出发！</p><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;欢迎来到我的第一篇博客，在闲暇之余，搭了个博客，用来记录一下自己的学习过程，俗话说得好，好记性不如烂笔头。还记得上学的时候，老师经常对我们说这句话。虽然当时也（被迫）养成了这个习惯，但是还是很抵触的（懒啊~）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂记" scheme="https://GuoChen-thlg.github.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
  </entry>
  
</feed>
